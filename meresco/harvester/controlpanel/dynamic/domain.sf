## begin license ##
#
# "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
# a web-control panel.
# "Meresco Harvester" is originally called "Sahara" and was developed for
# SURFnet by:
# Seek You Too B.V. (CQ2) http://www.cq2.nl
#
# Copyright (C) 2017 Seecr (Seek You Too B.V.) http://seecr.nl
#
# This file is part of "Meresco Harvester"
#
# "Meresco Harvester" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Meresco Harvester" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Meresco Harvester"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

import page
import common
import target

# req.req.headers_out['Cache-control'] = 'no-cache'


def main(**kwargs):
    user = kwargs.get('session', {}).get('user')
    domain = kwargs.get('session', {}).get('domain')
    domainId = kwargs.get('arguments', {}).get('identifier', [None])[0]
    if not user or (not user.isAdmin() and domain != domainId):
        yield http.redirect("/login")
        return
    yield page.layoutWithMenu(_content, **kwargs)


def _content(arguments, session, **kwargs):
    domainIdentifier = arguments.get("identifier", [None])[0]
    user = session['user']
    domain = observable.call.getDomain(domainIdentifier)
    domainIdentifier = domain['identifier']

    isAdmin = user.isAdmin()
    if not isAdmin and session.get('domain', '') != domainIdentifier:
        raise Exception('Illegal use')

    yield """
<h1>Domain Administration</h1>"""
    yield common.showErrorMessage(arguments)

    yield """

<div>
    <h3>Domain: {domainIdentifier}</h3>
    <form method="post" action="/actions/updateDomain">
        <input type="hidden" name="redirectUri" value="{domainEditLink}"/>
        <table width="320" border="0" cellspacing="0" cellpadding="0">
            <tr>
                <td>Id:</td>
                <td><input size="15"  type="hidden" name="identifier" value="{domainIdentifier}">{domainIdentifier}</td>
            </tr>
            <tr>
                <td>Description:</td>
                <td><input size="60" type="text" name="description" value="{domainDescription}"></td>
                <td><input type="submit" name="action" class="butt" value="Save" accesskey="s"></td>
            </tr>
        </table>
    </form>
</div>

<div>
    <h3>Repository Groups</h3>
    <form action='/actions/addRepositoryGroup' method='post'>
        <input type="hidden" name="redirectUri" value="{repositoryGroupLink}"/>
        <input type="hidden" name="domainId" value="{domainIdentifier}"/>
        <table width="320" border="0" cellspacing="0" cellpadding="0">
            <tr>
                <td width="60">Name:</td>
                <td width="200"><input name="identifier" type="text" class="zkveld" value=""></td>
                <td width="40"><input name="submit" type="submit" class="butt" value="Create Repository Group"></td>
            </tr>
        </table>
    </form>

    <table width="100%" border="0" cellspacing="0" cellpadding="0">""".format(
        domainIdentifier=domainIdentifier,
        domainDescription=domain.get("description") or "",
        domainEditLink="/domain?{}".format(urlencode(dict(domainId=domainIdentifier))),
        repositoryGroupLink="/repositoryGroup?{}".format(urlencode(dict(domainId=domainIdentifier))))

    for groupId in sorted(domain.get('repositoryGroupIds', []), key=lambda x:str(x).lower()):
        repositoryGroup = observable.call.getRepositoryGroup(identifier=groupId, domainId=domainIdentifier)
        name = repositoryGroup.get('name', {}).get('nl', '')

        yield """
        <tr class="table_row">
            <td width="60%">{name} ({groupId})</td>
            <td><a href="{repositoryGroupEditLink}">Edit / View</a></td>
            <td>
                <form method='post' action='/actions/deleteRepositoryGroup' name="{deleteFormName}">
                    <input type="hidden" name="redirectUri" value="{domainEditLink}"/>
                    <input type="hidden" name="domainId" value="{domainIdentifier}"/>
                    <input type="hidden" name="identifier" value="{groupId}"/>
                    <a onclick="if(confirm('Weet u het zeker?')) {{ document.{deleteFormName}.submit();}}; return false;">Delete</a>
                </form>
            </td>
        </tr>""".format(
        name=name,
        groupId=groupId,
        domainEditLink="/domain?{}".format(urlencode(dict(identifier=domainIdentifier))),
        repositoryGroupEditLink="/repositoryGroup?{}".format(urlencode(dict(domainId=domainIdentifier, identifier=groupId))),
        deleteFormName="deleteRepositoryGroup_{}".format(groupId.replace("-", "_")),
        domainIdentifier=domainIdentifier,
        )

    yield """
    </table>
</div>

<div>
    <h3>Targets</h3>"""
    if isAdmin:
        yield """
 <form action='/actions/addTarget' method='post'>
   <input type="hidden" name="redirectUri" value="{targetEditLink}"/>
   <input type="hidden" name="domainId" value="{domainIdentifier}"/>
   <table width="320" border="0" cellspacing="0" cellpadding="0">
    <tr>
     <td width="60">Name:</td>
     <td width="200"><input name="name" type="text" class="zkveld" value=""></td>
     <td width="60">Type:</td>
     <td>""".format(
         targetEditLink="/target?{}".format(urlencode(dict(referrerDomain=domainIdentifier))),
         domainIdentifier=domainIdentifier,
    )

        yield common.dropdown("targetType", target.TYPES.items(), None)
        yield """
     </td>
     <td width="40"><input name="submit" type="submit" class="butt" value="Create Target"></td>
    </tr>
   </table>
 </form>"""

    yield """
  <table width="100%" border="0" cellspacing="0" cellpadding="0">"""

    for targetId in domain.get('targetIds', []):
        name = observable.call.getTarget(targetId).get('name', '')
        yield """
   <tr class="table_row">
    <td width="60%">{name}</td>
    <td><a href="{targetEditLink}">{label}</a></td>""".format(
            name=name,
            targetEditLink="/target?{}".format(urlencode(dict(identifier=targetId, referrerDomain=domainIdentifier))),
            label="Edit / View" if isAdmin else "View"
        )

        if isAdmin:
            yield """
    <td>
     <form method='post' action='/actions/deleteTarget' name="{formName}">
        <input type="hidden" name="redirectUri" value="{domainEditLink}"/>
        <input type="hidden" name="domainId" value="{domainIdentifier}"/>
        <input type="hidden" name="identifier" value="{targetId}"/>
     <a onclick="if(confirm('Weet u het zeker?')) {{ document.{formName}.submit(); }}; return false;">
        Delete
     </a>
     </form>
    </td>""".format(
            formName="deleteTarget_{}".format(targetId.replace("-", "")),
            domainEditLink="/domain?{}".format(urlencode(dict(identifier=domainIdentifier))),
            domainIdentifier=domainIdentifier,
            targetId=targetId,
        )
        yield """
   </tr>"""
    yield """
  </table>
</div>


<div><h3>Mappings</h3>"""
    if isAdmin:
        yield """
 <form action='/actions/addMapping' method='post'>
   <input type="hidden" name="redirectUri" value="{mappingEditLink}"/>
   <input type="hidden" name="domainId" value="{domainIdentifier}"/>
   <table width="320" border="0" cellspacing="0" cellpadding="0">
    <tr>
     <td width="60">Name:</td>
     <td width="200"><input name="name" type="text" class="zkveld" value=""></td>
     <td width="40"><input name="submit" type="submit" class="butt" value="Create Mapping"></td>
    </tr>
   </table>
 </form>""".format(
         mappingEditLink="/mapping?{}".format(urlencode(dict(referrerDomain=domainIdentifier))),
         domainIdentifier=domainIdentifier,
         )
    yield """
  <table width="100%" border="0" cellspacing="4" cellpadding="0">"""

    for mappingId in domain.get('mappingIds', []):
        name = observable.call.getMapping(mappingId).get('name', '')
        yield """
   <tr class="table_row">
    <td width="60%">{name}</td>
    <td><a href="{mappingEditLink}">{label}</a></td>""".format(
            name=name,
            mappingEditLink="/mapping?{}".format(urlencode(dict(identifier=mappingId, referrerDomain=domainIdentifier))),
            label="Edit / View" if isAdmin else "View",
        )
        if isAdmin:
            yield """
    <td>
      <form method='post' action='/actions/deleteMapping' name="{formName}">
        <input type="hidden" name="redirectUri" value="{domainEditLink}"/>
        <input type="hidden" name="domainId" value="{domainIdentifier}"/>
        <input type="hidden" name="identifier" value="{mappingId}"/>
     <a onclick="if(confirm('Weet u het zeker?')) {{ document.{formName}.submit(); }}; return false;">Delete</a>
     </form>
    </td>""".format(
            formName="deleteMapping_{}".format(mappingId.replace("-", "")),
            domainEditLink="/domain?{}".format(urlencode(dict(identifier=domainIdentifier))),
            domainIdentifier=domainIdentifier,
            mappingId=mappingId
        )
        yield """
    <td><a href="{mappingUrl}">Test</a></td>
   </tr>""".format(mappingUrl="/testmapping?{}".format(urlencode(dict(mappingId=mappingId, referrerDomain=domainIdentifier))))
    yield """
  </table>
</div>"""

    yield common.showStatusFor(domainIdentifier, "domain")

    if isAdmin:
        yield """<p><a href="/domains">Back to Domains &amp; Users</a></p>"""
