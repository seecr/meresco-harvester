## begin license ##
#
# "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
# a web-control panel.
# "Meresco Harvester" is originally called "Sahara" and was developed for
# SURFnet by:
# Seek You Too B.V. (CQ2) http://www.cq2.nl
#
# Copyright (C) 2017 Seecr (Seek You Too B.V.) http://seecr.nl
#
# This file is part of "Meresco Harvester"
#
# "Meresco Harvester" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Meresco Harvester" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Meresco Harvester"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

import page

DAYS = dict(
    lastweek=7,
    lastmonth=31)


def main(**kwargs):
    yield page.layoutWithMenu(_contents, **kwargs)

def _contents(arguments, **kwargs):
    domainId = arguments.get('domainId', [None])[0]
    repositoryGroupId = arguments.get('repositoryGroupId')
    repositoryId = arguments.get('repositoryId')

    caption = domainId
    objectType = "domain"
    if 'repositoryId' in arguments:
        caption = arguments.get('repositoryId')[0]
        objectType = 'repository'
    elif 'repositoryGroupId' in arguments:
        caption = arguments.get('repositoryGroupId')[0]
        objectType = 'repository group'

    days = DAYS.get(arguments.get("since", ["lastweek"])[0])

    repositories = observable.call.getRepositories(domainId=domainId)
    repositoryNames = []

    for repository in repositories:
        if not repositoryGroupId or repositoryGroupId == repository.get('repositoryGroupId'):
            if not repositoryId or repositoryId == repository.get('identifier'):
                repositoryNames.append(repository.get('identifier'))
    analyser = ThroughputAnalyser("{}/{}".format(CONFIG['logPath'], domainId))
    report = analyser.analyse(repositoryNames, dateSince(days))
    yield """
<p>
<h2>Harvester throughput for the '{caption}' {objectType} for the past {days} days.</h2>
</p>
<table>
    <tr>
        <td>Timespan (hh:mm:ss):</td>
        <td align="right">{hmsString}</td>
        <td></td>
    </tr>
    <tr>
        <td>Number of records:</td>
        <td align="right">{records}</td>
        <td>processed</td>
    </tr>
    <tr>
        <td>Throughput (record/sec):</td>
        <td align="right">{recordsPerSecond}</td>
        <td></td>
    </tr>
    <tr>
        <td>Extrapolated for 24 hours:</td>
        <td align="right">{recordsPerDay}</td>
        <td></td>
    </tr>
</table>""".format(
        caption=caption, 
        objectType=objectType, 
        days=days,
        hmsString = report.hmsString(),
        records=report.records,
        recordsPerSecond=report.recordsPerSecond(),
        recordsPerDay=report.recordsPerDay())
