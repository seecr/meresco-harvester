Changeset created on Thu Mar 31 09:40:45 CEST 2011 by Seek You Too

Description: Harvester ignores sru invalid-data errors

    An SRU update response with an invalid-data exception will be ignored. The 
    maximum ignored records can be set per repository. By default no records 
    will be ignored. 
    The python package name changed from merescoharvester to meresco.harvester
    

Baseline version: meresco-harvester/tags/version_6.1

diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/bin/start-harvester-internal-server version_7.0/bin/start-harvester-internal-server
--- version_6.1/bin/start-harvester-internal-server	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/bin/start-harvester-internal-server	2011-03-30 11:02:10.000000000 +0200
@@ -0,0 +1,48 @@
+#!/usr/bin/env python2.5
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for 
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+
+from os.path import abspath, dirname                #DO_NOT_DISTRIBUTE
+from os import system, getcwd                       #DO_NOT_DISTRIBUTE
+from glob import glob                               #DO_NOT_DISTRIBUTE
+from sys import path as systemPath, exit            #DO_NOT_DISTRIBUTE
+if getcwd() != dirname(abspath(__file__)):          #DO_NOT_DISTRIBUTE
+    print 'Run from directory:',                    #DO_NOT_DISTRIBUTE
+    print dirname(abspath(__file__))                #DO_NOT_DISTRIBUTE
+    exit(1)                                         #DO_NOT_DISTRIBUTE
+system('find .. -name "*.pyc" | xargs rm -f')       #DO_NOT_DISTRIBUTE
+for path in glob('../deps.d/*'):                    #DO_NOT_DISTRIBUTE
+    systemPath.insert(0, path)                      #DO_NOT_DISTRIBUTE
+systemPath.insert(0, '..')                          #DO_NOT_DISTRIBUTE
+
+from sys import argv, exit
+
+if __name__ == '__main__':
+    if len(argv[1:]) != 1:
+        print 'Usage: %s harvester.config' % argv[0]
+        exit(123)
+    configFile = argv[1]
+
+    from meresco.harvester.server import startServer
+    startServer(configFile)
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/deps.txt version_7.0/deps.txt
--- version_6.1/deps.txt	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/deps.txt	2011-03-29 17:08:20.000000000 +0200
@@ -1,2 +1,10 @@
+python-dynamichtml (>= 0.7.2)
+python-dynamichtml (<< 0.8)
+python-lxml (>= 2.1)
+python-lxml (<< 3.0)
+python-meresco-components (>=3.1)
+python-meresco-components (<<3.5)
+python-meresco-core (>= 3.1)
+python-meresco-core (<< 3.2)
 python-slowfoot (>=7.3.2)
 python-slowfoot (<<7.4)
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/doc/harvester.config version_7.0/doc/harvester.config
--- version_6.1/doc/harvester.config	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/doc/harvester.config	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,23 @@
+#
+# Configuration file for Meresco Harvester
+#
+portNumber = 8888
+
+#
+# Url to the apache (slowfoot) part of Meresco Harvester
+#
+saharaUrl = http://localhost:9080
+
+#
+# dataPath stores all repositories, domain, etc information.
+#
+dataPath = /home/harvester/data
+
+#
+# logPath will contain logging information which may be rotated
+#
+logPath = /home/harvester/log
+#
+# statePath will contain the current state for harvested
+#
+statePath = /home/harvester/state
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/examples/meresco-harvester.apache.conf version_7.0/examples/meresco-harvester.apache.conf
--- version_6.1/examples/meresco-harvester.apache.conf	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/examples/meresco-harvester.apache.conf	2011-03-29 17:08:20.000000000 +0200
@@ -14,7 +14,7 @@
   # - mapping
   #
   SetHandler mod_python
-  PythonHandler merescoharvester.controlpanel.merescoharvesterhandler
+  PythonHandler meresco.harvester.controlpanel.merescoharvesterhandler
 
   # For debugging you can use the following Options, see modpython.org
   #PythonAutoReload On
@@ -48,6 +48,11 @@
   #
   PythonOption logDir "/var/log/python-meresco-harvester"
   
+  #
+  # internalServer is needed by slowfoot to include new (dynamicHtml) pages
+  #
+  PythonOption internalServer "http://localhost:8888"
+
   Order Allow,Deny
   Allow from All
 </Directory>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/examples/startharvester.py version_7.0/examples/startharvester.py
--- version_6.1/examples/startharvester.py	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/examples/startharvester.py	2011-03-29 17:08:20.000000000 +0200
@@ -12,6 +12,7 @@
 #    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
 #       http://www.kennisnetictopschool.nl
 #    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
 #
 #    This file is part of "Meresco Harvester"
 #
@@ -34,5 +35,5 @@
 # This script should be run by a user with write access to the logDir and stateDir
 # specified in the apache configuration
 
-from merescoharvester.harvester.startharvester import StartHarvester
-StartHarvester().start()
\ No newline at end of file
+from meresco.harvester.startharvester import StartHarvester
+StartHarvester().start()
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/action.py version_7.0/meresco/harvester/action.py
--- version_6.1/meresco/harvester/action.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/action.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,170 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#    Copyright (C) 2010-2011  Stichting Kennisnet http://www.kennisnet.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from harvesterlog import HarvesterLog
+from harvester import Harvester, HARVESTED, NOTHING_TO_DO
+from oairequest import OaiRequest
+from state import State
+from deleteids import DeleteIds, readIds, writeIds
+from os.path import isfile, join
+from os import remove, rename
+from meresco.core import be
+
+DONE = 'Done.'
+
+class Action(object):
+    def __init__(self, repository, stateDir, logDir, generalHarvestLog):
+        self._repository = repository
+        self._stateDir = stateDir
+        self._logDir = logDir
+        self._generalHarvestLog = generalHarvestLog
+    def do(self):
+        """
+        perform action and return
+        (if the action is finished/done, a Message about what happened.)
+        """
+        raise NotImplementedError
+    def info(self):
+        return  str(self.__class__.__name__)
+    def _createHarvester(self):
+        harvesterLog=HarvesterLog(self._stateDir, self._logDir, self._repository.id)
+        helix = \
+            (Harvester(self._repository, self._stateDir, self._logDir, eventLogger=harvesterLog.eventLogger(), generalHarvestLog=self._generalHarvestLog),
+                (OaiRequest(self._repository.baseurl),),
+                (harvesterLog,)
+            )
+        return be(helix)
+
+
+class NoneAction(Action):
+    def do(self):
+        return False, '', False
+    def info(self):
+        return ''
+
+class HarvestAction(Action):
+    def do(self):
+        if self._repository.shopClosed():
+            return False, 'Not harvesting outside timeslots.', False
+
+        harvester = self._createHarvester()
+        message, hasResumptionToken = harvester.harvest()
+        return False, message, hasResumptionToken
+
+    def resetState(self):
+        s = State(self._stateDir, self._repository.id)
+        try:
+            s.setToLastCleanState()
+        finally:
+            s.close()
+
+class DeleteIdsAction(Action):
+    def do(self):
+        if self._repository.shopClosed():
+            return False, 'Not deleting outside timeslots.', False
+
+        d = DeleteIds(self._repository, self._stateDir, self._logDir, generalHarvestLog=self._generalHarvestLog)
+        d.delete()
+        return True, 'Deleted', False
+
+class SmoothAction(Action):
+    def __init__(self, repository, stateDir, logDir, generalHarvestLog):
+        Action.__init__(self, repository, stateDir, logDir, generalHarvestLog)
+        self.filename = join(self._stateDir, self._repository.id + '.ids')
+        self.oldfilename = self.filename + ".old"
+
+    def do(self):
+        if self._repository.shopClosed():
+            return False, 'Not smoothharvesting outside timeslots.', False
+
+        if not isfile(self.oldfilename):
+            result, hasResumptionToken = self._smoothinit(), True
+        else:
+            result, hasResumptionToken = self._harvest()
+        if result == NOTHING_TO_DO:
+            result = self._finish()
+            hasResumptionToken = False
+        return result == DONE, 'Smooth reharvest: ' + result, hasResumptionToken
+
+    def resetState(self):
+        s = State(self._stateDir, self._repository.id)
+        try:
+            s.markDeleted()
+        finally:
+            s.close()
+
+    def _smoothinit(self):
+        if isfile(self.filename):
+            rename(self.filename, self.oldfilename)
+        else:
+            open(self.oldfilename, 'w').close()
+        open(self.filename, 'w').close()
+        logger = HarvesterLog(self._stateDir, self._logDir, self._repository.id)
+        try:
+            logger.markDeleted()
+        finally:
+            logger.close()
+        return     'initialized.'
+
+    def _finish(self):
+        deletefilename = self.filename + '.delete'
+        if not isfile(deletefilename):
+            writeIds(deletefilename, readIds(self.oldfilename) - readIds(self.filename))
+        self._delete(deletefilename)
+        remove(self.oldfilename)
+        remove(deletefilename)
+        return DONE
+
+    def _delete(self, filename):
+        d = DeleteIds(self._repository, self._stateDir, self._logDir, generalHarvestLog=self._generalHarvestLog)
+        d.deleteFile(filename)
+
+    def _harvest(self):
+        harvester = self._createHarvester()
+        return harvester.harvest()
+
+class ActionFactoryException(Exception):
+    pass
+
+class ActionFactory(object):
+    def createAction(self, repository, stateDir, logDir, generalHarvestLog):
+        if repository.action == 'clear':
+            return DeleteIdsAction(repository, stateDir=stateDir, logDir=logDir, generalHarvestLog=generalHarvestLog)
+        if repository.action == 'refresh':
+            return SmoothAction(repository, stateDir=stateDir, logDir=logDir, generalHarvestLog=generalHarvestLog)
+        if repository.use == 'true' and repository.action == '':
+            return HarvestAction(repository, stateDir=stateDir, logDir=logDir, generalHarvestLog=generalHarvestLog)
+        if repository.use == "" and repository.action == '':
+            return NoneAction(repository, stateDir=stateDir, logDir=logDir, generalHarvestLog=generalHarvestLog)
+        raise ActionFactoryException("Action '%s' not supported."%repository.action)
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/compositeuploader.py version_7.0/meresco/harvester/compositeuploader.py
--- version_6.1/meresco/harvester/compositeuploader.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/compositeuploader.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,75 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2009 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+#
+# Copyright (C) 2005 Seek You Too B.V. http://www.cq2.nl
+#
+# $Id: virtualuploader.py 146 2006-03-27 12:50:57Z svn $
+
+from virtualuploader import VirtualUploader, UploaderFactory
+from target import Target
+
+class CompositeUploader(VirtualUploader):
+    
+    def __init__(self, aTarget, aLogger, aCollection):
+        VirtualUploader.__init__(self, aLogger)
+        self._collection = aCollection
+        self._target = aTarget
+        self._delegates = self._getDelegates()
+        
+    def _getDelegates(self):
+        result = []
+        factory = UploaderFactory()
+        for id in self._target.delegate:
+            target = self._target._saharaget.getTarget(self._target.domainId, id)
+            uploader = factory.createUploader(target, self._logger, self._collection)
+            result.append(uploader)
+        return result
+    
+    def start(self):
+        for delegate in self._delegates:
+            delegate.start()
+    
+    def stop(self):
+        for delegate in self._delegates:
+            delegate.stop()
+        
+    def send(self, anUpload):
+        for delegate in self._delegates:
+            delegate.send(anUpload)
+    
+    def delete(self, uploadId):
+        for delegate in self._delegates:
+            delegate.delete(uploadId)
+    
+    def info(self):
+        result = []
+        return "Composite Uploader: " + str(result)
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/disallowfileplugin.py version_7.0/meresco/harvester/controlpanel/disallowfileplugin.py
--- version_6.1/meresco/harvester/controlpanel/disallowfileplugin.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/disallowfileplugin.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,61 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from string import strip
+BANNED_EXTENSIONS = ['domain', 'repositoryGroup', 'repository', 'mapping', 'target']
+
+class DisallowFilePlugin(object):
+    def __init__(self, patterns = ['edit', 'save'], patternfile = None):
+        self._patterns = patternfile and self._readPatterns(patternfile) or patterns
+
+    def _readPatterns(self, filename):
+        patternfile = open(filename)
+        try:
+            return filter(None, map(strip,patternfile.readlines()))
+        finally:
+            patternfile.close()
+
+    def inPatterns(self, aString):
+        return aString in self._patterns
+
+    def handle(self, request, path):
+        filename = path.split('/')[-1]
+        if self.inPatterns(filename):
+            username = request.getSession().get('username', None)
+            if username == None:
+                self.doNotAllowedAction(request, path)
+        extension = filename.split('.')[-1]
+        if extension in BANNED_EXTENSIONS and not request.remoteHost() in ['127.0.0.1', 'localhost'] and request.getSession().get('username', None) == None:
+            self.doNotAllowedAction(request, path)
+
+    def doNotAllowedAction(self, request, path):
+        raise IOError(2,"No such file or directory: '%s'"%path)
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/html/dynamic/getStatus.sf version_7.0/meresco/harvester/controlpanel/html/dynamic/getStatus.sf
--- version_6.1/meresco/harvester/controlpanel/html/dynamic/getStatus.sf	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/html/dynamic/getStatus.sf	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,16 @@
+
+def main(arguments, **kwargs):
+    domainId = arguments.get('domainId', [None])[0]
+    repositoryId = arguments.get('repositoryId', [None])[0]
+
+    yield """<?xml version="1.0" encoding="UTF-8"?>
+<saharaget xmlns="http://sahara.cq2.org/xsd/saharaget.xsd">"""
+    yield """<responseDate>%s</responseDate>""" % time.strftime('%Y-%m-%dT%H:%M:%SZ', time.gmtime())
+    yield """<request>
+    <verb>GetStatus</verb>
+    <domainId>%(domainId)s</domainId>
+    <repositoryId>%(repositoryId)s</repositoryId>
+  </request>""" % locals()
+    yield any.getStatus(domainId, repositoryId)
+    yield """</saharaget>"""
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/html/dynamic/ignoredRecord.sf version_7.0/meresco/harvester/controlpanel/html/dynamic/ignoredRecord.sf
--- version_6.1/meresco/harvester/controlpanel/html/dynamic/ignoredRecord.sf	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/html/dynamic/ignoredRecord.sf	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,17 @@
+def main(arguments, **kwargs):
+    domainId = arguments.get('domainId', [None])[0]
+    repositoryId = arguments.get('repositoryId', [None])[0]
+    recordId = arguments.get('recordId', [None])[0]
+
+    yield """<div>
+    <h3>Repository %s - Record %s</h3>""" % (repositoryId, recordId)
+
+    ignoredRecord = any.getIgnoredRecord(domainId, repositoryId, recordId)
+
+    yield "<pre>%s</pre>" % escapeHtml(xpath(ignoredRecord, '//diag:diagnostic/diag:details/text()')[0])
+    yield '<p><a href="/page/ignored/?%s">Back to ignored records</a></p>' % escapeHtml(urlencode(dict(domainId=domainId, repositoryId=repositoryId)))
+    yield "</div>"""
+
+
+def xpath(node, path):
+    return node.xpath(path, namespaces={'diag':'http://www.loc.gov/zing/srw/diagnostic/'})
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/html/dynamic/ignored.sf version_7.0/meresco/harvester/controlpanel/html/dynamic/ignored.sf
--- version_6.1/meresco/harvester/controlpanel/html/dynamic/ignored.sf	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/html/dynamic/ignored.sf	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,19 @@
+def main(arguments, **kwargs):
+    domainId = arguments.get('domainId', [None])[0]
+    repositoryId = arguments.get('repositoryId', [None])[0]
+
+    orginalArgs = dict(domainId=domainId, repositoryId=repositoryId)
+
+    yield """<div>
+    <h3>Repository %s</h3>""" % repositoryId
+
+    yield '<table class="event">'
+    yield '<tr><td class="eventheader">Ignored records</td></tr>'
+    for id in any.ignoredRecords(domainId, repositoryId):
+        recordId = id.split(":", 1)[-1]
+        args = {'recordId': recordId}
+        args.update(orginalArgs)
+        yield '<tr><td class="link"><a href="/page/ignoredRecord/?%s">%s</a></td></tr>' % (escapeHtml(urlencode(args)), recordId)
+    yield """</table>
+    <p><a href="/page/showHarvesterStatus/show?%s">Back to harvester status of this repository</a></p>
+    </div>""" % (escapeHtml(urlencode(orginalArgs)))
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/__init__.py version_7.0/meresco/harvester/controlpanel/__init__.py
--- version_6.1/meresco/harvester/controlpanel/__init__.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/__init__.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,31 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2009 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/merescoharvesterhandler.py version_7.0/meresco/harvester/controlpanel/merescoharvesterhandler.py
--- version_6.1/meresco/harvester/controlpanel/merescoharvesterhandler.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/merescoharvesterhandler.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,99 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2009 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from slowfoot.slowfoothandler import Request, handlepsp, util, _psp_login, retrieveSession, apache
+from disallowfileplugin import DisallowFilePlugin
+from urllib import urlencode
+from urllib2 import urlopen
+from os.path import dirname, join
+
+templatesPath = join(dirname(__file__), 'slowfoottemplates')
+
+dfp = DisallowFilePlugin([
+    'edit',
+    'deletefile',
+    'save',
+    'domain.edit',
+    'mapping.edit',
+    'repository.edit',
+    'repositoryGroup.edit',
+    'target.edit',
+    'domain.new',
+    'mapping.new',
+    'repository.new',
+    'repositoryGroup.new',
+    'target.new',
+    'domain.save',
+    'mapping.save',
+    'repository.save',
+    'repositoryGroup.save',
+    'target.save',
+    'domain.deleteChild',
+    'repositoryGroup.deleteRepository',
+    'domains',
+    'user.edit',
+    'user.delete',
+    'user.new',
+    'user.save'
+    ])
+
+internalServerStatus=[]
+
+class StatusException(Exception):
+    def __init__(self, code, message=None):
+        Exception.__init__(self, message if message != None else code)
+        self.code = code
+
+def handler(req):
+    if internalServerStatus != ['OK']:
+        try:
+            checkServerStatus(req)
+            internalServerStatus.append('OK')
+        except StatusException, e:
+            req.uri = '/internalServerError?' + urlencode({'originalUri': req.uri, 'error': e.code, 'message': str(e)})
+
+    req.get_options()['templatesPath'] = templatesPath
+    req = Request(req, handlepsp, util, _psp_login, retrieveSession)
+    
+    req.addPlugin('PREOPEN', dfp)
+    req.go()
+    return apache.OK
+
+def checkServerStatus(req):
+    internalServer = req.get_options().get('internalServer', None)
+    if internalServer == None:
+        raise StatusException('internalServerNotFound')
+    try:
+        urlopen(internalServer + '/info/version').read()
+    except:
+        from traceback import format_exc
+        raise StatusException('internalServerNotReachable', format_exc())
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/aboutslowfoot version_7.0/meresco/harvester/controlpanel/slowfoottemplates/aboutslowfoot
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/aboutslowfoot	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/aboutslowfoot	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,26 @@
+<%
+type('text/plain')
+%>About Slowfoot
+
+(c) 2005-2008 Seek You Too bv
+
+What is Slowfoot?
+
+Introduction
+Slowfoot is an integration system for web-based applications. It provides a framework to connect existing components and complete applications in order to let them collaborate as needed. The means of communication between the systems are Internet based protocols such as HTTP, XML, OAI-PMH, SOAP, SSL, etc. Slowfoot connects applications by connecting their inputs and outputs and adapting protocols and formats as needed.
+
+Design
+By design, Slowfoot is a minimal system that leaves actual processing to the applications and components. In other words, it doesn't capture different technologies, rendering them unusable by other system, but instead connects to all kinds of systems already deployed by your organisation or offered as services by others.
+
+Ideas behind
+The idea behind Slowfoot is that the world is plentyful of data, but never in the right place and never in the right format. Hence what is needed are two things: data transportation and data conversion. That's what Slowfoot does very wel. And its is easy to configure and program too!
+
+The next driving idea behind Slowfoot is what we call 'Shifting Expertise'. Traditional systems usually have a very strict seperation in what end users are able to do (mostly almost nothing) and what must be done by the experts (mostly very costly). A Slowfoot system, once installed can be changed by end-users, up to their own level of expertise. At their own wish, at any point, they may hand it over to their own more technical staff, who in turn decide to call in the experts at the point where they feel their own expertise falls short.  Thus, Slowfoot systems let their owners decide when to call in the help of other, no matter what the task at hand is.  
+
+Idea behind the name
+Another driving force behind the architecture of Slowfoot is the idea that many problems can be solved by 
+A) using existing software better, 
+B) using less software. 
+In IT, many complex problems are solved by adding complexity. Slowfoot solves problems by reducing complexity, and using less software instead of more. Slowfoot's spirit is one of not being afraid if complex sofwtare, and the belief that problems can be solved by throwing away software when not needed. Relax, look at what you already have and what you could do without it. Slowfoot stand of taking little steps, slowly but securely, and solve your problems in a relaxed way.
+
+Developed by Seek You Too BV
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/areYouSure version_7.0/meresco/harvester/controlpanel/slowfoottemplates/areYouSure
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/areYouSure	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/areYouSure	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,8 @@
+<p>
+<h3>Deleting <i><%=args.filename%></i></h3>
+Are you sure you want to delete it?<br>
+<br>
+<a href="<%=referer%>"><b>Cancel</b></a>
+<span style="padding-left: 4em;"/>
+<a href="<%=args.ok%>"><b>Ok</b></a>
+</p>
\ No newline at end of file
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/bin version_7.0/meresco/harvester/controlpanel/slowfoottemplates/bin
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/bin	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/bin	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,9 @@
+<%
+if args.name.endswith('.pdf'):
+  type('application/pdf')
+elif args.name.endswith('.doc'):
+  type('application/msword')
+else:
+  type('image/jpeg')
+#
+%><%=text%>
Binary files version_6.1/meresco/harvester/controlpanel/slowfoottemplates/button.jpg and version_7.0/meresco/harvester/controlpanel/slowfoottemplates/button.jpg differ
Binary files version_6.1/meresco/harvester/controlpanel/slowfoottemplates/cq2favicon.ico and version_7.0/meresco/harvester/controlpanel/slowfoottemplates/cq2favicon.ico differ
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/css version_7.0/meresco/harvester/controlpanel/slowfoottemplates/css
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/css	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/css	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1 @@
+<%type('text/css')%><%=text%>
\ No newline at end of file
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/deletefile version_7.0/meresco/harvester/controlpanel/slowfoottemplates/deletefile
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/deletefile	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/deletefile	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,5 @@
+<%
+deletefile(str(args.name))
+
+redirect(referer)
+%>
\ No newline at end of file
Binary files version_6.1/meresco/harvester/controlpanel/slowfoottemplates/delete.jpg and version_7.0/meresco/harvester/controlpanel/slowfoottemplates/delete.jpg differ
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/dir version_7.0/meresco/harvester/controlpanel/slowfoottemplates/dir
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/dir	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/dir	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,6 @@
+<%
+type('text/html')
+for f in files():
+%><a href="/edit/<%=f%>"><%=f%></a><br>
+<%
+#%>
\ No newline at end of file
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/domain.deleteChild version_7.0/meresco/harvester/controlpanel/slowfoottemplates/domain.deleteChild
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/domain.deleteChild	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/domain.deleteChild	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,29 @@
+<%
+domain = xml.domain
+kind = args.kind
+kindInXml = kind + 'Id' 
+deleteId = args.id
+domainId = domain.id
+
+
+fileName = deleteId + '.' + kind
+if kind == 'repositoryGroup':
+	fileName = domainId + '.' + fileName
+deletefile(filepath(fileName))
+
+target(filepath(domainId + '.domain'))
+%><?xml version="1.0"?>
+<domain>
+<%
+for child in domain.xml_children:
+  if child.__class__ == unicode:
+    req.write(child)
+  else:
+    if (child.nodeName != kindInXml) or (unicode(child) != deleteId):
+      req.write(child.xml())
+#
+%>
+</domain>
+<%
+redirect('/page/domain.edit/' + domainId + '.domain')
+%>
\ No newline at end of file
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/domain.edit version_7.0/meresco/harvester/controlpanel/slowfoottemplates/domain.edit
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/domain.edit	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/domain.edit	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,230 @@
+<%
+req.req.headers_out['Cache-control'] = 'no-cache'
+domain = xml.domain
+if not session.get('isAdmin','') and session.get('domain', '') != domain.id:
+  raise Exception('Illegal use')
+#
+isAdmin = session.get('isAdmin', '')
+%>
+
+<p class="head">Domain Administration</p>
+
+<%=args.error and '<span class="error">' + args.error + '</span>'or ''%>
+
+<form method="post" action="/domain.save/<%= domain.id %>.domain">
+ <fieldset><legend class="subhead">Domain: <%= domain.id %></legend>
+  <table>
+   <tr><td>Id:</td><td><input size="15"  type="hidden" name="id" value="<%=domain.id%>"><%=domain.id%></td></tr>
+   <tr>
+    <td>Description:</td><td><input size="60" type="text" name="description" value="<%=domain.description%>"></td>
+    <td><input type="submit" name="action" class="butt" value="Save" accesskey="s"></td>
+   </tr>
+  </table>
+ </fieldset>
+</form>
+
+
+
+<fieldset><legend class="subhead">Repository Groups</legend>
+ <form action='/repositoryGroup.new/<%= domain.id %>.domain' method='post'>
+  <fieldset><legend>Create new group</legend>
+   <table width="320" border="0" cellspacing="0" cellpadding="0">
+    <tr>
+     <td width="60">Name:&nbsp;</td>
+     <td width="200"><input name="id" type="text" class="zkveld" value=""></td>
+     <td width="40"><input name="submit" type="submit" class="butt" value="Create Repository Group"></td>
+    </tr>
+   </table>
+  </fieldset>
+ </form>
+
+ <fieldset><legend>Existing groups (id)</legend>
+  <table width="100%" border="0" cellspacing="4" cellpadding="0">
+<%
+for groupId in sorted(domain.repositoryGroupId):
+  #
+  name = asxml(url('/' + domain.id + '.' + groupId + '.repositoryGroup')).repositoryGroup.name
+%>
+   <tr>
+    <td width="60%"><%=name%> (<%= groupId %>)</td>
+    <td>
+     <a href="/page/repositoryGroup.edit/<%= domain.id %>.<%= groupId %>.repositoryGroup">
+      <img src="/images/edit.png" border="0"> Edit / View
+     </a>
+    </td>
+    <td>
+     <a href="/page/areYouSure/show?<%=
+       urlencode({'ok':'/domain.deleteChild/' + domain.id + '.domain?kind=repositoryGroup&id=' + groupId,
+       'filename':name
+      })%>">
+       <img src="/images/delete.jpg" width="14" height="14" border="0"> Delete
+     </a>
+    </td>
+   </tr>
+<%
+#
+%>
+  </table>
+ </fieldset>
+</fieldset>
+
+
+
+<br>
+<fieldset><legend class="subhead">Targets</legend>
+<%
+if isAdmin:
+%>
+ <form action='/target.new/<%= domain.id %>.domain' method='post'>
+  <fieldset><legend>Create new target</legend>
+   <table width="320" border="0" cellspacing="4" cellpadding="0">
+    <tr>
+     <td width="60">Name:&nbsp;</td>
+     <td width="200"><input name="name" type="text" class="zkveld" value=""></td>
+     <td width="60">Type:&nbsp;</td>
+     <td>
+      <select name="targetType">
+       <option value="sruUpdate">SRU Update Target</option>
+       <option value="filesystem">File System</option>
+       <option value="composite">Multiple Targets</option>
+      </select>
+     </td>
+     <td width="40"><input name="submit" type="submit" class="butt" value="Create Target"></td>
+    </tr>
+   </table>
+  </fieldset>
+ </form>
+
+<%
+# end ifAdmin
+%>
+ <fieldset><legend>Existing targets</legend>
+  <table width="100%" border="0" cellspacing="4" cellpadding="0">
+<%
+def idAndName(id):
+  return id, asxml(url('/xml/'+id+'.target')).target.name
+
+for id,name in map(idAndName, domain.targetId):
+  #
+%>
+   <tr>
+    <td width="60%"><%=name%></td>
+    <td>
+     <a href="/page/target.edit/<%=id%>.target?referrerDomain=<%=domain.id%>">
+      <img src="/images/edit.png" border="0"> <%=isAdmin and 'Edit / View' or 'View'%>
+     </a>
+    </td>
+<%
+  if isAdmin:
+%>
+    <td>
+     <a href="/page/areYouSure/show?<%=
+       urlencode({'ok':'/domain.deleteChild/' + domain.id + '.domain?kind=target&id=' + id,
+       'filename':name
+       })%>">
+      <img src="/images/delete.jpg" width="14" height="14" border="0"> Delete
+     </a>
+    </td>
+<%
+  # end ifAdmin
+%>
+   </tr>
+<%
+#
+%>
+  </table>
+ </fieldset>
+</fieldset>
+
+
+
+
+<br>
+<fieldset><legend class="subhead">Mappings</legend>
+<%
+if isAdmin:
+%>
+ <form action='/mapping.new/<%= domain.id %>.domain' method='post'>
+  <fieldset><legend>Create new mapping</legend>
+   <table width="320" border="0" cellspacing="0" cellpadding="0">
+    <tr>
+     <td width="60">Name:&nbsp;</td>
+     <td width="200"><input name="name" type="text" class="zkveld" value=""></td>
+     <td width="40"><input name="submit" type="submit" class="butt" value="Create Mapping"></td>
+    </tr>
+   </table>
+  </fieldset>
+ </form>
+<%
+#
+%>
+ <fieldset><legend>Existing mappings</legend>
+  <table width="100%" border="0" cellspacing="4" cellpadding="0">
+<%
+def idAndNameForMapping(id):
+  return id, asxml(url('/xml/'+id+'.mapping')).mapping.name
+
+for id,name in map(idAndNameForMapping, domain.mappingId):
+  #
+%>
+   <tr>
+    <td width="60%"><%=name%></td>
+    <td>
+     <a href="/page/mapping.edit/<%=id%>.mapping?referrerDomain=<%=domain.id%>">
+      <img src="/images/edit.png" border="0"> <%=isAdmin and 'Edit / View' or 'View'%>
+     </a>
+    </td>
+<%
+  if isAdmin:
+%>
+    <td>
+     <a href="/page/areYouSure/show?<%=
+       urlencode({'ok':'/domain.deleteChild/' + domain.id + '.domain?kind=mapping&id=' + id,
+       'filename':name
+       })%>">
+      <img src="/images/delete.jpg" width="14" height="14" border="0"> Delete
+     </a>
+    </td>
+<%
+  #
+%>
+    <td>
+     <a href="/page/testmapping/<%=id%>.mapping?referrerDomain=<%=domain.id%>">
+      <img src="/images/exec.png" border="0"> Test
+     </a>
+    </td>
+   </tr>
+<%
+#
+%>
+  </table>
+ </fieldset>
+</fieldset>
+
+
+
+
+<br>
+<fieldset><legend class="subhead">Status</legend>
+<ul>
+ <li>
+ <a href="/page/showHarvesterStatus/show?domainId=<%= domain.id %>">Harvester status of this domain</a>
+ </li>
+ <li>
+ <a href="/page/showHarvesterThroughput/show?domainId=<%= domain.id %>&since=lastweek">Harvester throughput of this domain for the past 7 days.</a>
+ </li>
+ <li>
+ <a href="/page/showHarvesterThroughput/show?domainId=<%= domain.id %>&since=lastmonth">Harvester throughput of this domain for the past 31 days.</a>
+ </li>
+</ul>
+</fieldset>
+
+<%
+if isAdmin:
+%>
+<p>
+ <a href="/page/domains/show">Back to Domains & Users</a>
+</p>
+<%
+#
+%>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/domain.new version_7.0/meresco/harvester/controlpanel/slowfoottemplates/domain.new
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/domain.new	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/domain.new	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,23 @@
+<%
+f = asform(input)
+id = f.id
+
+from os import path
+from meresco.harvester.controlpanel.tools import checkName
+
+if id == '':
+  redirect('/page/domains/show?error=No%20name%20given.')
+elif not checkName(id):
+  redirect('/page/domains/show?error=Name%20is%20not%20valid.%20Only%20use%20alphanumeric%20characters.')
+elif path.isfile(filepath(id + ".domain")):
+  redirect('/page/domains/show?error=The%20domain%20already%20exists.')
+else:
+  target(filepath(id + ".domain"))
+%><?xml version="1.0"?>
+<domain>
+  <id><%escape_xml(id)%></id>
+</domain>
+<%
+  redirect('/page/domain.edit/' + id + '.domain')
+#
+%>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/domains version_7.0/meresco/harvester/controlpanel/slowfoottemplates/domains
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/domains	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/domains	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,147 @@
+<%
+from meresco.harvester.controlpanel.tools import getElements
+from slowfoot.wrappers import wrapp
+%>
+
+<p class="head">Domains Administration</p>
+
+<p>
+ <fieldset><legend class="subhead">Domains</legend>
+
+<%=args.error and '<span class="error">' + args.error + '</span>'or ''%>
+  <form action='/domain.new' method='post'>
+   <fieldset><legend>Create new domain</legend>
+    <table width="320" border="0" cellspacing="0" cellpadding="0">
+     <tr>
+      <td width="60">Name:&nbsp;</td>
+      <td width="200"><input name="id" type="text" class="zkveld" value=""></td>
+      <td width="40"><input name="submit" type="submit" class="butt" value="Create"></td>
+     </tr>
+    </table>
+   </fieldset>
+  </form>
+
+
+
+  <fieldset><legend>Existing domains</legend>
+   <table border="0" cellspacing="4" cellpadding="0">
+<%
+def nameFile(fname):
+  return fname[:-len('.domain')], fname
+
+for id,file in map(nameFile, filter(lambda f:f.endswith('.domain'),files())):
+  #
+%>
+    <tr>
+     <td><%=id%></td>
+     <td>
+      <a href="/page/domain.edit/<%=file%>">
+       <img src="/images/edit.png" border="0"> Edit / View
+      </a>
+     </td>
+    </tr>
+<%
+#
+%>
+   </table>
+  </fieldset>
+ </fieldset>
+</p>
+
+
+
+
+<p>
+ <fieldset><legend class="subhead">Users</legend>
+  <form action='/user.new/users.xml' method='post'>
+   <fieldset><legend>Create new user</legend>
+    <table width="100%" border="0" cellspacing="0" cellpadding="0">
+     <tr>
+      <td width="60">Username:&nbsp;</td>
+      <td width="200"><input name="username" type="text" class="zkveld" value=""></td>
+     </tr>
+     <tr>
+      <td width="60">Domain:&nbsp;</td>
+      <td width="200">
+        <select name="domain">
+<%
+for id,file in map(nameFile, filter(lambda f:f.endswith('.domain'),files())):
+%>
+          <option value="<%=id%>"><%=id%></option>
+<%
+#
+%>
+        </select>
+      </td>
+     </tr>
+     <tr>
+      <td width="60">Password:&nbsp;</td>
+      <td width="200"><input name="password1" type="password" class="zkveld" value=""></td>
+     </tr>
+     <tr>
+      <td width="60">Password(repeat):&nbsp;</td>
+      <td width="200"><input name="password2" type="password" class="zkveld" value=""></td>
+     </tr>
+     <tr>
+      <td colspan="2" style="text-align: right;"><input name="submit" type="submit" class="butt" value="Create"></td>
+     </tr>
+    </table>
+   </fieldset>
+  </form>
+
+
+  <fieldset><legend>Existing users</legend>
+   <table width="100%" border="0" cellspacing="4" cellpadding="0">
+<%
+users = asxml(url('/users.xml')).users
+for user in getElements(users):
+  user = wrapp(user)
+%>
+    <tr>
+     <td>
+      <fieldset><legend>User: <% escape_html(user.name) %></legend>
+       <table width="100%">
+        <tr>
+         <td width="15%"><b>Full name:</b></td>
+         <td width="35%"><b><% escape_html(user.name) %></b></td>
+         <td width="15%">Organization:</td>
+         <td width="35%"><% escape_html(user.organization) %></td>
+        </tr>
+        <tr>
+         <td><b>Username:</b></td>
+         <td><b><% escape_html(user.localName) %></b></td>
+         <td>Telephone:</td>
+         <td><% escape_html(user.telephone) %></td>
+        </tr>
+        <tr>
+         <td><b>Domain:</b></td>
+         <td><b><% escape_html(user.domain) %></b></td>
+         <td>E-mail:</td>
+         <td><% escape_html(user.email) %></td>
+        </tr>
+        <tr>
+         <td valign="top">Notes:</td>
+         <td colspan="3" ><pre><% escape_html(user.notes) %></pre></td>
+        </tr>
+       </table>
+       <p style="text-align: right;">
+       <a href="/page/user.edit/users.xml?user=<%= user.localName %>">
+        <img src="/images/edit.png" border="0"> Edit / View
+       </a>
+       &nbsp;
+       <a class="butt" href="/page/areYouSure/show?<%= 
+         urlencode({'ok':'/user.delete/users.xml?user=' + user.localName,
+         'filename':user.localName
+         })%>">
+        <img src="/images/delete.jpg" border="0"> Delete
+       </a>
+       </p>
+      </fieldset>
+<%
+#
+%>
+   </table>
+  </fieldset>
+ </fieldset>
+</fieldset>
+</p>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/domain.save version_7.0/meresco/harvester/controlpanel/slowfoottemplates/domain.save
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/domain.save	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/domain.save	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,24 @@
+<%
+domain = asform(input)
+old_domain = xml
+
+target(filepath(domain.id + '.domain'))
+%><?xml version="1.0"?>
+<domain>
+  <id><%escape_xml(domain.id)%></id>
+  <description><%escape_xml(domain.description)%></description>
+<%
+for repositoryGroupId in old_domain.domain.repositoryGroupId:
+  req.write(repositoryGroupId.xml())
+#
+for targetId in old_domain.domain.targetId:
+  req.write(targetId.xml())
+#
+for mappingId in old_domain.domain.mappingId:
+  req.write(mappingId.xml())
+#
+%>
+</domain>
+<%
+redirect('/page/domain.edit/' + domain.id + '.domain')
+%>
\ No newline at end of file
Binary files version_6.1/meresco/harvester/controlpanel/slowfoottemplates/edit.png and version_7.0/meresco/harvester/controlpanel/slowfoottemplates/edit.png differ
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/error version_7.0/meresco/harvester/controlpanel/slowfoottemplates/error
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/error	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/error	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,26 @@
+<%
+errortype, errorvalue, errortraceback = error_info
+
+if not session.get('username', None):
+    #
+%><h3>Geen toegang</h3>
+<p>U bent niet (meer) ingelogd, klik op login en probeer het opnieuw.</p>
+<%
+else:
+    #
+%>
+<h3>Sorry</h3>
+<p>Er is een fout opgetreden.</p>
+<pre><%=errorvalue%></pre>
+<%
+#
+%>
+<!--
+<%
+from sys import stderr
+from traceback import print_exception
+print_exception(errortype, errorvalue, errortraceback, None, req)
+print_exception(errortype, errorvalue, errortraceback, None, stderr)
+stderr.flush()
+%>
+-->
Binary files version_6.1/meresco/harvester/controlpanel/slowfoottemplates/exec.png and version_7.0/meresco/harvester/controlpanel/slowfoottemplates/exec.png differ
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/favicon.ico version_7.0/meresco/harvester/controlpanel/slowfoottemplates/favicon.ico
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/favicon.ico	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/favicon.ico	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1 @@
+<%type('image/gif')%><%include('/images/cq2favicon.ico')%>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/form.css version_7.0/meresco/harvester/controlpanel/slowfoottemplates/form.css
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/form.css	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/form.css	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,19 @@
+body {
+  margin: 0px;
+  font-family: Verdana, Arial, Helvetica, sans-serif;
+  font-size: 10pt;
+  color: #313234;
+}
+
+input, select {
+  font-size: smaller;
+}
+
+.head, .subhead {
+  font-size: larger;
+  font-style: italic;
+}
+
+.head {
+  font-weight: bold;
+}
\ No newline at end of file
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/getIdentifiers version_7.0/meresco/harvester/controlpanel/slowfoottemplates/getIdentifiers
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/getIdentifiers	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/getIdentifiers	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,44 @@
+<%
+domainId = args.domainId
+
+stateDir = req.get_options()['stateDir']
+from os.path import join, isfile
+def listIds(repositoryId):
+  idfile = join(stateDir, domainId, repositoryId + '.ids')
+  if isfile(idfile):
+    try:
+      f = open(idfile)
+      for id in map(str.strip, filter(None, f)):
+%><identifier><%escape_xml(id)%></identifier>
+<%
+      #
+    finally:
+      f.close()
+  #
+
+repositoryGroupId = args.repositoryGroupId
+groups = asxml(url('/' + domainId + '.domain')).domain.repositoryGroupId
+exists = filter(lambda g:g == repositoryGroupId, groups)
+if not exists:
+  include('/saharageterror?errorCode=idDoesNotExist')
+else:
+  type('text/xml; charset=utf-8')
+  repositories = asxml(url('/' + domainId + '.' + repositoryGroupId + '.repositoryGroup')).repositoryGroup.repositoryId
+%><?xml version="1.0" encoding="UTF-8"?>
+<saharaget xmlns="http://sahara.cq2.org/xsd/saharaget.xsd">
+<%
+  include('/saharagetTime')
+%> 
+  <request>
+    <verb>GetIdentifiers</verb>
+    <domainId><% escape_xml(domainId) %></domainId>
+    <repositoryGroupId><% escape_xml(repositoryGroupId) %></repositoryGroupId>
+  </request>
+  <GetIdentifiers>
+<%
+  for repositoryId in repositories:
+    listIds(repositoryId)
+  #
+%>
+  </GetIdentifiers>
+</saharaget>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/getMapping version_7.0/meresco/harvester/controlpanel/slowfoottemplates/getMapping
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/getMapping	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/getMapping	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,34 @@
+<%
+domainId = args.domainId
+mappingId = args.mappingId
+
+mappings = asxml(url('/' + domainId + '.domain')).domain.mappingId
+exists = False
+for m in mappings:
+  if m == mappingId:
+    exists = True
+    break
+
+if not exists:
+  include('/saharageterror?errorCode=idDoesNotExist')
+else:
+  type('text/xml; charset=utf-8')
+%><?xml version="1.0" encoding="UTF-8"?>
+<saharaget xmlns="http://sahara.cq2.org/xsd/saharaget.xsd">
+<%
+  include('/saharagetTime')
+%>
+ <request>
+  <verb>GetMapping</verb>
+  <domainId><% escape_xml(domainId) %></domainId>
+  <mappingId><% escape_xml(mappingId) %></mappingId>
+ </request>
+ <GetMapping>
+<%
+  m = asxml(url('/' + mappingId + '.mapping'))
+  m.mapping.xml(req)
+%>
+ </GetMapping>
+</saharaget><%
+#
+%>
\ No newline at end of file
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/_getoptions version_7.0/meresco/harvester/controlpanel/slowfoottemplates/_getoptions
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/_getoptions	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/_getoptions	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,5 @@
+<%
+remoteHost() in ['127.0.0.1', 'localhost'] or \
+    requireValidUser('saharaget')
+type('text/plain')
+%><%=req.get_options().get(str(args.name),'')%>
\ No newline at end of file
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/getRecord version_7.0/meresco/harvester/controlpanel/slowfoottemplates/getRecord
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/getRecord	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/getRecord	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,68 @@
+<%
+repourl = None
+errorCode = ''
+type('text/xml; charset=utf-8')
+domainId = args.domainId
+if args.saharaIdentifier:
+  repositoryId, identifier = str(args.saharaIdentifier).split(':',1)
+else:
+  repositoryId = str(args.repositoryId)
+  identifier = str(args.identifier)
+if repositoryId and identifier:
+  from os.path import isfile
+  if isfile(req.document_root() + '/%s.%s.repository'%(domainId,repositoryId)):
+    repo = asxml(url('/xml/%s.%s.repository'%(domainId,repositoryId))).repository
+    repourl = repo.baseurl
+    metadataPrefix = args.metadataPrefix or repo.metadataPrefix
+    if not repourl:
+      errorCode = 'idDoesNotExist'
+  else:
+    errorCode = 'idDoesNotExist'
+else:
+  errorCode = 'badArgument'
+if not errorCode:
+  includeurl = '%s?%s'%(repourl, 
+    urlencode({'verb':'GetRecord', 
+      'metadataPrefix':metadataPrefix, 
+      'identifier':identifier})
+  )
+  #This hack was introduced by TJ and KVS 2006/06/12
+  #it's a workaround for Groningen's server which cannot deal with the
+  #"Accept-Encoding: identity" header produced by urllib2 (and standard HTTP)
+  #urllib2 is used by the url function
+  if 'rug.nl/' in includeurl:
+    from urllib import urlopen
+    oaigetrecord = asxml(urlopen(includeurl))
+  else:
+    oaigetrecord = asxml(url(includeurl))
+  errOAI = str(oaigetrecord.OAI_PMH.error.code)
+%><?xml version="1.0" encoding="UTF-8"?>
+<saharaget xmlns="http://sahara.cq2.org/xsd/saharaget.xsd">
+<%
+  include('/saharagetTime')
+%> 
+ <request>
+  <verb>GetRecord</verb>
+  <domainId><% escape_xml(domainId) %></domainId>
+  <saharaIdentifier><% escape_xml(repositoryId) %>:<% escape_xml(identifier) %></saharaIdentifier>
+ </request>
+<%
+  if not errOAI:
+    #
+%>
+ <GetRecord>
+<%
+    oaigetrecord.OAI_PMH.GetRecord.record.xml(req)
+%>
+ </GetRecord>
+<%
+  else:
+    oaigetrecord.OAI_PMH.error.xml(req)
+  #
+%>
+</saharaget>
+<%
+else:
+  import time
+  include('/saharageterror?errorCode=' + errorCode)
+%>
\ No newline at end of file
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/getRepositories version_7.0/meresco/harvester/controlpanel/slowfoottemplates/getRepositories
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/getRepositories	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/getRepositories	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,44 @@
+<%
+from slowfoot import binderytools
+
+type('text/xml; charset=utf-8')
+domainId = args.domainId
+repositoryGroupId = args.repositoryGroupId
+groups = asxml(url('/'+domainId+'.domain')).domain.repositoryGroupId
+exists = filter(lambda g:g == repositoryGroupId, groups)
+if repositoryGroupId and not exists:
+  include('/saharageterror?errorCode=idDoesNotExist')
+else:
+  #
+%><?xml version="1.0" encoding="UTF-8"?>
+<saharaget xmlns="http://sahara.cq2.org/xsd/saharaget.xsd">
+<%
+  include('/saharagetTime')
+%> 
+ <request>
+  <verb>GetRepositories</verb>
+  <domainId><% escape_xml(domainId) %></domainId><%
+  if repositoryGroupId:
+    allGroups = [ repositoryGroupId ]
+%>
+    <repositoryGroupId><% escape_xml(repositoryGroupId) %></repositoryGroupId><%
+  else:
+    allGroups = groups
+  #
+%>
+ </request>
+ <GetRepositories>
+<%
+  for groupId in allGroups:
+    repositories = asxml(url('/' + domainId + '.' + groupId + '.repositoryGroup')).repositoryGroup.repositoryId
+    for repositoryId in repositories:
+      repositoryXml = asxml(url('/' + domainId + '.' + repositoryId + '.repository')).repository
+%>
+  <%=repositoryXml.xml()%>
+<%
+  #
+%>
+ </GetRepositories>
+</saharaget><%
+#
+%>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/getRepository version_7.0/meresco/harvester/controlpanel/slowfoottemplates/getRepository
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/getRepository	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/getRepository	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,40 @@
+<%
+domainId = args.domainId
+repositoryId = args.repositoryId
+exists = False
+groups = asxml(url('/' + domainId + '.domain')).domain.repositoryGroupId
+for groupId in groups:
+  #
+  if exists:
+    break
+  repositories = asxml(url('/' + domainId + '.' + groupId + '.repositoryGroup')).repositoryGroup.repositoryId
+  for repo in repositories:
+    if repo == repositoryId:
+      exists = True
+      break
+
+if not exists:
+  include('/saharageterror?errorCode=idDoesNotExist')
+else:
+  #
+  type('text/xml; charset=utf-8')
+%><?xml version="1.0" encoding="UTF-8"?>
+<saharaget xmlns="http://sahara.cq2.org/xsd/saharaget.xsd">
+<%
+  include('/saharagetTime')
+%> 
+ <request>
+  <verb>GetRepository</verb>
+  <domainId><% escape_xml(domainId) %></domainId>
+  <repositoryId><% escape_xml(repositoryId) %></repositoryId>
+ </request>
+ <GetRepository>
+<%
+  repositoryXml = asxml(url('/' + domainId + '.' + repositoryId + '.repository')).repository
+%>
+  <%=repositoryXml.xml()%>
+ </GetRepository>
+</saharaget>
+<%
+#
+%>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/getRepositoryGroups version_7.0/meresco/harvester/controlpanel/slowfoottemplates/getRepositoryGroups
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/getRepositoryGroups	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/getRepositoryGroups	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,24 @@
+<%
+domainId = args.domainId
+type('text/xml; charset=utf-8')
+%><?xml version="1.0" encoding="UTF-8"?>
+<saharaget xmlns="http://sahara.cq2.org/xsd/saharaget.xsd">
+<%
+include('/saharagetTime')
+%>
+ <request>
+  <verb>GetRepositoryGroups</verb>
+  <domainId><% escape_xml(domainId) %></domainId>
+ </request>
+ <GetRepositoryGroups>
+<%
+group = asxml(url('/' + domainId + '.domain')).domain
+for id in group.repositoryGroupId:
+  repositoryGroup = asxml(url('/' + domainId + '.' + id + '.repositoryGroup')).repositoryGroup
+%>
+  <% repositoryGroup.xml(req) %>
+<%
+# for
+%>
+ </GetRepositoryGroups>
+</saharaget>
\ No newline at end of file
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/getStatus version_7.0/meresco/harvester/controlpanel/slowfoottemplates/getStatus
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/getStatus	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/getStatus	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,71 @@
+<%
+import time, rfc822
+later = time.time() + (60 * 2) # 2 minutes expiry
+now = time.time()
+req.headers_out['Expires'] = rfc822.formatdate(later)
+req.headers_out['Last-modified'] = rfc822.formatdate(now)
+
+domainId = args.domainId
+repositoryId = args.repositoryId
+repositoryGroupId = args.repositoryGroupId
+
+import os
+from meresco.harvester.repositorystatus import RepositoryStatus
+logDir = req.get_options()['logDir']
+
+def writeStatus(repositoryId, repositoryGroupId):
+  rs = RepositoryStatus()
+  eventsfile = os.path.join(logDir, domainId, repositoryId + '.events')
+  if os.path.isfile(eventsfile):
+    try:
+      f = open(eventsfile)
+%><status repositoryId="<%= repositoryId %>" repositoryGroupId="<%= repositoryGroupId %>"><%
+      rs.innerXml(f, req)
+      req.write("</status>")
+    finally:
+      f.close()
+#
+
+exists = True
+if repositoryId:
+  exists = os.path.isfile(req.document_root() + '/' + domainId + '.' + repositoryId + '.repository')
+elif repositoryGroupId:
+  exists = os.path.isfile(req.document_root() + '/' + domainId + '.' + repositoryGroupId + '.repositoryGroup')
+
+if not exists:
+  include('/saharageterror?errorCode=idDoesNotExist')
+else:
+  type('text/xml; charset=utf-8')
+%><?xml version="1.0" encoding="UTF-8"?>
+<saharaget xmlns="http://sahara.cq2.org/xsd/saharaget.xsd">
+<%
+  include('/saharagetTime')
+%> 
+  <request>
+    <verb>GetStatus</verb>
+    <domainId><% escape_xml(domainId) %></domainId><%
+  if repositoryId:
+%>
+    <repositoryId><% escape_xml(repositoryId) %></repositoryId><%
+  elif repositoryGroupId:
+%>
+    <repositoryGroupId><% escape_xml(repositoryGroupId) %></repositoryGroupId><%
+  #
+%>
+  </request>
+  <GetStatus>
+<%
+  #
+  if not repositoryId and repositoryGroupId:
+    allGroupIds = [ repositoryGroupId ]
+  else:
+    allGroupIds = asxml(url('/' + domainId + '.domain')).domain.repositoryGroupId
+  for groupId in allGroupIds:
+    repositories = asxml(url('/' + domainId + '.' + groupId + '.repositoryGroup')).repositoryGroup.repositoryId
+    for repId in repositories:
+      if not repositoryId or repositoryId == repId:
+        writeStatus(repId, groupId)
+  #
+%>
+  </GetStatus>
+</saharaget>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/getTarget version_7.0/meresco/harvester/controlpanel/slowfoottemplates/getTarget
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/getTarget	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/getTarget	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,34 @@
+<%
+domainId = args.domainId
+targetId = args.targetId
+
+targets = asxml(url('/' + domainId + '.domain')).domain.targetId
+exists = False
+for m in targets:
+  if m == targetId:
+    exists = True
+    break
+
+if not exists:
+  include('/saharageterror?errorCode=idDoesNotExist')
+else:
+  type('text/xml; charset=utf-8')
+%><?xml version="1.0" encoding="UTF-8"?>
+<saharaget xmlns="http://sahara.cq2.org/xsd/saharaget.xsd">
+<%
+  include('/saharagetTime')
+%>
+ <request>
+  <verb>GetTarget</verb>
+  <domainId><% escape_xml(domainId) %></domainId>
+  <targetId><% escape_xml(targetId) %></targetId>
+ </request>
+ <GetTarget>
+<%
+  m = asxml(url('/' + targetId + '.target'))
+  m.target.xml(req)
+%>
+ </GetTarget>
+</saharaget><%
+#
+%>
\ No newline at end of file
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/home version_7.0/meresco/harvester/controlpanel/slowfoottemplates/home
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/home	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/home	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,12 @@
+<p class="head">Meresco-Harvester Web Control Panel</p>
+<p>
+Welkom bij Meresco-Harvester, de Open Source OAI Harvester, een onderdeel van de Meresco Suite.  Hier kunt u de u toegekende domeinen beheren.<p>
+
+<p>  
+Voor vragen en meer informatie over Meresco Harvester kunt u terecht op de <a href="http://meresco.sourceforge.net">Meresco pagina op het Sourceforge</a>. Meresco-Harvester is initieel ontwikkeld voor SURFnet onder de naam Sahara.
+</p>
+
+<p>
+Succes gewenst!!<br/>
+Het Meresco Harvester Team
+</p>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/ignored version_7.0/meresco/harvester/controlpanel/slowfoottemplates/ignored
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/ignored	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/ignored	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,3 @@
+<%
+include(req.get_options()['internalServer'] + '/ignored?' + urlencode(args))
+%>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/ignoredRecord version_7.0/meresco/harvester/controlpanel/slowfoottemplates/ignoredRecord
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/ignoredRecord	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/ignoredRecord	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,3 @@
+<%
+include(req.get_options()['internalServer'] + '/ignoredRecord?' + urlencode(args))
+%>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/images version_7.0/meresco/harvester/controlpanel/slowfoottemplates/images
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/images	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/images	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,11 @@
+<%
+suffix = args.name.split('.')[-1]
+
+known_types = {
+  'gif':'image/gif',
+  'ico':'image/gif',
+  'png':'image/png'
+}
+
+type(known_types.get(suffix, 'image/jpeg'))
+%><%=text%>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/index.html version_7.0/meresco/harvester/controlpanel/slowfoottemplates/index.html
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/index.html	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/index.html	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,6 @@
+<html>
+  <head>
+    <meta http-equiv="refresh" content="0;URL=/page/home">
+  </head>
+</html>
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/internalServerError version_7.0/meresco/harvester/controlpanel/slowfoottemplates/internalServerError
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/internalServerError	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/internalServerError	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,34 @@
+<%
+type('text/html')
+
+error = args.error
+%><html>
+<head>
+<title>ERROR</title>
+</head>
+<body>
+<h1>Error in Meresco Harvester</h1>
+<%
+if error == 'internalServerNotFound':
+    #
+%>
+<h3>The internalServer is not configured for Meresco Harvester.</h3>
+<p>Please configure the internalServer in the Apache configuration, e.g.</p>
+<pre>
+PythonOption internalServer "http://localhost:8080"
+</pre>
+<%
+internalServer = req.get_options()['internalServer']
+if error == 'internalServerNotReachable':
+    #
+%>
+<h3>The internalServer for Meresco Harvester can not be reached.</h3>
+<p>It is configured to run at <%=internalServer%>.</p>
+<p>Please check your configuration.</p>
+<%
+#
+%>
+<pre><%=args.message%></pre>
+
+</body>
+</html>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/layout.css version_7.0/meresco/harvester/controlpanel/slowfoottemplates/layout.css
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/layout.css	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/layout.css	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,13 @@
+.boxwrap   { width: 100%; margin-left: auto; margin-right: auto; }
+.boxbody   { width: 99%; float: left;  }
+.boxcenter { width: 81%; float: right; }
+
+.boxleft   { width: 18%; float: left; }
+.boxright  { width: 1%; float: right; }
+.boxheader { width: 100%;  clear: both;  }
+.boxfooter { width: 100%;  clear: both;  }
+
+.boxclear  { clear: both; line-height: 0px }
+
+.iehackwrap { text-align: center;  }
+.boxwrap    { text-align: left; }
\ No newline at end of file
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/login version_7.0/meresco/harvester/controlpanel/slowfoottemplates/login
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/login	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/login	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,13 @@
+<%
+req.req.headers_out['Cache-Control'] = 'no-cache'
+req.req.headers_out['Pragma'] = 'no-cache'
+req.req.headers_out['Expires'] = '-1'
+%>
+<html>
+  <head>
+    <meta http-equiv="Pragma" content="no-cache">
+    <meta http-equiv="Cache-Control" content="no-cache">
+    <meta http-equiv="Expires" content="-1">
+    <meta http-equiv="refresh" content="0;URL=<%=req.get_options()['secureurl']%>/page/loginform/show<%=args.referer and '?referer='+args.referer or ''%>">
+  </head>
+</html>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/loginform version_7.0/meresco/harvester/controlpanel/slowfoottemplates/loginform
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/loginform	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/loginform	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,39 @@
+<%
+req.req.headers_out['Cache-control'] = 'no-cache'
+req.req.headers_out['Pragma'] = 'no-cache'
+req.req.headers_out['Expires'] = '0'
+username = session.get('username','')
+if username:
+%>
+U bent al ingelogd als: <%=username%><br>
+<br>
+<a href="/logout">logout</a>
+<%
+else:
+%>
+<%=args.login and 'Username or password invalid.<br>' or ''%>
+<form action="/logintosahara" method="post">
+  <fieldset>
+  <legend>Logging in</legend>
+  <table>
+  <tr>
+    <td><label>username:</label></td>
+    <td><input type="text" name="username" value=""></td>
+  </tr>
+  <tr>
+    <td><label>password:</label></td>
+    <td><input type="password" name="password" value=""></td>
+  </tr>
+  <tr>
+    <td>&nbsp;</td>
+    <td>
+      <input type="hidden" name="referer" value="<%=args.referer or referer%>">
+      <input type="submit" name="action" class="butt" value="login">
+    </td>
+  </tr>
+  </table>
+  </fieldset>
+</form>
+<%
+#
+%>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/logintosahara version_7.0/meresco/harvester/controlpanel/slowfoottemplates/logintosahara
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/logintosahara	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/logintosahara	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,34 @@
+<%
+from slowfoot import account
+f = asform(input)
+username = f.username
+password = f.password
+
+if not f.username:
+  redirect('/')
+
+passwdFile = req.get_options()['usersfile']
+
+users = asxml(url('/users.xml')).users
+
+domain = None
+user = getattr(users, str(username))
+domain = user.domain
+
+try:
+  account.login(str(username), str(password), passwdFile) 
+  session['username'] = str(username)
+  if domain and domain == asxml(url('/%s.domain' % domain)).domain.id:
+    session['domain'] = str(domain)
+  else:
+    session['domain'] = ''
+  session['isAdmin'] = username == 'admin'
+  session.save()
+  redirect('/')
+except account.AccountException, e:
+  session['username'] = ''
+  session['domain'] = ''
+  session['isAdmin'] = False
+  session.save()
+  redirect(referer.split('?')[0] + '?login=invalid&referer=' + f.referer)
+%>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/logout version_7.0/meresco/harvester/controlpanel/slowfoottemplates/logout
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/logout	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/logout	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,14 @@
+<%
+session.invalidate()
+req.req.headers_out['Cache-Control'] = 'no-cache'
+req.req.headers_out['Pragma'] = 'no-cache'
+req.req.headers_out['Expires'] = '-1'
+%>
+<html>
+  <head>
+    <meta http-equiv="Pragma" content="no-cache">
+    <meta http-equiv="Cache-Control" content="no-cache">
+    <meta http-equiv="Expires" content="-1">
+    <meta http-equiv="refresh" content="0;URL=/">
+  </heade>
+</html>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/mapping.edit version_7.0/meresco/harvester/controlpanel/slowfoottemplates/mapping.edit
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/mapping.edit	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/mapping.edit	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,62 @@
+<%
+req.req.headers_out['Cache-control'] = 'no-cache'
+mapping = xml.mapping
+%>
+
+<p class="head">Mapping Administration</p>
+
+<%=args.error and '<span class="error">' + args.error + '</span>'or ''%>
+<fieldset>
+    <legend class="subhead">Mapping (<%=mapping.name%>)</legend>
+<%
+if session.get('isAdmin',''):
+%>
+
+<form method="post" action="/mapping.save/<%= mapping.id %>.mapping">
+<input type="hidden" name="id" value="<%=mapping.id%>">
+<input type="hidden" name="referrerDomain" value="<%=args.referrerDomain%>">
+
+<table>
+  <tr>
+    <td>Name:</td>
+    <td><input type="text" name="name" value="<%=mapping.name%>"></td>
+  </tr>
+  <tr>
+    <td valign="top">Description:</td>
+    <td>
+      <textarea rows="5" cols="80" name="description"><%escape_html(mapping.description)%></textarea>
+    </td>
+  </tr>
+</table>
+
+Script:<br>
+<textarea rows="30" cols="100" name="code"><%escape_html(mapping.code)%></textarea>
+
+<p style="text-align: right">
+ <input type="submit" name="action" class="butt" value="Validate and Save" accesskey="s">
+</p>
+
+</form>
+<%
+else:
+%>
+<table>
+  <tr>
+    <td>Name:</td>
+    <td><%=mapping.name%></td>
+  </tr>
+  <tr>
+    <td valign="top">Description:</td>
+    <td>
+      <pre><%escape_html(mapping.description)%></pre>
+    </td>
+  </tr>
+</table>
+
+Script:<br>
+<pre><%escape_html(mapping.code)%></pre>
+<%
+#
+%>
+
+</fieldset>
\ No newline at end of file
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/mapping.new version_7.0/meresco/harvester/controlpanel/slowfoottemplates/mapping.new
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/mapping.new	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/mapping.new	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,60 @@
+<%
+from slowfoot import binderytools
+execcode = '''upload.parts['metadata'] = input.metadata.xml()
+
+upload.parts['header'] = input.header.xml()
+
+upload.parts['meta'] = """<meta xmlns="http://meresco.org/namespace/harvester/meta">
+  <upload><id>%(id)s</id></upload>
+  <record>
+    <id>%(recordId)s</id>
+  </record>
+  <repository>
+    <id>%(repository)s</id>
+    <set>%(set)s</set>
+    <baseurl>%(baseurl)s</baseurl>
+    <repositoryGroupId>%(repositoryGroupId)s</repositoryGroupId>
+    <metadataPrefix>%(metadataPrefix)s</metadataPrefix>
+    <collection>%(collection)s</collection>
+  </repository>
+</meta>""" % dict([(k,xmlEscape(v)) for k,v in {
+  'id': upload.id,
+  'set': input.repository.set,
+  'baseurl': input.repository.baseurl,
+  'repositoryGroupId':  input.repository.repositoryGroupId,
+  'repository': input.repository.id,
+  'metadataPrefix': input.repository.metadataPrefix,
+  'collection': input.repository.collection,
+  'recordId': input.header.identifier,
+}.items()])
+'''
+description = """This mapping is what has become the default mapping for most Meresco based projects.
+"""
+
+f = asform(input)
+name = f.name
+domain = xml
+
+if name == '':
+  redirect('/page/domain.edit/' + domain.domain.id + '.domain?error=No%20name%20given.')
+else:
+  mappingid = uuid()
+  new_mapping = binderytools.bind_string("<mappingId>%s</mappingId>"%mappingid).mappingId
+
+  domain.domain.xml_append(new_mapping)
+
+  target(filepath(domain.domain.id + '.domain'))
+  req.write(domain.xml())
+
+  target(filepath(mappingid + ".mapping"))
+%><?xml version="1.0"?>
+<mapping>
+  <id><%=mappingid%></id>
+  <name><%= name %></name>
+  <code><% escape_xml(execcode) %></code>
+  <description><% escape_xml(description) %></description>
+</mapping>
+<%
+  redirect(uri(path='/page/mapping.edit/' + mappingid + '.mapping', query={'referrerDomain':domain.domain.id}))
+#
+%>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/mapping.save version_7.0/meresco/harvester/controlpanel/slowfoottemplates/mapping.save
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/mapping.save	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/mapping.save	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,28 @@
+<%
+from meresco.harvester.mapping import Mapping
+import os
+
+f = asform(input)
+code = str(f.code).replace('\r','')
+
+target(filepath(f.id + '.mapping'))
+%><?xml version="1.0"?>
+<mapping>
+  <id><%=f.id%></id>
+  <name><%escape_xml(f.name)%></name>
+  <description><%escape_xml(f.description)%></description>
+  <code><%escape_xml(code)%></code>
+</mapping>
+<%
+error = ''
+if not f.name:
+  error = 'Geen naam ingevoerd'
+else:
+  datamap = Mapping(str(f.id))
+  datamap.code=code
+  try:
+    datamap.validate()
+  except Exception, e:
+    error = str(e)
+redirect(uri(path='/page/mapping.edit/'+f.id+'.mapping', query={'error':error, 'referrerDomain':f.referrerDomain}))
+%>
Binary files version_6.1/meresco/harvester/controlpanel/slowfoottemplates/meresco.jpg and version_7.0/meresco/harvester/controlpanel/slowfoottemplates/meresco.jpg differ
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/mockRepository version_7.0/meresco/harvester/controlpanel/slowfoottemplates/mockRepository
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/mockRepository	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/mockRepository	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,45 @@
+<%
+type('text/xml; charset=utf-8')
+if not str(args.identifier).startswith('error'):
+%><?xml version="1.0" encoding="UTF-8"?>
+
+<OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd">
+
+<responseDate>2006-02-16T08:24:52Z</responseDate>
+<request verb="GetRecord" metadataPrefix="<%escape_xml(args.metadataPrefix)%>" identifier="oai:wo.uvt.nl:154493">http://arno.uvt.nl/oai/wo.uvt.nl.cgi</request>
+
+<GetRecord>
+<record>
+<header>
+<identifier><%escape_xml(args.identifier)%></identifier>
+<datestamp>2005-02-22</datestamp>
+<setSpec>facft:FRW</setSpec>
+<setSpec>keur:yes</setSpec>
+<setSpec>keur</setSpec>
+<setSpec>withfulltext:yes</setSpec>
+<setSpec>withfulltext</setSpec>
+</header>
+
+<metadata metadataPrefix="<%=args.metadataPrefix%>">
+<oaidc:dc xmlns:oaidc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dc="http://purl.org/dc/elements/1.1/" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd">
+<dc:creator>Vranken, J.B.M.</dc:creator>
+<dc:identifier>http://dbiref.uvt.nl/iPort?request=full_record&amp;db=wo&amp;language=eng&amp;query=154493</dc:identifier>
+<dc:format>application/pdf</dc:format>
+<dc:date>1992</dc:date>
+<dc:source>Tijdschrift voor Privaatrecht (1992) p.665-670</dc:source>
+<dc:title>Iets over de verhouding van rechter en wetgever</dc:title>
+<dc:type>Article / Letter to the editor</dc:type>
+<dc:rights>(c) Universiteit van Tilburg</dc:rights>
+</oaidc:dc>
+</metadata>
+</record>
+</GetRecord>
+
+</OAI-PMH>
+<%
+else:
+%><?xml version="1.0" encoding="UTF-8"?>
+<OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd" xmlns:dc="http://purl.org/dc/elements/1.1/">
+<responseDate>2006-03-28T15:19:57Z</responseDate>
+<request verb="GetRecord" metadataPrefix="oai_dc" identifier="3">http://library.wur.nl/oai</request>
+<error code="idDoesNotExist">value of Identifier is illegal in this repository</error></OAI-PMH>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/onlinemapping version_7.0/meresco/harvester/controlpanel/slowfoottemplates/onlinemapping
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/onlinemapping	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/onlinemapping	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,24 @@
+<%
+type('text/plain')
+prepareHeaders('private')
+from meresco.harvester.onlineharvest import OnlineHarvest
+from meresco.harvester.mapping import Mapping
+f = asform(input)
+%>
+Gebruikte url:
+<%=f.inputurl%>
+
+Gebruikte mapping:
+<%
+harvest = OnlineHarvest(req)
+
+mappingXml = asxml(url('/' + args.mapping)).mapping
+mapping = Mapping(mappingXml.id)
+mapping.code = str(mappingXml.code)
+mapping.name = mappingXml.name
+%><%=mapping.name%>
+
+<%
+xmlurl = str(f.inputurl)
+harvest.performMapping(mapping,xmlurl)
+%>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/page version_7.0/meresco/harvester/controlpanel/slowfoottemplates/page
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/page	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/page	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,47 @@
+<%
+prepareHeaders('no-cache')
+version = '$Version: trunk$'[9:-1].strip()
+%>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
+<head>
+  <title>Meresco Harvester (<%=version%>)</title>
+  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+    <meta http-equiv="Pragma" content="no-cache"/>
+    <meta http-equiv="Cache-Control" content="no-cache"/>
+    <meta http-equiv="Expires" content="-1"/>
+  <link href="/css/stylesheet.css" rel="stylesheet" type="text/css"/>
+  <link href="/css/form.css" rel="stylesheet" type="text/css"/>
+  <script type="text/javascript" src="/scripts.js"></script>
+</head>
+<body>
+<table width="100%" height="100%"  border="0" cellpadding="0" cellspacing="10" bgcolor="#FFFFFF">
+  <tr>
+    <td align="left" valign="top">
+      <table width="100%" height="100%"  border="0" cellpadding="0" cellspacing="0">
+        <tr>
+          <td colspan="2" class="sahara">&nbsp;</td>
+        </tr>
+        <tr>
+          <td width="160" class="horline"></td>
+          <td class="horline"></td>
+        </tr>		
+        <tr>
+          <td align="left" valign="top">
+            <%include('/page.sitemap')%>
+          </td>
+          <td align="left" valign="top" class="content">
+            <%=text%>
+          </td>
+        </tr>
+      </table>
+    </td>
+  </tr>
+  <tr>
+     <td align="right" valign="bottom">
+     <span style="font-size:75%; color:light-gray;">Meresco Harvester (<%=version%>)</span>
+     </td>
+  </tr>
+</table>
+</body>
+</html>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/page.footer version_7.0/meresco/harvester/controlpanel/slowfoottemplates/page.footer
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/page.footer	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/page.footer	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1 @@
+&copy; 2005 SURFnet B.V. http://www.surfnet.nl
\ No newline at end of file
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/page.header version_7.0/meresco/harvester/controlpanel/slowfoottemplates/page.header
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/page.header	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/page.header	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1 @@
+<h1>Meresco Harvester</h1>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/page.sitemap version_7.0/meresco/harvester/controlpanel/slowfoottemplates/page.sitemap
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/page.sitemap	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/page.sitemap	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,64 @@
+<table class="sitemap" width="160" border="0" cellspacing="10" cellpadding="0">
+  <tr class="sitemapheader">
+    <td>&nbsp;</td>
+  </tr>
+<%
+if session.get('username',''):
+  #
+%>
+  <tr>
+    <td class="button">
+      <a href="/page/home">HOME</a>
+    </td>
+  </tr>
+<%
+  if session.get('domain',''):
+%>
+  <tr>
+    <td class="button">
+      <a href="/page/domain.edit/<%= session.get('domain','') %>.domain">My Domain</a>
+    </td>
+  </tr>
+<%
+  elif session.get('isAdmin',''):
+%>
+  <tr>
+    <td class="button">
+      <a href="/page/domains/show">Domains</a>
+    </td>
+  </tr>
+<%
+  else:
+%>
+  <tr>
+    <td class="button" style="color:red;">
+      No domain
+    </td>
+  </tr>
+<%
+#
+%>
+ <tr>
+    <td class="button">
+      <a href="http://meresco.sourceforge.net">About Meresco</a>
+    </td>
+  </tr>
+  <tr>
+    <td>&nbsp;</td>
+  </tr>
+  <tr>
+    <td class="button">
+<%
+if session.get('username',''):
+%>
+      <a href="/logout">Logout</a>
+<%
+else:
+%>
+      <a href="/login">Login</a>
+<%
+#
+%>
+    </td>
+  </tr>
+</table>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/repository.edit version_7.0/meresco/harvester/controlpanel/slowfoottemplates/repository.edit
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/repository.edit	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/repository.edit	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,259 @@
+<%
+req.req.headers_out['Cache-Control'] = 'no-cache'
+
+from meresco.harvester.controlpanel.tools import getDomainId
+from meresco.harvester.timeslot import Timeslot
+
+repositoryFile = args.name
+groupId = args.referrerGroup
+domainId = getDomainId(req.uri)
+if not session.get('isAdmin','') and session.get('domain', '') != domainId:
+  raise Exception('Illegal use')
+#
+domainXml = asxml(url('/xml/'+ domainId + '.domain'))
+
+def targetTuple(targetId):
+  return asxml(url('/xml/'+ targetId + '.target')).target.name, targetId
+
+def mappingTuple(mappingId):
+  return asxml(url('/xml/'+ mappingId + '.mapping')).mapping.name, mappingId
+
+targets = []
+for targetId in domainXml.domain.targetId:
+  targets.append(targetTuple(targetId))
+
+mappings = []
+for mappingId in domainXml.domain.mappingId:
+  mappings.append(mappingTuple(mappingId))
+
+%>
+
+<script language="javascript">
+
+function submitForm(submitName) {
+	var submitButton = document.getElementById(submitName);
+	submitButton.click()
+}
+
+</script>
+
+<p class="head">Repository Administration</p>
+<form method="post" name="repositorySave" action="/repository.save/<%= repositoryFile %>?referrerGroup=<%= groupId %>">
+<%
+repo = xml.repository
+%>
+  <fieldset><legend class="subhead">Repository: <%=repo.id%></legend>
+    <table>
+      <tr><td>Id:</td>
+          <td><input type="hidden" name="repositoryGroupId" value="<%=repo.repositoryGroupId%>"><input size="5"  type="hidden" name="id" value="<%=repo.id%>"><%=repo.id%></td></tr>
+      <tr><td>Baseurl:</td><td><input size="50" type="text" name="baseurl" value="<%=repo.baseurl%>"></td></tr>
+      <tr><td>Set:</td><td><input size="50" type="text" name="set" value="<%=repo.set%>"></td></tr>
+      <tr><td>Metadata Prefix:</td><td><input size="50" type="text" name="metadataPrefix" value="<%=repo.metadataPrefix%>"></td></tr>
+
+      <tr>
+        <td>Mapping:</td>
+        <td>
+          <select name="mappingId">
+<%
+mappingId = str(getattr(repo,'mappingId',''))
+%>
+          <option value="" <%=mappingId == '' and 'selected' or ''%>></option>
+<%
+for name,id in mappings:
+%>
+          <option value="<%=id%>" <%=mappingId == id and 'selected' or ''%>><%escape_html(name)%></option>
+<%
+# end mappings
+%>
+          </select>
+        </td>
+      </tr>
+
+      <tr>
+        <td>Target:</td>
+        <td>
+          <select name="targetId">
+<%
+targetId = str(getattr(repo,'targetId',''))
+%>
+          <option value="" <%=targetId == '' and 'selected' or ''%>></option>
+<%
+for name,id in targets:
+%>
+          <option value="<%=id%>" <%=targetId == id and 'selected' or ''%>><%escape_html(name)%></option>
+<%
+# end targets
+%>
+          </select>
+        </td>
+      </tr>
+
+      <tr><td>Target Collection:</td><td><input size="50" type="text" name="collection" value="<%=repo.collection%>"></td></tr>
+      <tr><td>Max. validation errors:</td><td><input size="50" type="text" name="maximumIgnore" value="<%=repo.maximumIgnore%>"></td></tr>
+
+
+		<tr>
+        <td>Harvest:</td>
+        <td><input type="checkbox" name="use" value="true" <%= repo.use and 'checked'%>></td>
+      </tr>
+      <tr>
+        <td>Complete in one attempt:</td>
+        <td><input type="checkbox" name="complete" value="true" <%= repo.complete and 'checked'%>>Tells the harvester to complete harvesting in one attempt. Generally this option should not be required. Only for repositories with shortlived resumptionTokens.</td>
+      </tr>
+      <tr>
+        <td>Next action:</td>
+        <td>
+          <select name="repositoryAction">
+            <option value="" <%= repo.action == '' and 'selected' or ''%>>-</option>
+            <option value="clear" <%= repo.action == 'clear' and 'selected' or ''%>>Clear</option>
+            <option value="refresh" <%= repo.action == 'refresh' and 'selected' or ''%>>Refresh</option>
+          </select>
+        </td>
+      </tr>
+
+
+<%
+
+def renderDropdown(index, selectName, aTupleList, selectedValue, wildcardName=''):
+	#
+%>
+	<select name="<%= selectName %>_<%= index %>">
+<%
+	#
+	if wildcardName != '':
+		#
+%>
+	    <option value="*" <%=selectedValue=='*' and 'selected' or ''%>><%= wildcardName %></option>
+<%
+	#
+
+ 	for key,value in aTupleList:
+		#
+%>
+			<option value="<%=key%>" <%=selectedValue==key and 'selected' or ''%>><%=value%></option>
+<%
+	#
+%>
+			</select>
+<%
+#
+
+def renderTimeslot(index, aTimeslot):
+	#
+	weeks = map(lambda x:(str(x),x), range(1,54))
+	hours = map(lambda x:(str(x),x), range(25))
+	weekdays = [('0','Monday'),('1','Tuesday'),('2','Wednesday'),('3','Thursday'),('4','Friday'),('5','Saturday'),('6','Sunday')]
+
+	req.write('<td>')
+	renderDropdown(index, 'shopclosedWeek', weeks, aTimeslot.beginweek, 'Any week')
+	req.write('</td><td>')
+	renderDropdown(index, 'shopclosedWeekDay', weekdays, aTimeslot.beginday, 'Any day')
+	req.write('</td><td>')
+	req.write('from')
+	renderDropdown(index, 'shopclosedBegin', hours, aTimeslot.beginhour)
+	req.write(':00 hrs ')
+	req.write('</td><td>')
+	req.write(' until')
+	renderDropdown(index, 'shopclosedEnd', hours, aTimeslot.endhour)
+	req.write(':00 hrs')
+	req.write('</td>')
+	if index != 0:
+		req.write("""
+		<td align="right">
+			<input type="image" src="/images/delete.jpg" name="deleteTimeslot_%(index)s" id="deleteTimeslot_%(index)s">
+			<a href="javascript:submitForm('deleteTimeslot_%(index)s')">delete</a>
+		</td>""" % locals())
+		if not aTimeslot.valid():
+			req.write('<td><p class="error">Invalid timeslot specification, will be ignored.</p></td>')
+#
+%>
+    </table>
+
+	<p>
+  <fieldset><legend class="subhead">Closing hours</legend>
+    <table>
+
+<%
+req.write('<tr>')
+for i in ['Week', 'Day', 'Begin', 'End', '']:
+  req.write('<th>%s</th>' % i)
+req.write('</tr>')
+index = 0
+for shopclosed in repo.shopclosed:
+	index = index + 1
+	closed=Timeslot(shopclosed)
+	#
+%>
+	<tr>
+		<% renderTimeslot(index,closed)%>
+	</tr>
+<%
+#
+
+%>
+
+<input type="hidden" name="numberOfTimeslots" value="<%= index %>">
+	<tr><td colspan="6"></td></tr>
+	<tr><td class="horline" colspan="6"></td></tr>
+	<tr><td colspan="6"></td></tr>
+	<tr>
+		<% renderTimeslot(0, Timeslot('*:*:0:0-*:*:0:0'))%>
+		<td><input type="submit" class="butt" value="Add" accesskey="a" name="addTimeslot"></td>
+	</tr>
+</table>
+</fieldset>
+
+	<p style="text-align: right;">
+   <input type="submit" name="action" class="butt" value="Save" accesskey="s">
+  </p>
+  </fieldset>
+	</p>
+
+</p>
+
+</form>
+
+
+
+<p>
+ <fieldset><legend class="subhead">Status</legend>
+  <ul>
+   <li>
+    <a href="/page/showHarvesterStatus/show?domainId=<%= domainId %>&repositoryId=<%= repo.id %>">
+   Harvester status of this repository
+    </a>
+   </li>
+	 <li>
+    <a href="/page/showHarvesterThroughput/show?domainId=<%= domainId %>&repositoryId=<%= repo.id %>&since=lastweek">
+   Harvester throughput for this repository for the past 7 days.
+    </a>
+   </li>
+	 <li>
+    <a href="/page/showHarvesterThroughput/show?domainId=<%= domainId %>&repositoryId=<%= repo.id %>&since=lastmonth">
+   Harvester throughput for this repository for the past 31 days.
+    </a>
+   </li>
+  </ul>
+ </fieldset>
+</p>
+
+
+<p>
+ <fieldset><legend class="subhead">Useful links</legend>
+  <ul>
+   <li>
+	 <a target="_blank" href="<%=repo.baseurl%>?verb=ListMetadataFormats">
+     List all metadata formats.
+    </a>
+   </li>
+	<li>
+    <a href="/testrepository/<%= repositoryFile %>">
+     Test mapping
+    </a>
+   </li>
+  </ul>
+  <i>(You may need to save first.)</i>
+ </fieldset>
+<p>
+<a href="/page/repositoryGroup.edit/<%=domainId%>.<%=groupId%>.repositoryGroup">Back to repositorygroup</a>
+</p>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/repositoryGroup.deleteRepository version_7.0/meresco/harvester/controlpanel/slowfoottemplates/repositoryGroup.deleteRepository
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/repositoryGroup.deleteRepository	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/repositoryGroup.deleteRepository	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,27 @@
+<%
+from meresco.harvester.controlpanel.tools import getDomainId
+group = xml
+domainId = getDomainId(req.uri)
+deleteId = args['repository']
+id = group.repositoryGroup.id
+repositoryFile = "%s.%s.repository"%(domainId,deleteId)
+groupFile = "%s.%s.repositoryGroup"%(domainId,id)
+
+deletefile(filepath(repositoryFile))
+
+target(filepath(groupFile))
+%><?xml version="1.0"?>
+<repositoryGroup>
+<%
+for child in group.repositoryGroup.xml_children:
+  if child.__class__ == unicode:
+    req.write(child)
+  else:
+    if (child.nodeName != "repositoryId") or (unicode(child) != deleteId):
+      req.write(child.xml())
+#
+%>
+</repositoryGroup>
+<%
+redirect('/page/repositoryGroup.edit/' + groupFile)
+%>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/repositoryGroup.edit version_7.0/meresco/harvester/controlpanel/slowfoottemplates/repositoryGroup.edit
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/repositoryGroup.edit	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/repositoryGroup.edit	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,101 @@
+<%
+from meresco.harvester.controlpanel.tools import getDomainId
+req.req.headers_out['Cache-control'] = 'no-cache'
+group = xml.repositoryGroup
+domainId = getDomainId(req.uri)
+if not session.get('isAdmin','') and session.get('domain', '') != domainId:
+  raise Exception('Illegal use')
+#
+fileName = "%s.%s.repositoryGroup"%(domainId,group.id)
+%>
+<p class="head">Repositorygroup Administration</p>
+
+<%=args.error and '<span class="error">' + args.error + '</span>'or ''%>
+<form method="post" action="/repositoryGroup.save/<%= fileName %>">
+  <fieldset><legend class="subhead">Repository Group <%= group.id %></legend>
+    <table>
+      <tr><td>Key:</td><td><input size="15"  type="hidden" name="id" value="<%=group.id%>"><%=group.id%></td></tr>
+      <tr><td>Dutch Name:</td><td><input size="50"  type="text" name="nl_name" value="<%=unicode(group.xml_xpath("""//name[@xml:lang='nl']""")[0]) %>"></td></tr>
+      <tr><td>English Name:</td><td><input size="50"  type="text" name="en_name" value="<%=unicode(group.xml_xpath("""//name[@xml:lang='en']""")[0]) %>"></td></tr>
+    </table>
+    <p style="text-align: right;">
+     <input type="submit" name="action" class="butt" value="Save" accesskey="s">
+    </p>
+  </fieldset>
+</form>
+
+<p>
+<fieldset><legend class="subhead">Repositories</legend>
+ <form action='/repository.new/<%= fileName %>' method='post'>
+  <fieldset><legend>Create new repository</legend>
+   <table width="320" border="0" cellspacing="0" cellpadding="0">
+    <tr>
+     <td width="60">Key:&nbsp;</td>
+     <td width="200"><input name="id" type="text" class="zkveld" value=""></td>
+     <td width="40"><input name="submit" type="submit" class="butt" value="Create Repository"></td>
+    </tr>
+   </table>
+ </form>
+</fieldset>
+
+<fieldset><legend>Existing repositories</legend>
+ <table width="100%" border="0" cellspacing="4" cellpadding="0">
+<%
+repositories = map(None, group.repositoryId)
+repositories.sort()
+for id in repositories:
+  #
+%>
+  <tr>
+   <td><%= id %></id>
+   <td>
+    <a href="/page/repository.edit/<%= domainId %>.<%= id %>.repository?referrerGroup=<%= group.id %>">
+	  <img src="/images/edit.png" border="0"> Edit / View
+    </a>
+   </td>
+   <td>
+    <a href="/page/areYouSure/show?<%=
+       urlencode({'filename':'repository '+id,
+       'ok':'/repositoryGroup.deleteRepository/' + fileName + '?repository=' + id })%>">
+     <img src="/images/delete.jpg" width="14" height="14" border="0">
+	  Delete
+    </a>
+   </td>
+   <td>
+	 <a href="/testrepository/<%= domainId %>.<%= id %>.repository">
+	  <img src="/images/exec.png" border="0">
+	  Test mapping
+	 </a>
+   </td>
+  </tr>
+<%
+#
+%>
+ </table>
+</fieldset>
+
+</fieldset>
+</p>
+
+
+
+
+
+<p>
+<fieldset><legend class="subhead">Status</legend>
+ <ul>
+ <li>
+  <a href="/page/showHarvesterStatus/show?domainId=<%= domainId %>&repositoryGroupId=<%= group.id %>">Harvester status of this repositoryGroup</a> 
+ </li>
+ <li>
+  <a href="/page/showHarvesterThroughput/show?domainId=<%= domainId %>&repositoryGroupId=<%= group.id %>&since=lastweek">Harvester throughput of this repositorygroup for the past 7 days.</a>
+ </li>
+ <li>
+  <a href="/page/showHarvesterThroughput/show?domainId=<%= domainId %>&repositoryGroupId=<%= group.id %>&since=lastmonth">Harvester throughput of this repositorygroup for the past 31 days.</a>
+ </li>
+ </ul>
+</fieldset>
+</p>
+<p>
+<a href="/page/domain.edit/<%=domainId%>.domain">Back to domain</a>
+</p>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/repositoryGroup.new version_7.0/meresco/harvester/controlpanel/slowfoottemplates/repositoryGroup.new
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/repositoryGroup.new	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/repositoryGroup.new	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,35 @@
+<%
+from slowfoot import binderytools
+from meresco.harvester.controlpanel.tools import checkName
+
+f = asform(input)
+id = f.id
+domain = xml
+fileName = "%s.%s.repositoryGroup"%(domain.domain.id,id)
+
+if id == '':
+  redirect('/page/domain.edit/' + domain.domain.id + '.domain?error=No%20name%20given.')
+elif not checkName(id):
+  redirect('/page/domain.edit/' + domain.domain.id + '.domain?error=Name%20is%20not%20valid.%20Only%20use%20alphanumeric%20characters.')
+elif os.path.isfile(filepath(fileName)):
+  redirect('/page/domain.edit/' + domain.domain.id + '.domain?error=Deze%20id%20bestaat%20al.')
+else:
+  new_repositoryGroup = binderytools.bind_string("<repositoryGroupId>%s</repositoryGroupId>"%id).repositoryGroupId
+
+  domain.domain.xml_append(new_repositoryGroup)
+
+  target(filepath(domain.domain.id + '.domain'))
+  req.write(domain.xml())
+
+
+  target(filepath(fileName))
+%><?xml version="1.0"?>
+<repositoryGroup>
+  <id><%escape_xml(id)%></id>
+  <name xml:lang="nl"/>
+  <name xml:lang="en"/>
+</repositoryGroup>
+<%
+  redirect('/page/repositoryGroup.edit/' + fileName)
+#
+%>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/repositoryGroup.save version_7.0/meresco/harvester/controlpanel/slowfoottemplates/repositoryGroup.save
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/repositoryGroup.save	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/repositoryGroup.save	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,18 @@
+<%
+group = asform(input)
+old_group = xml
+
+target(filepath(args.name))
+%><?xml version="1.0"?>
+<repositoryGroup>
+  <id><%escape_xml(group.id)%></id>
+  <name xml:lang="nl"><%escape_xml(group.nl_name)%></name>
+  <name xml:lang="en"><%escape_xml(group.en_name)%></name><%
+for repositoryId in old_group.repositoryGroup.repositoryId:
+  req.write(repositoryId.xml())
+#
+%>
+</repositoryGroup>
+<%
+redirect('/page/repositoryGroup.edit/' + args.name)
+%>
\ No newline at end of file
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/repository.new version_7.0/meresco/harvester/controlpanel/slowfoottemplates/repository.new
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/repository.new	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/repository.new	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,45 @@
+<%
+from slowfoot import binderytools
+from meresco.harvester.controlpanel.tools import checkName, getDomainId
+
+f = asform(input)
+repositoryId = f.id
+group = xml
+domainId = getDomainId(req.uri)
+groupFileName = args.name
+fileName = "%s.%s.repository"%(domainId, repositoryId)
+
+errorUrl = '/page/repositoryGroup.edit/'+groupFileName +'?error='
+
+if repositoryId == '':
+  redirect(errorUrl + 'No%20id%20given.')
+elif not checkName(repositoryId):
+  redirect(errorUrl + 'Name%20is%20not%20valid.%20Only%20use%20alphanumeric%20characters.')
+elif os.path.isfile(filepath(fileName)):
+  redirect(errorUrl +'A%20repository%20with%20this%20id%20already%20exists.')
+else:
+  new_repository = binderytools.bind_string("""<?xml version="1.0"?><repositoryId>%s</repositoryId>"""%(repositoryId)).repositoryId
+
+  group.repositoryGroup.xml_append(new_repository)
+
+  target(filepath(groupFileName))
+  req.write(group.xml())
+
+  target(filepath(fileName))
+%><?xml version="1.0"?>
+<repository>
+  <id><%escape_xml(repositoryId)%></id>
+  <repositoryGroupId><%escape_xml(group.repositoryGroup.id)%></repositoryGroupId>
+  <use/>
+  <action/>
+  <baseurl/>
+  <set/>
+  <collection/>
+  <targetId/>
+  <metadataPrefix/>
+  <targetId/>
+</repository>
+<%
+  redirect('/page/repository.edit/' + fileName + '?referrerGroup=' + group.repositoryGroup.id)
+#
+%>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/repository.save version_7.0/meresco/harvester/controlpanel/slowfoottemplates/repository.save
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/repository.save	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/repository.save	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,72 @@
+<%
+from meresco.harvester.controlpanel.tools import getDomainId
+repository = asform(input)
+domainId = getDomainId(req.uri)
+fileName = args.name
+target(filepath(fileName))
+groupId = args.referrerGroup
+%><?xml version="1.0"?>
+<repository>
+  <id><% escape_xml(repository.id) %></id>
+  <repositoryGroupId><% escape_xml(repository.repositoryGroupId) %></repositoryGroupId>
+  <use><% escape_xml(repository.use) %></use>
+  <complete><% escape_xml(repository.complete) %></complete>
+  <action><% escape_xml(repository.repositoryAction) %></action>
+  <baseurl><% escape_xml(repository.baseurl) %></baseurl>
+  <set><% escape_xml(repository.set) %></set>
+  <collection><% escape_xml(repository.collection) %></collection>
+  <targetId><% escape_xml(repository.targetId) %></targetId>
+  <metadataPrefix><% escape_xml(repository.metadataPrefix) %></metadataPrefix>
+  <mappingId><% escape_xml(repository.mappingId) %></mappingId>
+<%
+if repository.maximumIgnore:
+%>
+  <maximumIgnore><% escape_xml(repository.maximumIgnore) %></maximumIgnore>
+<%
+for i in range(1,1+int(repository.numberOfTimeslots)):
+	if repository.get('deleteTimeslot_' + str(i)+".x", None) == None:
+		#
+%>   <shopclosed><%= '%s:%s:%s:00-%s:%s:%s:00' % (repository.getfirst('shopclosedWeek_'+str(i)),
+	repository.getfirst('shopclosedWeekDay_'+str(i)),
+	repository.getfirst('shopclosedBegin_'+str(i)),
+	repository.getfirst('shopclosedWeek_'+str(i)),
+	repository.getfirst('shopclosedWeekDay_'+str(i)),
+	repository.getfirst('shopclosedEnd_'+str(i))) %></shopclosed>
+<%
+	#
+#
+if repository.get('addTimeslot', None) != None:
+  #
+%>
+  <shopclosed><%= '%s:%s:%s:00-%s:%s:%s:00' % (repository.getfirst('shopclosedWeek_0'),
+	repository.getfirst('shopclosedWeekDay_0'),
+	repository.getfirst('shopclosedBegin_0'),
+	repository.getfirst('shopclosedWeek_0'),
+	repository.getfirst('shopclosedWeekDay_0'),
+	repository.getfirst('shopclosedEnd_0')) %>
+  </shopclosed>
+<%
+#
+%>
+
+<%
+#
+if repository.get('deleteTimeslot', None) != None:
+  #
+%>
+  <shopclosed><%= '%s:%s:%s:00-%s:%s:%s:00' % (repository.getfirst('shopclosedWeek_0'),
+	repository.getfirst('shopclosedWeekDay_0'),
+	repository.getfirst('shopclosedBegin_0'),
+	repository.getfirst('shopclosedWeek_0'),
+	repository.getfirst('shopclosedWeekDay_0'),
+	repository.getfirst('shopclosedEnd_0')) %>
+  </shopclosed>
+<%
+#
+%>
+
+
+</repository>
+<%
+redirect('/page/repository.edit/' + fileName + '?referrerGroup='+groupId)
+%>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/repository.url version_7.0/meresco/harvester/controlpanel/slowfoottemplates/repository.url
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/repository.url	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/repository.url	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,11 @@
+<%type('text/plain')
+result=''
+if args.key:
+  rxml = asxml(url('/xml/repositories.xml')).data
+  for inst in rxml.institution:
+    for repo in inst.repository:
+      if repo.key == str(args.key):
+        result = str(repo.url)
+        break
+#
+%><%=result%>
\ No newline at end of file
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/robots.txt version_7.0/meresco/harvester/controlpanel/slowfoottemplates/robots.txt
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/robots.txt	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/robots.txt	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,5 @@
+<%type('text/plain')%>
+# SAHARA
+User-agent: *
+Disallow: /
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/saharaget version_7.0/meresco/harvester/controlpanel/slowfoottemplates/saharaget
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/saharaget	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/saharaget	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,36 @@
+<%
+args.verb == 'GetRepositoryGroups' or \
+	remoteHost() in ['127.0.0.1', 'localhost'] or \
+	requireValidUser('saharaget')
+
+import time, rfc822
+later = time.time() + (60 * 60 * 12)
+now = time.time()
+req.headers_out['Expires'] = rfc822.formatdate(later)
+req.headers_out['Last-modified'] = rfc822.formatdate(now)
+
+errorCode = ''
+
+verb = args.verb
+domain = asxml(url('/' + args.domainId + '.domain')).domain
+if args.domainId != domain.id:
+	errorCode = 'badDomain'
+
+verbs={
+  'GetRepositories':'/getRepositories',
+  'GetRepositoryGroups':'/getRepositoryGroups',
+  'GetRepository':'/getRepository',
+  'GetMapping':'/getMapping',
+  'GetTarget':'/getTarget',
+  'GetIdentifiers':'/getIdentifiers',
+  'GetRecord':'/getRecord',
+  'GetStatus':'/getStatus'}
+template = verbs.get(str(verb), False)
+if not template:
+	errorCode = 'badVerb'
+
+if not errorCode:
+  include(template)
+else:
+  include(uri(path='/saharageterror', query={'errorCode':errorCode}))
+%>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/saharageterror version_7.0/meresco/harvester/controlpanel/slowfoottemplates/saharageterror
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/saharageterror	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/saharageterror	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,20 @@
+<%
+messages = {
+  'badDomain': 'The domain does not exist.',
+  'badVerb': 'Value of the verb argument is not a legal verb, the verb argument is missing, or the verb argument is repeated.',
+	'badArgument': 'The request includes illegal arguments, is missing required arguments, includes a repeated argument, or values for arguments have an illegal syntax.',
+	'idDoesNotExist': 'The value of an argument (id or key) is unknown or illegal.'
+}
+
+type('text/xml; charset=utf-8')
+%><?xml version="1.0" encoding="UTF-8"?>
+<saharaget xmlns="http://sahara.cq2.org/xsd/saharaget.xsd">
+<%
+include('/saharagetTime')
+%>
+ <request><%escape_xml(req.req.unparsed_uri)%></request>
+ <error code="<%escape_xml(args.errorCode)%>"
+ ><%
+escape_xml(messages.get(str(args.errorCode), 'Unknown error code'))
+%></error>
+</saharaget>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/saharagetTime version_7.0/meresco/harvester/controlpanel/slowfoottemplates/saharagetTime
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/saharagetTime	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/saharagetTime	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,3 @@
+<%
+import time
+%>  <responseDate><%=time.strftime('%Y-%m-%dT%H:%M:%SZ',time.gmtime()) %></responseDate>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/saharaget.xsd version_7.0/meresco/harvester/controlpanel/slowfoottemplates/saharaget.xsd
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/saharaget.xsd	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/saharaget.xsd	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,154 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
+  <xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="xml.xsd"/>
+  <xs:element name="saharaget">
+    <xs:complexType>
+      <xs:sequence>
+        <xs:element ref="responseDate"/>
+        <xs:element ref="request"/>
+        <xs:choice>
+          <xs:element ref="GetIdentifiers"/>
+          <xs:element ref="GetMapping"/>
+          <xs:element ref="GetRepositories"/>
+          <xs:element ref="GetRepository"/>
+          <xs:element ref="GetRepositoryGroups"/>
+          <xs:element ref="GetTarget"/>
+          <xs:element ref="error"/>
+        </xs:choice>
+      </xs:sequence>
+    </xs:complexType>
+  </xs:element>
+  <xs:element name="responseDate" type="xs:NMTOKEN"/>
+  <xs:element name="request">
+    <xs:complexType mixed="true">
+      <xs:choice minOccurs="0" maxOccurs="unbounded">
+        <xs:element ref="mapping"/>
+        <xs:element ref="repository"/>
+        <xs:element ref="repositoryGroup"/>
+        <xs:element ref="target"/>
+        <xs:element ref="domain"/>
+        <xs:element ref="verb"/>
+      </xs:choice>
+    </xs:complexType>
+  </xs:element>
+  <xs:element name="domain" type="xs:NCName"/>
+  <xs:element name="verb" type="xs:NCName"/>
+  <xs:element name="GetIdentifiers">
+    <xs:complexType>
+      <xs:sequence>
+        <xs:element maxOccurs="unbounded" ref="identifier"/>
+      </xs:sequence>
+    </xs:complexType>
+  </xs:element>
+  <xs:element name="identifier" type="xs:anyURI"/>
+  <xs:element name="GetMapping">
+    <xs:complexType>
+      <xs:sequence>
+        <xs:element ref="mapping"/>
+      </xs:sequence>
+    </xs:complexType>
+  </xs:element>
+  <xs:element name="GetRepositories">
+    <xs:complexType>
+      <xs:sequence>
+        <xs:element maxOccurs="unbounded" ref="repository"/>
+      </xs:sequence>
+    </xs:complexType>
+  </xs:element>
+  <xs:element name="GetRepository">
+    <xs:complexType>
+      <xs:sequence>
+        <xs:element ref="repository"/>
+      </xs:sequence>
+    </xs:complexType>
+  </xs:element>
+  <xs:element name="GetRepositoryGroups">
+    <xs:complexType>
+      <xs:sequence>
+        <xs:element maxOccurs="unbounded" ref="repositoryGroup"/>
+      </xs:sequence>
+    </xs:complexType>
+  </xs:element>
+  <xs:element name="GetTarget">
+    <xs:complexType>
+      <xs:sequence>
+        <xs:element ref="target"/>
+      </xs:sequence>
+    </xs:complexType>
+  </xs:element>
+  <xs:element name="error">
+    <xs:complexType mixed="true">
+      <xs:attribute name="code" use="required" type="xs:NCName"/>
+    </xs:complexType>
+  </xs:element>
+  <xs:element name="mapping">
+    <xs:complexType mixed="true">
+      <xs:choice minOccurs="0" maxOccurs="unbounded">
+        <xs:element ref="id"/>
+        <xs:element ref="name"/>
+        <xs:element ref="code"/>
+        <xs:element ref="description"/>
+      </xs:choice>
+    </xs:complexType>
+  </xs:element>
+  <xs:element name="code" type="xs:string"/>
+  <xs:element name="description" type="xs:string"/>
+  <xs:element name="target">
+    <xs:complexType mixed="true">
+      <xs:choice minOccurs="0" maxOccurs="unbounded">
+        <xs:element ref="id"/>
+        <xs:element ref="name"/>
+        <xs:element ref="baseurl"/>
+        <xs:element ref="password"/>
+        <xs:element ref="path"/>
+        <xs:element ref="port"/>
+        <xs:element ref="username"/>
+        <xs:element ref="oaiEnvelope"/>
+      </xs:choice>
+    </xs:complexType>
+  </xs:element>
+  <xs:element name="baseurl" type="xs:NCName"/>
+  <xs:element name="password" type="xs:NCName"/>
+  <xs:element name="path" type="xs:string"/>
+  <xs:element name="port" type="xs:integer"/>
+  <xs:element name="username" type="xs:NCName"/>
+  <xs:element name="oaiEnvelope" type="xs:boolean"/>
+  <xs:element name="repositoryGroup">
+    <xs:complexType mixed="true">
+      <xs:choice minOccurs="0" maxOccurs="unbounded">
+        <xs:element ref="key"/>
+        <xs:element ref="name"/>
+      </xs:choice>
+    </xs:complexType>
+  </xs:element>
+  <xs:element name="repository">
+    <xs:complexType mixed="true">
+      <xs:choice minOccurs="0" maxOccurs="unbounded">
+        <xs:element ref="key"/>
+        <xs:element ref="mapping"/>
+        <xs:element ref="target"/>
+        <xs:element ref="action"/>
+        <xs:element ref="collection"/>
+        <xs:element ref="harvest"/>
+        <xs:element ref="metadataPrefix"/>
+        <xs:element ref="set"/>
+        <xs:element ref="url"/>
+      </xs:choice>
+    </xs:complexType>
+  </xs:element>
+  <xs:element name="action">
+    <xs:complexType/>
+  </xs:element>
+  <xs:element name="collection" type="xs:NCName"/>
+  <xs:element name="harvest" type="xs:boolean"/>
+  <xs:element name="metadataPrefix" type="xs:NCName"/>
+  <xs:element name="set" type="xs:NCName"/>
+  <xs:element name="url" type="xs:anyURI"/>
+  <xs:element name="name">
+    <xs:complexType mixed="true">
+      <xs:attribute ref="xml:lang"/>
+    </xs:complexType>
+  </xs:element>
+  <xs:element name="id" type="xs:string"/>
+  <xs:element name="key" type="xs:NCName"/>
+</xs:schema>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/scripts.js version_7.0/meresco/harvester/controlpanel/slowfoottemplates/scripts.js
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/scripts.js	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/scripts.js	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,14 @@
+<%type('text/javascript')%><!--
+function MM_reloadPage(init) {  //reloads the window if Nav4 resized
+  if (init==true) with (navigator) {if ((appName=="Netscape")&&(parseInt(appVersion)==4)) {
+    document.MM_pgW=innerWidth; document.MM_pgH=innerHeight; onresize=MM_reloadPage; }}
+  else if (innerWidth!=document.MM_pgW || innerHeight!=document.MM_pgH) location.reload();
+}
+MM_reloadPage(true);
+
+function MM_preloadImages() { //v3.0
+  var d=document; if(d.images){ if(!d.MM_p) d.MM_p=new Array();
+    var i,j=d.MM_p.length,a=MM_preloadImages.arguments; for(i=0; i<a.length; i++)
+    if (a[i].indexOf("#")!=0){ d.MM_p[j]=new Image; d.MM_p[j++].src=a[i];}}
+}
+//-->
\ No newline at end of file
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/setactiondone version_7.0/meresco/harvester/controlpanel/slowfoottemplates/setactiondone
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/setactiondone	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/setactiondone	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,29 @@
+<%
+from meresco.harvester.controlpanel.tools import getDomainId
+domainId = args.domainId
+repositoryId = args.repositoryId
+
+filename = '%s.%s.repository'%(domainId, repositoryId)
+repository = asxml(url('/xml/%s'%filename)).repository
+
+target(filepath(filename))
+%><?xml version="1.0"?>
+<repository>
+  <id><% escape_xml(repository.id) %></id>
+  <repositoryGroupId><% escape_xml(repository.repositoryGroupId) %></repositoryGroupId>
+  <use><% escape_xml(repository.use) %></use>
+  <action></action>
+  <complete><% escape_xml(repository.complete) %></complete>
+  <baseurl><% escape_xml(repository.baseurl) %></baseurl>
+  <set><% escape_xml(repository.set) %></set>
+  <collection><% escape_xml(repository.collection) %></collection>
+  <targetId><% escape_xml(repository.targetId) %></targetId>
+  <metadataPrefix><% escape_xml(repository.metadataPrefix) %></metadataPrefix>
+  <mappingId><% escape_xml(repository.mappingId) %></mappingId>
+</repository>
+<%
+target()
+type('text/xml; charset=utf-8')
+%><?xml version="1.0"?>
+<result>success</result>
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/showHarvesterStatus version_7.0/meresco/harvester/controlpanel/slowfoottemplates/showHarvesterStatus
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/showHarvesterStatus	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/showHarvesterStatus	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,106 @@
+<p>
+<h3>Harvester Status.</h3>
+</p>
+<%
+domainId = args.domainId
+args = urlencode(dict(domainId=domainId, repositoryGroupId=args.repositoryGroupId, repositoryId=args.repositoryId))
+theUrl = url('/getStatus?%s' % args)
+
+statuses = asxml(theUrl).saharaget.GetStatus.status
+
+statusUrl = url('%s/getStatus?%s' % (req.get_options()['internalServer'], args))
+ignored = {}
+for status in asxml(statusUrl).saharaget.GetStatus.status:
+    ignored[status.repositoryId] = status
+#
+%>
+<table class="event">
+<tr class="eventheader">
+<td>RepositoryGroup</td>
+<td>Repository</td>
+<td>Last successful harvest</td>
+<td>Total records</td>
+<td>Harvested<br>Uploaded<br>Deleted</td>
+<td>#Errors</td>
+<td></td>
+<td>#Ignores</td>
+<td></td>
+</tr>
+<%
+for status in statuses:
+  total = 0
+  total += int(str(status.total) or '0')
+  errorsnr = int(str(status.totalerrors))
+  style = errorsnr and 'style="font-weight:bold"' or ''
+%>
+<tr>
+<td <%=style%>><% escape_xml(status.repositoryGroupId) %></td>
+<td <%=style%>><% escape_html(status.repositoryId) %></td>
+<td <%=style%>><% escape_html(status.lastHarvestDate) %></td>
+<td><% escape_html(status.total) %></td>
+<td><% escape_html(status.harvested) %>/<% escape_html(status.uploaded) %>/<% escape_html(status.deleted) %></td>
+<td><% escape_html(status.totalerrors) %></td>
+<%
+  if errorsnr:
+%>
+<td class="error"><a name="top_<%= status.repositoryId %>" href="#<%= status.repositoryId %>">Errors</a></td>
+<%
+  else:
+%>
+<td>&nbsp;</td>
+<% 
+  #
+%>
+<td><% escape_html(ignored[status.repositoryId].ignored if status.repositoryId in ignored else 0) %></td>
+<td class="link">
+<%
+  if status.repositoryId in ignored:
+    args = urlencode(dict(domainId=domainId, repositoryId=status.repositoryId))
+%>
+    <a href="/page/ignored/?<%= args %>">Ignored</a>
+<%
+  #
+%>
+</td>
+</tr>
+<%
+#
+%>
+</table>
+<br>
+
+<p>
+<h3>Harvester Errors.</h3>
+</p>
+<table class="event">
+<%
+for status in statuses:
+  repositoryId = status.repositoryId
+  errorsnr = int(str(status.totalerrors))
+  if errorsnr:
+    #
+%>
+<tr class="eventinfo">
+<td><a name="<%= repositoryId %>" href="#top_<%= repositoryId %>"><%= repositoryId %></a></td>
+<td>Last successful harvest</td>
+<td><%= status.lastHarvestDate %></td>
+</tr>
+<tr>
+<td>&nbsp;</td>
+<td>Nr. of errors since:</td>
+<td><b><%= errorsnr %></b></td>
+</tr>
+<%
+    if hasattr(status.recenterrors, 'error'):
+      for error in status.recenterrors.error:
+        #
+%>
+  <tr class="eventerror">
+    <td>&nbsp;</td>
+    <td class="alt"><%= error.date %></td>
+    <td class="alt"><% escape_html(error.split('|')[-1]) %></td>
+  </tr>
+<%
+#
+%>
+</table>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/showHarvesterThroughput version_7.0/meresco/harvester/controlpanel/slowfoottemplates/showHarvesterThroughput
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/showHarvesterThroughput	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/showHarvesterThroughput	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,60 @@
+<%
+from meresco.harvester.throughputanalyser import ThroughputAnalyser
+
+if args.repositoryId:
+	caption = args.repositoryId
+	objectType = 'repository'
+elif args.repositoryGroupId:
+	caption = args.repositoryGroupId
+	objectType = 'repository group'
+else:
+	caption = args.domainId
+	objectType = 'domain'
+
+import time
+days = args.since == 'lastweek' and 7 or 31
+dateSince = time.strftime("%Y-%m-%d", time.localtime(time.time() - days * 3600 * 24))
+%>
+
+<p>
+<h3><%= "Harvester throughput for the '%s' %s for the past %i days." % (caption, objectType, days) %></h3>
+</p>
+
+<%
+#Determine all repository names.
+repositoryNames = []
+getArgs = {	'verb': 'GetRepositoryGroups', 'domainId': args.domainId}
+groups = asxml(url('/saharaget?' + urlencode(getArgs))).saharaget.GetRepositoryGroups.repositoryGroup
+
+for repositoryGroup in groups:
+	if not args.repositoryGroupId or args.repositoryGroupId == repositoryGroup.id:
+		for repositoryId in repositoryGroup.repositoryId:
+			if not args.repositoryId or args.repositoryId == repositoryId:
+				repositoryNames.append(repositoryId)
+
+logDir = req.get_options()['logDir']
+analyser = ThroughputAnalyser(logDir + '/' + args.domainId)
+report = analyser.analyse(repositoryNames, dateSince)
+%>
+<table>
+	<tr>
+		<td>Timespan (hh:mm:ss):</td>
+		<td align="right"><%= report.hmsString() %></td>
+		<td></td>
+	</tr>
+	<tr>
+		<td>Number of records:</td>
+		<td align="right"><%= report.records %></td>
+		<td>processed</td>
+	</tr>
+	<tr>
+		<td>Throughput (record/sec):</td>
+		<td align="right"><%= report.recordsPerSecond() %></td>
+		<td></td>
+	</tr>
+	<tr>
+		<td>Extrapolated for 24 hours:</td>
+		<td align="right"><%= report.recordsPerDay() %></td>
+		<td></td>
+	</tr>
+</table> 
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/stylesheet.css version_7.0/meresco/harvester/controlpanel/slowfoottemplates/stylesheet.css
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/stylesheet.css	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/stylesheet.css	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,87 @@
+<style type="text/css">
+*    {font: 9pt Arial, sans-serif}
+BODY {
+   /*background-color: #CBC9BE;*/
+   background-color: #F6F4EF;
+   color:                      #666666;
+   margin: 0px;
+}
+body,td,th {
+	font-family: Verdana, Arial, Helvetica, sans-serif;
+	font-size: 11px;
+}
+a {
+	color: #006C71;
+	text-decoration: none
+}
+a:active, a:hover {
+	text-decoration: underline;
+}
+
+fieldset tr:hover {
+background-color: #E5E3DE;
+}
+
+.error {
+	font-weight: bold;
+	color: red;
+}
+
+td.button {
+	padding: 0px 6px 6px 40px;
+	background: #FFFFFF url(button.jpg) no-repeat 0% 100%;
+	font: bold 12px "Trebuchet MS", Verdana, Arial, Helvetica, sans-serif;
+        height: 26px;
+        align: left;
+        valign: top;
+}
+td.sahara {
+	background: #FFFFFF url(meresco.jpg) no-repeat 100% 0;
+	height:70px;
+}
+td.horline {
+	background-color:#CBC9BE;
+	height:1px;
+}
+td.content {
+	background-color:#F5F4EE;
+	padding: 20px 20px 20px 20px;	
+}
+
+th {
+	text-align: center;
+}
+
+table.event{
+	border-spacing: 0px;
+}
+.event td {
+	border: 1px solid gray;
+	padding: 3px;
+}
+.event a{
+	color: red;
+	font-weight: bold;
+}
+.event .link a{
+	color: #006C71;
+	font-weight: bold;
+}
+.zkveld { 
+	border: 1px; border-style: solid; 
+	border-color:#5B9EB9; width:200px;
+	height:18px;
+}
+.zkveld_klein { 
+	border: 1px; border-style: solid; 
+	border-color:#5B9EB9; width:60px;
+	height: 18px;
+}
+input.butt {
+	background-color: #79B500; 
+	font-weight: bold; 
+	border-width: thin solid #5B9EB9; 
+	font-size: 11px; color: white;
+	height:20px;
+}
+</style>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/target.edit version_7.0/meresco/harvester/controlpanel/slowfoottemplates/target.edit
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/target.edit	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/target.edit	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,163 @@
+<%
+req.req.headers_out['Cache-control'] = 'no-cache'
+searchEngineTarget = xml.target
+%>
+
+<p class="head">Target Administration</p>
+
+<%=args.error and '<span class="error">' + args.error + '</span>'or ''%>
+
+<fieldset><legend class="subhead">Target (<%=searchEngineTarget.name%>)</legend>
+<%
+if session.get('isAdmin',''):
+  #
+%>
+ <form method="post" action="/target.save/<%= searchEngineTarget.id %>.target">
+  <table>
+   <input type="hidden" name="id" value="<%=searchEngineTarget.id%>">
+   <input type="hidden" name="referrerDomain" value="<%=args.referrerDomain%>">
+   <input type="hidden" name="targetType" value="<%=searchEngineTarget.targetType%>">
+   <tr>
+    <td>Name:</td>
+    <td><input type="text" name="name" value="<%=searchEngineTarget.name%>"></td>
+   </tr>
+
+   <tr>
+    <td>Type:</td>
+    <td><%= searchEngineTarget.targetType %></td>
+   </tr>
+
+<%
+  if searchEngineTarget.targetType == 'sruUpdate':
+%>
+   <tr>
+    <td>Base URL: (without &quot;http://&quot;)</td>
+    <td><input type="text" name="baseurl" value="<%=searchEngineTarget.baseurl%>" size="30"></td>
+   </tr>
+
+   <tr>
+    <td>Path:</td>
+    <td><input type="text" name="path" value="<%=searchEngineTarget.path%>" size="30"></td>
+  </tr>
+
+   <tr>
+    <td>Port:</td>
+    <td><input type="text" name="port" value="<%=searchEngineTarget.port%>" size="6"></td>
+   </tr>
+<%
+  elif searchEngineTarget.targetType == 'filesystem':
+%>
+   <tr>
+    <td>Path:</td>
+    <td><input type="text" name="path" value="<%=searchEngineTarget.path%>" size="30"></td>
+   </tr>
+   <tr>
+    <td>Wrap in OAI-Envelope:</td>
+    <td><input type="checkbox" name="oaiEnvelope" value="true" <%= searchEngineTarget.oaiEnvelope == 'true' and 'checked'%>></td>
+   </tr>
+<%
+  elif searchEngineTarget.targetType == 'composite':
+    targetIds = asxml(url('/%s.domain' % args.referrerDomain)).domain.targetId
+    targetIds = filter(lambda t: t != searchEngineTarget.id, targetIds)
+    targetName = lambda id: asxml(url('/xml/'+id+'.target')).target.name
+    selected = lambda id: id in searchEngineTarget.delegate and 'selected' or ''
+%>
+   <tr>
+    <td style="vertical-align:top">Targets (hold CTRL to select multiple targets):</td>
+    <td>
+      <select name="delegate" multiple size="7">
+<%
+    for targetId in targetIds:
+%>
+     <option value="<%=targetId%>" <%=selected(targetId)%>><% escape_html(targetName(targetId)) %></option>
+<%
+    #
+%>
+      </select>
+    </td>
+   </tr>
+
+<%
+  #
+%>
+  </table>
+<%
+else:
+  #
+%>
+ <table>
+  <tr>
+    <td>Name:</td>
+    <td><%=searchEngineTarget.name%></td>
+  </tr>
+
+  <tr>
+    <td>Type:</td>
+    <td><%= searchEngineTarget.targetType %></td>
+  </tr>
+
+<%
+  if searchEngineTarget.targetType == 'sruUpdate':
+%>
+  <tr>
+    <td>Base URL:</td>
+    <td><%=searchEngineTarget.baseurl%></td>
+  </tr>
+
+  <tr>
+    <td>Path:</td>
+    <td><%=searchEngineTarget.path%></td>
+  </tr>
+
+  <tr>
+    <td>Port:</td>
+    <td><%=searchEngineTarget.port%></td>
+  </tr>
+<%
+  elif searchEngineTarget.targetType == 'filesystem':
+%>
+  <tr>
+    <td>Path:</td>
+    <td><%=searchEngineTarget.path%></td>
+  </tr>
+  <tr>
+    <td>Wrap in OAI-Envelope:</td>
+    <td><%=searchEngineTarget.oaiEnvelope and 'true' or 'false'%></td>
+  </tr>
+<%
+  elif searchEngineTarget.targetType == 'composite':
+    #
+%>
+  <tr>
+    <td>Targets:</td><td>&nbsp;</td>
+  </tr>
+<%
+    for id in searchEngineTarget.delegate:
+      targetName = asxml(url('/xml/'+id+'.target')).target.name
+%>
+  <tr>
+    <td><%escape_html(targetName)%></td>
+    <td>
+      <a href="/page/target.edit/<%= id %>.target?referrerDomain=<%= args.referrerDomain %>">
+      <img src="/images/edit.png" border="0">View
+      </a>
+    </td>
+  </tr>
+<%
+    #
+  #
+%>
+
+ </table>
+<%
+#
+%>
+ <p style="text-align: right;">
+  <input type="submit" name="action" class="butt" value="Save" accesskey="s">
+ </p>
+</form>
+
+</fieldset>
+<p>
+ <a href="/page/domain.edit/<%=args.referrerDomain%>.domain">Back to domain</a>
+</p>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/target.new version_7.0/meresco/harvester/controlpanel/slowfoottemplates/target.new
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/target.new	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/target.new	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,30 @@
+<%
+from slowfoot import binderytools
+
+f = asform(input)
+name = f.name
+domain = xml
+
+if name == '':
+  redirect('/page/domain.edit/' + domain.domain.id + '.domain?error=No%20name%20given.')
+else:
+  targetid = uuid()
+  new_target = binderytools.bind_string("<targetId>%s</targetId>"%targetid).targetId
+
+  domain.domain.xml_append(new_target)
+
+  target(filepath(domain.domain.id + '.domain'))
+  req.write(domain.xml())
+
+
+  target(filepath(targetid + ".target"))
+%><?xml version="1.0"?>
+<target>
+  <id><%=targetid%></id>
+  <name><%escape_xml(name)%></name>
+  <targetType><%=f.targetType%></targetType>
+</target>
+<%
+  redirect(uri(path='/page/target.edit/' + targetid + '.target', query={'referrerDomain':domain.domain.id}))
+#
+%>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/target.save version_7.0/meresco/harvester/controlpanel/slowfoottemplates/target.save
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/target.save	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/target.save	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,35 @@
+<%
+searchEngineTarget = asform(input)
+
+target(filepath(searchEngineTarget.id + '.target'))
+%><?xml version="1.0"?>
+<target>
+  <id><%escape_xml(searchEngineTarget.id)%></id>
+  <name><%escape_xml(searchEngineTarget.name)%></name>
+  <username><%escape_xml(searchEngineTarget.username)%></username>
+  <port><%escape_xml(searchEngineTarget.port)%></port>
+  <targetType><%=searchEngineTarget.targetType%></targetType>
+<%
+for delegate in searchEngineTarget.delegate:
+%>
+  <delegate><%=delegate%></delegate>
+<%
+#
+%>
+<%
+if searchEngineTarget.targetType == 'sruUpdate':
+%>
+  <path><%escape_xml(searchEngineTarget.path)%></path>
+  <baseurl><%escape_xml(searchEngineTarget.baseurl)%></baseurl>
+<%
+elif searchEngineTarget.targetType == 'filesystem':
+%>
+  <path><%escape_xml(searchEngineTarget.path)%></path>
+  <oaiEnvelope><%escape_xml(searchEngineTarget.oaiEnvelope)%></oaiEnvelope>
+<%
+#
+%>
+</target>
+<%
+redirect('/page/target.edit/' + searchEngineTarget.id + '.target?referrerDomain=' + searchEngineTarget.referrerDomain )
+%>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/testmapping version_7.0/meresco/harvester/controlpanel/slowfoottemplates/testmapping
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/testmapping	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/testmapping	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,45 @@
+<h2>Test mapping</h2>
+<p>
+The mappings can be tested using an <i>online harvester</i>. It will harvest a certain repository and uses the mapping to provide a result which is directly shown on screen. This may help in testing the mapping.
+</p>
+<p>The mapping can be tested in two ways.<p>
+<p>First by giving it a url which provides a OAI ListRecords answer. Something like: http://repository.example.org/oai?verb=ListRecords&metadataPrefix=oai_dc 
+
+<form action="/onlinemapping" method="get">
+<input type="hidden" name="mapping" value="<%=args.name%>">
+<table>
+<tr><td>Test URL</td><td><input type="text" name="inputurl" value="" size="30"></td></tr>
+<tr><td>&nbsp;</td><td><input type="submit" class="butt" value="TEST"></tr>
+</table>
+</form>
+</p>
+<p>Secondly you can use one of the repositories known by Meresco Harvester.
+<form action="/onlinemapping" method="get">
+<input type="hidden" name="mapping" value="<%=args.name%>">
+<table>
+<tr><td>Test Repository</td>
+<td>
+<select name="inputurl">
+<%
+domainId = args.referrerDomain
+print >> req, domainId
+def isDomainRepository(filename):
+  return filename.startswith(domainId + '.') and filename.endswith('.repository')
+repositories = filter(isDomainRepository, files())
+for rep in repositories:
+    repXml = asxml(url('/'+rep)).repository
+    inputurl = '%s?verb=ListRecords&metadataPrefix=%s'%(repXml.baseurl,repXml.metadataPrefix)
+    if repXml.set:
+      inputurl += '&set=%s'%repXml.set
+    #
+%>
+  <option value="<%escape_html(inputurl)%>"><%=repXml.id%></option>
+<%
+#
+%>
+</select>
+</td></tr>
+<tr><td>&nbsp;</td><td><input type="submit" class="butt" value="TEST"></tr>
+</table>
+</form>
+</p>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/testrepository version_7.0/meresco/harvester/controlpanel/slowfoottemplates/testrepository
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/testrepository	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/testrepository	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,10 @@
+<%
+repository = xml.repository
+inputquery = { 'verb':'ListRecords', 'metadataPrefix':repository.metadataPrefix }
+if repository.set: 
+  inputquery['set']=repository.set
+inputurl = repository.baseurl + '?' + urlencode(inputquery)
+mapping = repository.mappingId + '.mapping'
+
+redirect('/onlinemapping?' + urlencode({'mapping':mapping, 'inputurl':inputurl}))
+%>
\ No newline at end of file
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/user.delete version_7.0/meresco/harvester/controlpanel/slowfoottemplates/user.delete
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/user.delete	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/user.delete	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,17 @@
+<%
+from slowfoot.account import deleteAccount, AccountException
+users = xml.users
+user = getattr(users, str(args.user), None)
+passwdFile = req.get_options()['usersfile']
+
+error = ''
+if user != None:
+  try:
+    deleteAccount(str(args.user), passwdFile)
+    users.xml_remove_child(user._delegatee)
+    target(filepath('users.xml'))
+    print >> req, xml.xml()
+  except AccountException, e:
+    error = str(e)
+redirect('/page/domains/show?'+urlencode({'error':error}))
+%>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/user.edit version_7.0/meresco/harvester/controlpanel/slowfoottemplates/user.edit
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/user.edit	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/user.edit	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,55 @@
+<%
+req.req.headers_out['Cache-Control'] = 'no-cache'
+
+%>
+<%=args.error and '<span class="error">' + args.error + '</span>'or ''%>
+
+<p class="head">User Administration</p>
+
+<form method="post" action="/user.save">
+<%
+user = getattr(xml.users, str(args.user))
+%>
+  <fieldset>
+    <legend class="subhead">User: <%=user.name%></legend>
+	<input type="hidden" name="user" value="<%=user.localName%>">
+    <table>
+      <tr>
+        <td>Full name:</td>
+        <td><input type="text" name="name" value="<%escape_html(user.name)%>"></td>
+      </tr>
+      <tr>
+        <td>Username:</td>
+        <td><%escape_html(user.localName)%></td>
+      </tr>
+      <tr>
+        <td>Organization:</td>
+        <td><input type="text" name="organization" value="<%escape_html(user.organization)%>"></td>
+      </tr>
+      <tr>
+        <td>E-mail:</td>
+        <td><input type="text" name="email" value="<%escape_html(user.email)%>"></td>
+      </tr>
+      <tr>
+        <td>Telephone:</td>
+        <td><input type="text" name="telephone" value="<%escape_html(user.telephone)%>"></td>
+      </tr>
+      <tr>
+        <td>Domain:</td>
+        <td><input type="text" name="domain" value="<%=user.domain%>"></td>
+      </tr>
+      <tr>
+        <td>Notes:</td>
+        <td>&nbsp;</td>
+      </tr>
+      <tr>
+        <td colspan="2"><textarea name="notes" rows="5" cols="60"><% escape_html(user.notes) %></textarea></td>
+      </tr>
+    </table>
+    <p style="text-align: right">
+     <input type="submit" name="action" class="butt" value="Save" accesskey="s">
+    </p>
+	</fieldset>
+ </form>
+</p>
+<a href="/page/domains/show">Back to Domains & Users</a>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/user.new version_7.0/meresco/harvester/controlpanel/slowfoottemplates/user.new
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/user.new	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/user.new	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,28 @@
+<%
+from slowfoot import binderytools
+from slowfoot.account import createAccount,AccountException
+f = asform(input)
+users = xml.users
+
+passwdFile = req.get_options()['usersfile']
+
+error = ''
+newusername = str(f.username)
+if newusername:
+  if f.password1 != f.password2:
+    error = 'Passwords do not match'
+  elif not (newusername[0].isalpha() and newusername.replace('_','').isalnum()):
+    error = 'Invalid username, only user alphanumeric characters'
+  else:
+    try:
+      user = createAccount(newusername, str(f.password1), passwdFile)
+      newuser = getattr(binderytools.bind_string("<%s><domain>%s</domain></%s>"%(newusername,f.domain,newusername)),newusername)
+      users.xml_append(newuser)
+      target(filepath('users.xml'))
+%><%=xml.xml()%><%
+    except AccountException, e:
+      error = str(e)
+else:
+  error = 'No username given.'
+redirect('/page/domains/show?' + urlencode({'error':error}))
+%>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/user.save version_7.0/meresco/harvester/controlpanel/slowfoottemplates/user.save
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/user.save	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/user.save	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,31 @@
+<%
+users = asxml(url('/users.xml')).users
+from meresco.harvester.controlpanel.tools import getElements
+from slowfoot.wrappers import wrapp
+f = asform(input)
+target(filepath('users.xml'))
+%><?xml version ="1.0" encoding="UTF-8"?>
+<users>
+<%
+for user in getElements(users):
+  username = user.localName
+  user = wrapp(user)
+  if username == f.user:
+    user = f
+  #
+%>
+<<%escape_xml(username)%>>
+  <name><%escape_xml(user.name)%></name>
+  <organization><%escape_xml(user.organization)%></organization>
+  <telephone><%escape_xml(user.telephone)%></telephone>
+  <email><%escape_xml(user.email)%></email>
+  <domain><%escape_xml(user.domain)%></domain>
+  <notes><%escape_xml(user.notes)%></notes>
+</<%escape_xml(username)%>>
+<%
+#
+%>
+</users>
+<%
+redirect('/page/domains/show')
+%>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/users.xml version_7.0/meresco/harvester/controlpanel/slowfoottemplates/users.xml
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/users.xml	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/users.xml	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<users>
+<admin>
+  <name>Administrator</name>
+  <organization></organization>
+  <telephone></telephone>
+  <email></email>
+  <domain></domain>
+  <notes></notes>
+</admin>
+</users>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/xml version_7.0/meresco/harvester/controlpanel/slowfoottemplates/xml
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/xml	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/xml	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1 @@
+<%type('text/xml; charset=utf-8')%><%=xml.xml()%>
\ No newline at end of file
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/slowfoottemplates/xsd version_7.0/meresco/harvester/controlpanel/slowfoottemplates/xsd
--- version_6.1/meresco/harvester/controlpanel/slowfoottemplates/xsd	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/slowfoottemplates/xsd	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1 @@
+<%type('text/xml; charset=utf-8')%><%=xml.xml()%>
\ No newline at end of file
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/controlpanel/tools.py version_7.0/meresco/harvester/controlpanel/tools.py
--- version_6.1/meresco/harvester/controlpanel/tools.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/controlpanel/tools.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,49 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+import re
+AMARA_TYPE_XML_ELEMENT = 1
+
+def checkName(aName):
+	return not re.sub('[\w\-]','', str(aName))
+
+def getDomainId(uri):
+  fileName = uri.split('/')[-1]
+  domainId,someId,typeExt = fileName.split('.')
+  return domainId
+
+def getElements(amaraObject):
+	result = []
+	for child in amaraObject.childNodes:
+		if child.nodeType == AMARA_TYPE_XML_ELEMENT:
+			result.append(child)
+	return result
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/deleteids.py version_7.0/meresco/harvester/deleteids.py
--- version_6.1/meresco/harvester/deleteids.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/deleteids.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,122 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#    Copyright (C) 2011 Stichting Kennisnet Ict http://www.kennisnet.nl 
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from virtualuploader import UploaderException
+from eventlogger import NilEventLogger, EventLogger
+from harvesterlog import idfilename, HarvesterLog
+from eventlogger import CompositeLogger, NilEventLogger
+from string import strip
+from slowfoot import binderytools
+from slowfoot import wrappers
+import sys, os
+from sets import Set
+from mapping import Upload
+from traceback import format_exception
+
+def readIds(filename):
+    ids = Set()
+    f = open(filename)
+    try:
+        for id in filter(None, map(strip,f)):
+            ids.add(id)
+        return ids
+    finally:
+        f.close()
+
+def writeIds(filename, ids):
+    f = open(filename,'w')
+    try:
+        for id in ids:
+            f.write(id)
+            f.write('\n')
+    finally:
+        f.close()
+
+
+class DeleteIds(object):
+    def __init__(self, repository, stateDir, logDir, generalHarvestLog=NilEventLogger()):
+        self._stateDir = stateDir
+        self._logDir = logDir
+        self._repository = repository
+        self._logger = HarvesterLog(stateDir, logDir, repository.id)
+        self._eventLogger = CompositeLogger([
+            (['*'], EventLogger(os.path.join(self._logDir, 'deleteids.log'))),
+            (['*'], self._logger.eventLogger()),
+            (['ERROR', 'INFO', 'WARN'], generalHarvestLog),
+        ])
+        self._filename = idfilename(self._stateDir, self._repository.id)
+        self._markLogger = True
+                    
+    def ids(self):
+        return readIds(self._filename)
+        
+    def delete(self):
+        uploader = self._repository.createUploader(self._eventLogger)
+        uploader.start()
+        try:
+            self._delete(uploader)
+        finally:
+            uploader.stop()
+    
+    def deleteFile(self, filename):
+        self._filename = filename
+        self._markLogger = False
+        self.delete()
+        
+    def _delete(self, uploader):
+        ids = self.ids()
+        done = Set()
+        try:
+            for id in ids:
+                try:
+                    anUpload = Upload(repository=self._repository)
+                    anUpload.id = id
+                    uploader.delete(anUpload)
+                    done.add(id)
+                except:
+                    xtype,xval,xtb = sys.exc_info()
+                    errorMessage = '|'.join(map(str.strip,format_exception(xtype,xval,xtb)))
+                    self._eventLogger.error(errorMessage, id=id)
+                    raise
+            return ids - done
+        finally:
+            self._finish(ids - done)
+            
+    def _finish(self, remainingIDs):
+        writeIds(self._filename, remainingIDs)
+        if self._markLogger and not remainingIDs:
+            logger = HarvesterLog(self._stateDir, self._logDir, self._repository.id)
+            try:
+                logger.markDeleted()
+            finally:
+                logger.close()
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/eventlogger.py version_7.0/meresco/harvester/eventlogger.py
--- version_6.1/meresco/harvester/eventlogger.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/eventlogger.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,142 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009,2011 Tilburg University http://www.uvt.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from re import compile
+from datetime import datetime
+from cStringIO import StringIO
+from os.path import dirname, isdir
+from os import makedirs
+
+LOGLINE_RE=compile(r'^\[([^\]]*)\]\t([\w ]+)\t\[([^\]]*)\]\t(.*)$')
+
+class BasicEventLogger(object):
+    def __init__(self, logfile):
+        self._logfile = self.openlogfile(logfile)
+
+    def close(self):
+        if self._logfile:
+            self._logfile.close()
+            self._logfile = None
+
+    def logLine(self, event, comments, id=''):
+        self._time()
+        self._space()
+        self._event(event)
+        self._space()
+        self._id(id)
+        self._space()
+        self._comments(comments)
+        self._flush()
+
+    def _time(self):
+        now = datetime.utcnow()
+        ms = ('%03i'%now.microsecond)[:3]
+        self._logfile.write('[' + now.strftime('%Y-%m-%d %H:%M:%S.') + ms + ']')
+
+    def _id(self, id):
+        self._logfile.write('[')
+        self._writeStripped(id)
+        self._logfile.write(']')
+
+    def _event(self,event):
+        self._writeStripped(event)
+
+    def _comments(self, comments):
+        self._writeStripped(comments)
+        self._logfile.write('\n')
+
+    def _space(self):
+        self._logfile.write('\t')
+
+    def _writeStripped(self, aString):
+        self._logfile.write(' '.join(str(aString).split()))
+
+    def _flush(self):
+        self._logfile.flush()
+
+class EventLogger(BasicEventLogger):
+    def __init__(self,logfile):
+        BasicEventLogger.__init__(self, logfile)
+
+    def openlogfile(self, logfile):
+        isdir(dirname(logfile)) or makedirs(dirname(logfile))
+        return open(logfile, 'a+')
+
+    def succes(self,comments='', id=''):
+        self.logLine('SUCCES', comments=comments, id=id)
+
+    def failure(self,comments='', id=''):
+        self.logLine('FAILURE', comments=comments, id=id)
+    fail = failure
+
+    def error(self,comments='', id=''):
+        self.logLine('ERROR', comments=comments, id=id)
+
+    def info(self, comments='', id=''):
+        self.logLine('INFO', comments=comments, id=id)
+
+    def warning(self, comments='', id=''):
+        self.logLine('WARNING', comments=comments, id=id)
+
+class StreamEventLogger(EventLogger):
+    def __init__(self, stream):
+        self._stream = stream
+        EventLogger.__init__(self, None)
+
+    def openlogfile(self, logfile):
+        return self._stream
+
+class CompositeLogger(EventLogger):
+    def __init__(self, loggers):
+        EventLogger.__init__(self, None)
+        self._loggers = loggers
+        
+    def openlogfile(self, logfile):
+        return None
+
+    def logLine(self, event, comments, id=''):
+        for events, logger in self._loggers:
+            if events == ['*'] or event in events:
+                logger.logLine(event, comments, id)
+
+class NilEventLogger(EventLogger):
+        def __init__(self):
+            EventLogger.__init__(self, None)
+
+        def openlogfile(self, logfile):
+            pass
+
+        def logLine(self, event, comments, id=''):
+            pass
+
+        def close(self):
+            pass
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/filesystemuploader.py version_7.0/meresco/harvester/filesystemuploader.py
--- version_6.1/meresco/harvester/filesystemuploader.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/filesystemuploader.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,141 @@
+# -*- coding: utf-8 -*-
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#    Copyright (C) 2011 Stichting Kennisnet Ict http://www.kennisnet.nl 
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+#
+from virtualuploader import VirtualUploader, UploaderException
+import os
+from slowfoot import binderytools
+from xml.sax.saxutils import escape as xmlEscape
+from StringIO import StringIO
+from lxml.etree import parse, tostring
+from time import gmtime, strftime, time
+
+OAI_ENVELOPE = """<?xml version="1.0" encoding="UTF-8"?>
+<OAI-PMH 
+    xmlns="http://www.openarchives.org/OAI/2.0/"
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd"
+>
+    <responseDate>%(responseDate)s</responseDate>
+    <request 
+        verb="GetRecord" 
+        metadataPrefix="%(metadataPrefix)s"
+        identifier="%(identifier)s"
+    >%(baseurl)s</request>
+    <GetRecord/>
+</OAI-PMH>"""
+
+class FileSystemUploader(VirtualUploader):
+    
+    def __init__(self, aTarget, aLogger, aCollection):
+        VirtualUploader.__init__(self, aLogger)
+        self._target = aTarget
+        if not os.path.isdir(self._target.path):
+            os.makedirs(self._target.path)
+
+    def tznow(self):
+        return strftime("%Y-%m-%dT%H:%M:%SZ", gmtime())
+
+    def send(self, anUpload):
+        """
+        Writes the original header and metadata to a file.
+        """
+        try:
+            filename = self._filenameFor(anUpload)
+            dirname = os.path.dirname(filename)
+            if not os.path.isdir(dirname):
+                os.makedirs(os.path.dirname(filename))
+            f = open(filename, 'w')
+            try:
+                f.write(tostring(self._createOutput(anUpload), encoding="UTF-8", xml_declaration=True))
+            finally:
+                f.close()
+        except Exception, e:
+            raise UploaderException(uploadId=anUpload.id, message=str(e))
+
+    def _createOutput(self, anUpload):
+        record = parse(StringIO(anUpload.record.xml())).getroot()
+        if str(self._target.oaiEnvelope) != 'true':
+            return record
+        envelopedata = {
+            'identifier': xmlEscape(str(anUpload.record.header.identifier)),
+            'metadataPrefix': xmlEscape(str(anUpload.repository.metadataPrefix)),
+            'baseurl': xmlEscape(str(anUpload.repository.baseurl)),
+            'responseDate': self.tznow()
+        }
+        theXml = parse(StringIO(OAI_ENVELOPE % envelopedata)).getroot()
+        GetRecord = theXml.xpath('//oai:GetRecord', namespaces={'oai':
+            "http://www.openarchives.org/OAI/2.0/"})[0]
+        GetRecord.append(record)
+        return theXml
+
+
+    def _properFilename(self, anId):
+        if anId in ['.', '..'] or chr(0) in anId or len(anId) > 255 or \
+            len(anId) == 0:
+            anId = "_malformed_id." + str(time())
+        return str(anId).replace(os.path.sep, '_SLASH_') + ".record"
+
+    def _filenameFor(self, anUpload):
+        filename = self._properFilename(anUpload.id)
+        return os.path.join(self._target.path, anUpload.repository.repositoryGroupId, anUpload.repository.id, filename)
+            
+    def delete(self, anUpload):
+        filename = self._filenameFor(anUpload)
+        if str(self._target.oaiEnvelope) == 'false':
+            os.path.isfile(filename) and os.remove(filename)
+            f = open(os.path.join(self._target.path,
+                'deleted_records'),'a')
+            try:
+                f.write('%s\n' % anUpload.id)
+            finally:
+                f.close()
+        else:
+            envelopedata = {
+                'identifier': xmlEscape(str(anUpload.record.header.identifier)),
+                'metadataPrefix': xmlEscape(str(anUpload.repository.metadataPrefix)),
+                'baseurl': xmlEscape(str(anUpload.repository.baseurl)),
+                'responseDate': self.tznow()
+            }
+            theXml = binderytools.bind_string(OAI_ENVELOPE % envelopedata)
+            theXml.OAI_PMH.GetRecord.xml_children.append(anUpload.record)
+            fd = open(filename, 'w')
+            try:
+                fd.write(theXml.xml())
+            finally:
+                fd.close()
+
+        self.logDelete(anUpload.id)
+    
+    def info(self):
+        return 'Writing records to path:%s' % (self._target.path)
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/harvesterlog.py version_7.0/meresco/harvester/harvesterlog.py
--- version_6.1/meresco/harvester/harvesterlog.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/harvesterlog.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,145 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+import time, os, sys, re, string
+if sys.version_info[:2] == (2,3):
+    from sets import Set as set
+from eventlogger import EventLogger
+from ids import Ids
+import traceback
+from os.path import join, isdir, isfile, dirname
+from os import makedirs, remove
+from state import State
+
+def idfilename(stateDir, repositorykey):
+    return join(stateDir, repositorykey+'.ids')
+
+def ignoreFilepath(logDir, uploadid):
+    repositoryId, recordId = uploadid.split(":", 1)
+    return join(logDir, "ignored", repositoryId, recordId)
+
+def ensureDirectory(directoryPath):
+    isdir(directoryPath) or makedirs(directoryPath)
+
+class HarvesterLog(object):
+    def __init__(self, stateDir, logDir, name):
+        self._name=name
+        self._logDir = logDir
+        ensureDirectory(stateDir)
+        self._ids = Ids(stateDir, name)
+        self._ignoredIds = Ids(stateDir, name + "_ignored")
+        self._state = State(stateDir, name)
+        self._eventlogger = EventLogger(logDir + '/' + name +'.events')
+        self.from_ = self._state.startdate
+        self.token = self._state.token
+        self.total = self._state.total
+        self._resetCounts()
+
+    def isCurrentDay(self, yyyy_mm_dd):
+        return yyyy_mm_dd == self._state.getTime()[:10]    
+        
+    def startRepository(self):
+        self._resetCounts()
+        self._state._write('Started: %s, Harvested/Uploaded/Deleted/Total: ' % self._state.getTime())
+
+    def _resetCounts(self):
+        self._harvestedCount = 0
+        self._uploadedCount = 0
+        self._deletedCount = 0
+
+    def totalIds(self):
+        return len(self._ids)
+
+    def totalIgnoredIds(self):
+        return len(self._ignoredIds)
+
+    def eventLogger(self):
+        return self._eventlogger
+            
+    def markDeleted(self):
+        self._ids.clear()
+        self._state.markDeleted()
+        self._eventlogger.succes('Harvested/Uploaded/Deleted/Total: 0/0/0/0, Done: Deleted all id\'s.',id=self._name)
+    
+    def endRepository(self, token):
+        self._state._write(self.countsSummary())
+        self._state._write(', Done: %s, ResumptionToken: %s' % (self._state.getTime(), token))
+        self._eventlogger.succes('Harvested/Uploaded/Deleted/Total: %s, ResumptionToken: %s' % (self.countsSummary(), token), id=self._name)
+
+    def endWithException(self):
+        error = str(sys.exc_type) + ': ' + str(sys.exc_value)
+        xtype,xval,xtb = sys.exc_info()
+        error2 = '|'.join(map(str.strip,traceback.format_exception(xtype,xval,xtb)))
+        self._eventlogger.error(error2, id=self._name)
+        self._state._write(self.countsSummary())
+        self._state._write( ', Error: ' + error)
+
+    def countsSummary(self):
+        return '%d/%d/%d/%d' % (self._harvestedCount, self._uploadedCount, self._deletedCount, self.totalIds())
+
+    def close(self):
+        self._eventlogger.close()
+        self._ids.close()
+        self._ignoredIds.close()
+        self._state.close()
+
+    def notifyHarvestedRecord(self, uploadid):
+        self._ignoredIds.remove(uploadid)
+        ignoreFile = ignoreFilepath(self._logDir, uploadid)
+        if isfile(ignoreFile):
+            remove(ignoreFile)
+        self._harvestedCount += 1
+
+    def logID(self, uploadid):
+        self._ids.add(uploadid)
+        self._uploadedCount += 1
+        
+    def logDeletedID(self, uploadid):
+        self._ids.remove(uploadid)
+        self._deletedCount += 1
+
+    def logIgnoredID(self, uploadid, message):
+        ignoreFile = ignoreFilepath(self._logDir, uploadid)
+        ensureDirectory(dirname(ignoreFile))
+        open(ignoreFile, 'w').write(message)
+        self._ignoredIds.add(uploadid)
+        self._eventlogger.warning('IGNORED', uploadid)
+
+    def hasWork(self):
+        return not self.isCurrentDay(self.from_) or self.token
+    
+    def state(self):
+        return self._state
+
+    def ignoredIds(self):
+        return [id for id in self._ignoredIds]
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/harvester.py version_7.0/meresco/harvester/harvester.py
--- version_6.1/meresco/harvester/harvester.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/harvester.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,133 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#    Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+import os, sys, shelve, time, traceback,re
+from harvesterlog import HarvesterLog
+from eventlogger import CompositeLogger, NilEventLogger
+import getopt, threading
+from urllib2 import urlopen
+from urllib import urlencode
+from slowfoot.wrappers import wrapp
+from meresco.core import Observable
+from virtualuploader import InvalidDataException, TooMuchInvalidDataException
+
+
+NOTHING_TO_DO = 'Nothing to do!'
+HARVESTED = 'Harvested.'
+
+class Harvester(Observable):
+    def __init__(self, repository, stateDir, logDir, eventLogger, generalHarvestLog=NilEventLogger()):
+        Observable.__init__(self)
+        self._repository = repository
+        self._eventlogger = CompositeLogger([
+            (['*'], eventLogger),
+            (['ERROR', 'INFO', 'WARN'], generalHarvestLog)
+        ])
+        self._uploader = repository.createUploader(self._eventlogger)
+        self._mapper = repository.mapping()
+        self._MAXTIME= 30*60 # 30 minutes
+
+    def getRecord(self, id):
+        return self.any.getRecord(metadataPrefix=self._repository.metadataPrefix, identifier=id)
+
+    def uploaderInfo(self):
+        return self._uploader.info()
+
+    def listRecords(self, from_, token, set):
+        if token:
+            return self.any.listRecords(resumptionToken=token)
+        elif from_:
+            if set:
+                return self.any.listRecords(metadataPrefix=self._repository.metadataPrefix, from_ = from_, set = set)
+            return self.any.listRecords(metadataPrefix=self._repository.metadataPrefix, from_ = from_)
+        elif set:
+            return self.any.listRecords(metadataPrefix=self._repository.metadataPrefix, set = set)
+        return self.any.listRecords(metadataPrefix=self._repository.metadataPrefix)
+
+    def fetchRecords(self, from_, token):
+        records = self.listRecords(from_, token, self._repository.set)
+        for record in records:
+            self.uploadRecord(record)
+        newtoken = getattr(records.parentNode, 'resumptionToken', None)
+        return newtoken
+
+    def uploadRecord(self, record):
+        upload = self._mapper.createUpload(self._repository, record, logger=self._eventlogger)
+        self.do.notifyHarvestedRecord(upload.id)
+        if record.header.status == "deleted":
+            self._uploader.delete(upload)
+            self.do.logDeletedID(upload.id)
+        elif not upload.skip:
+            try:
+                self._uploader.send(upload)
+                self.do.logID(upload.id)
+            except InvalidDataException, e:
+                maxIgnore = self._repository.maxIgnore()
+                if self.any.totalIgnoredIds() >= maxIgnore:
+                    raise TooMuchInvalidDataException(upload.id, maxIgnore)
+                self.do.logIgnoredID(upload.id, e.originalMessage)
+
+    def _harvestLoop(self):
+        try:
+            self.do.startRepository()
+            state = self.any.state()
+            newtoken = self.fetchRecords(state.startdate, state.token)
+            self.do.endRepository(newtoken)
+            return newtoken
+        except:
+            self.do.endWithException()
+            raise
+
+    def _harvest(self):
+        try:
+            self._eventlogger.logLine('STARTHARVEST', '',id=self._repository.id)
+            self._eventlogger.info(self.uploaderInfo(), id=self._repository.id)
+            self._eventlogger.info("Mappingname '%s'"%self._mapper.name, id=self._repository.id)
+            self._uploader.start()
+            try:
+                return self._harvestLoop()
+            finally:
+                self._uploader.stop()
+        finally:
+            self._eventlogger.logLine('ENDHARVEST','',id=self._repository.id)
+
+    def harvest(self):
+        try:
+            if self.any.hasWork():
+                resumptionToken = self._harvest()
+                hasResumptionToken = bool(resumptionToken and str(resumptionToken) != 'None')
+                return HARVESTED, hasResumptionToken
+            else:
+                return NOTHING_TO_DO, False
+        finally:
+            self.do.close()
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/ids.py version_7.0/meresco/harvester/ids.py
--- version_6.1/meresco/harvester/ids.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/ids.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,90 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+#
+import sys, os
+if sys.version_info[:2] == (2,3):
+    from sets import Set as set
+
+from os import makedirs
+from os.path import isdir
+
+def idfilename(stateDir, name):
+    isdir(stateDir) or makedirs(stateDir)
+    return os.path.join(stateDir, name + '.ids')
+
+class Ids(object):
+    def __init__(self, stateDir, name):
+        self._filename = idfilename(stateDir, name)
+        self._ids = []
+        for id in [id.strip() for id in open(self._filename, 'a+').readlines()]:
+            if id  in self._ids:
+                continue
+            self._ids.append(id)
+        self.open()
+        
+    def __len__(self):
+        return len(self._ids)
+
+    def __iter__(self):
+        for id in self._ids:
+            yield id
+
+    def clear(self):
+        self._ids = []
+       
+    def open(self):
+        self._idsfile = open(self._filename, 'a')
+
+    def close(self):
+        self._idsfile.close()
+        idfilenew = open(self._filename + '.new', 'w')
+        try:
+            for anId in self._ids:
+                idfilenew.write( anId + '\n')
+        finally:
+            idfilenew.close()
+        os.rename(self._filename + '.new', self._filename)
+
+    def add(self, uploadid):
+        if uploadid in self._ids:
+            return
+        self._ids.append(uploadid)
+        self._idsfile.write( uploadid + '\n')
+        self._idsfile.flush()
+
+    def remove(self, uploadid):
+        if uploadid in self._ids:
+            self._ids.remove(uploadid)
+            self.close()
+            self.open()
+
+        
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/__init__.py version_7.0/meresco/harvester/__init__.py
--- version_6.1/meresco/harvester/__init__.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/__init__.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,34 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2009,2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#    Copyright (C) 2011 Stichting Kennisnet Ict http://www.kennisnet.nl 
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+from namespaces import namespaces
+from __version__ import VERSION, VERSION_STRING
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/mapping.py version_7.0/meresco/harvester/mapping.py
--- version_6.1/meresco/harvester/mapping.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/mapping.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,203 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#    Copyright (C) 2011 Stichting Kennisnet Ict http://www.kennisnet.nl 
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from xml.sax.saxutils import escape as xmlEscape
+from eventlogger import NilEventLogger
+from slowfoot import binderytools
+from slowfoot import wrappers
+from urlparse import urljoin
+from urllib import urlencode
+from saharaobject import SaharaObject
+
+
+nillogger = NilEventLogger()
+execcode = DEFAULT_DC_CODE = DEFAULT_CODE = """
+#Map template
+#
+#Input
+# input.record = OAI Record object
+# input.repository = Repository object
+#
+#Available Methods:
+# isUrl(aString) determines if aString is a url.
+# join(collection) joins items in a collection seperated by '; '
+# logger.logLine(event, comments, [id=...]) Logs a line.
+# doAssert(expression, comments) perform an assertion. The comments are optional
+# urljoin(baseurl, path) Joins the base url with the path.
+#     urljoin('http://example.org/a/b','/c/d') --> 'http://example.org/c/d'
+#     urljoin('http://example.org/a/b','c/d') --> 'http://example.org/a/c/d'
+#     urljoin('http://example.org/a/b','http://c.org/d') --> 'http://c.org/d'
+#     urljoin('http://example.org/a/b/','c/d') --> 'http://example.org/a/b/c/d'
+# urlencode( <dict> of <tuplelist> ) Encode a sequence of two-element tuples or dictionary
+#     into a URL query string.
+#     urlencode({'a':'b', 'c':'d'}) --> 'a=b&c=d'
+#     urlencode([('a','b'), ('c','d')]) --> 'a=b&c=d'
+# skipRecord( comments ) Skip a record for a certain reason.
+#
+upload.parts['record'] = input.record.xml()
+"""
+
+def parse_xml(aString):
+    return wrappers.wrapp(binderytools.bind_string(aString))
+
+def read(filename):
+    file = open(filename)
+    try:
+        return file.read()
+    finally:
+        file.close()
+
+def noimport(name, globals, locals, fromlist):
+    raise DataMapException('Import not allowed')
+
+class DataMapException(Exception):
+    pass
+
+class DataMapAssertionException(Exception):
+    pass
+
+class DataMapSkip(Exception):
+    pass
+
+class TestRepository(object):
+    id = 'repository.id'
+    repositoryGroupId = 'repository.institute'
+    baseurl = 'http://repository.example.org/oai'
+    set = 'some.set'
+    collection = 'testcollection'
+    metadataPrefix = 'md'
+
+def isUrl(aString):
+    return aString.startswith('http:') or aString.startswith('https:') or aString.startswith('ftp:')
+
+def join(collection):
+    result = []
+    for item in collection:
+        result.append(str(item))
+    return '; '.join(result)
+
+def doAssert(aBoolean, message="Assertion failed"):
+    if not aBoolean:
+        raise DataMapAssertionException(message)
+
+def doNotAssert(aBoolean, message="This should not happen"):
+    pass
+
+class Input(object):
+    def __init__(self, record=None, repository=None, log=None):
+        self.repository = repository
+        self.log = log
+        self.record = record
+        self.header = record.header if record != None else None
+        self.metadata = record.metadata if record != None else None
+        self.about = record.about if record != None else None
+
+class UploadDict(dict):
+    def __setitem__(self, key, value):
+        return dict.__setitem__(self, key, str(value))
+
+
+class Upload(object):
+    def __init__(self, repository=None, record=None):
+        self.id = ''
+        if repository != None and record != None:
+            self.id = repository.id + ':' + record.header.identifier
+        self.fulltexturl = None
+        self.parts = UploadDict()
+        self.record = record
+        self.repository = repository
+        self.skip = False
+
+    def ensureStrings(self):
+        if self.id:
+            self.id = str(self.id)
+
+class Mapping(SaharaObject):
+    def __init__(self, mappingId):
+        SaharaObject.__init__(self,['name', 'description', 'code'])
+        self.id = mappingId
+
+    def setCode(self, aString):
+        self.code = aString
+
+    def createUpload(self, repository, record, logger=nillogger, doAsserts=False):
+        upload = Upload(repository=repository, record=record)
+        if record.header.status == 'deleted':
+            return upload
+
+        logger = logger
+        builtinscopy = __builtins__.copy()
+        builtinscopy['__import__'] = noimport
+
+        assertionMethod = doAsserts and doAssert or doNotAssert
+
+        try:
+            exec(self.code, {
+                'input': Input(repository=repository, record=record),
+                'upload': upload,
+                'isUrl': isUrl,
+                'join': join,
+                'urljoin': urljoin,
+                'urlencode': urlencode,
+                'doAssert': assertionMethod,
+                'logger': logger,
+                'skipRecord': self.skipSimple,
+                'xmlEscape': xmlEscape,
+                '__builtins__': builtinscopy
+            })
+            upload.ensureStrings()
+        except DataMapAssertionException, ex:
+            logger.error(comments='Assertion: ' + str(ex), id=upload.id)
+            raise ex
+        except DataMapSkip, e:
+            logger.logLine('SKIP', id=upload.id, comments=str(e))
+            upload.skip = True
+        return upload
+
+    def skipSimple(self, comment):
+        raise DataMapSkip(comment)
+
+    def execcode(self):
+        return self.code
+
+    def isValid(self):
+        try:
+            self.validate()
+            return True
+        except:
+            return False
+
+    def validate(self):
+        record = parse_xml("""<record><header><identifier>oai:id:12345</identifier><datestamp>1999-09-09T20:21:22Z</datestamp></header><metadata><dc><identifier>test:identifier</identifier></dc></metadata><about/></record>""")
+        upload = self.createUpload(TestRepository(), record)
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/namespaces.py version_7.0/meresco/harvester/namespaces.py
--- version_6.1/meresco/harvester/namespaces.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/namespaces.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,45 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Stichting Kennisnet Ict http://www.kennisnet.nl 
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+class _namespaces(dict):
+    def __getattr__(self, key):
+        try:
+            return self[key]
+        except KeyError, e:
+            raise AttributeError(key)
+
+    def xpath(self, node, path):
+        return node.xpath(path, namespaces=self)
+
+namespaces = _namespaces(
+    dc="http://purl.org/dc/elements/1.1/",
+    oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/",
+    oai="http://www.openarchives.org/OAI/2.0/",
+)
+
+xpath = namespaces.xpath
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/oairequest.py version_7.0/meresco/harvester/oairequest.py
--- version_6.1/meresco/harvester/oairequest.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/oairequest.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,136 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from slowfoot import binderytools
+from urllib import urlencode, urlopen
+import os
+from slowfoot.wrappers import wrapp
+
+class OaiRequestException(Exception):
+    def __init__(self, url, message):
+        Exception.__init__(self, 'occurred with repository at "%s", message: "%s"' % (url, message))
+        self.url = url
+
+class OAIError(OaiRequestException):
+    def __init__(self, url, message, response):
+        OaiRequestException.__init__(self, url, message)
+        self.response = response
+
+    def _error(self):
+        return getattr(self.response.OAI_PMH, 'error', 'Unknown Error')
+    def errorMessage(self):
+        return str(self._error())
+    def errorCode(self):
+        return getattr(self._error(), 'code', '')
+    
+class OaiRequest(object):
+    def __init__(self, url):
+        self._url = url
+
+    def listRecords(self, **args):
+        if args.has_key('from_'):
+            args['from']=args['from_']
+            del args['from_']
+        args['verb']='ListRecords'
+        try:
+            response = self.request(args)
+        except OAIError, e:
+            if e.errorCode() != 'noRecordsMatch':
+                raise e
+            response = e.response
+        return wrapp(response.OAI_PMH).ListRecords.record
+
+    def getRecord(self, **args):
+        args['verb'] = 'GetRecord'
+        response = self.request(args)
+        return wrapp(response).OAI_PMH.GetRecord.record
+    
+    def identify(self):
+        response = self.request({'verb':'Identify'})
+        return wrapp(response.OAI_PMH.Identify)
+    
+    def request(self, args):
+        try:
+            argslist = filter(lambda (k,v):v,args.items())
+            result = self._request(argslist)
+            result.OAI_PMH #Make sure the xml is a OAI_PMH request
+        except Exception, e:
+            raise OaiRequestException(self._url + '?' + urlencode(argslist), message=repr(e))
+        if hasattr(result.OAI_PMH, 'error'):
+            raise OAIError(self._url + '?' + urlencode(argslist), str(result.OAI_PMH.error), result)
+        return result
+    
+    def _request(self, argslist):
+        requesturl = self._url + '?' + urlencode(argslist)
+        return binderytools.bind_uri(requesturl)
+    
+class LoggingOaiRequest(OaiRequest):
+    def __init__(self, url, tempdir):
+        OaiRequest.__init__(self, url)
+        self.tempdir = tempdir
+        self.numberfilename = os.path.join(self.tempdir, 'number')
+        
+    def getNumber(self):
+        number = os.path.isfile(self.numberfilename) and int(open(self.numberfilename).read()) or 0
+        try:
+            return str(number)
+        finally:
+            number += 1
+            f = open(self.numberfilename, 'w')
+            f.write(str(number))
+            f.close()
+        
+    def _request(self, argslist):
+        requesturl = binderytools.Uri.MakeUrllibSafe(self._url + '?' + urlencode(argslist))
+        filename = os.path.join(self.tempdir, 'oairequest.' + self.getNumber() + '.xml')
+        opened = urlopen(requesturl)
+        writefile = file(filename, 'w')
+        try:
+            for l in opened:
+                writefile.write(l)
+        finally:
+            opened.close()
+            writefile.close()
+        return binderytools.bind_file(filename)
+    
+def loggingListRecords(url, tempdir, **args):
+    """loggingListRecords(url, tempdir, **listRecordsArgs"""
+    loair = LoggingOaiRequest(url, tempdir)
+    listRecords = loair.listRecords(**args)
+    resumptionToken = str(listRecords.parentNode.resumptionToken)
+    print resumptionToken
+    while resumptionToken:
+        listRecords = loair.listRecords(resumptionToken=resumptionToken)
+        resumptionToken = str(listRecords.parentNode.resumptionToken)
+        print resumptionToken
+    
+        
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/onlineharvest.py version_7.0/meresco/harvester/onlineharvest.py
--- version_6.1/meresco/harvester/onlineharvest.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/onlineharvest.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,79 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#    Copyright (C) 2011 Stichting Kennisnet Ict http://www.kennisnet.nl 
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from harvester import Harvester
+from slowfoot import binderytools
+from slowfoot.wrappers import wrapp
+from mapping import TestRepository,DataMapAssertionException
+from eventlogger import StreamEventLogger
+
+class OnlineHarvest(object):
+    def __init__(self, outputstream):
+        self._output = outputstream
+        self.eventlogger = StreamEventLogger(self._output)
+
+    def performMapping(self, mapping, urlString):
+        doAssertions=True
+        xml = wrapp(binderytools.bind_uri(urlString))
+        records = xml.OAI_PMH.ListRecords.record
+        for record in records:
+            try:
+                upload = mapping.createUpload(TestRepository, record, self.eventlogger, doAssertions)
+                if record.header.status == "deleted":
+                    self.writeDelete(upload)
+                else:
+                    if upload != None:
+                        self.writeUpload(upload)
+            except DataMapAssertionException, ex:
+                self.writeLine('AssertionError: '+str(ex))
+
+    def _writeId(self, anUpload):
+        self.writeLine('')
+        self.writeLine('upload.id='+anUpload.id)
+
+    def writeDelete(self, anUpload):
+        self._writeId(anUpload)
+        self.writeLine('DELETED')
+
+    def writeUpload(self, anUpload):
+        self._writeId(anUpload)
+        for partname, part in anUpload.parts.items():
+            self.writeLine('-v- part %s -v-' % partname)
+            self.writeLine(part)
+            self.writeLine('-^- part -^-')
+
+
+    def writeLine(self, line):
+        self._output.write(line + '\n')
+        self._output.flush()
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/repository.py version_7.0/meresco/harvester/repository.py
--- version_6.1/meresco/harvester/repository.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/repository.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,120 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#    Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from oairequest import OAIError
+from saharaobject import SaharaObject
+from eventlogger import NilEventLogger
+from virtualuploader import UploaderFactory
+from timeslot import Timeslot
+from sys import exc_info
+from traceback import format_exception
+from time import localtime
+from action import ActionFactory
+
+nillogger = NilEventLogger()
+
+class RepositoryException(Exception):
+    pass
+
+class Repository(SaharaObject):
+    def __init__(self, domainId, repositoryId):
+        SaharaObject.__init__(self, [
+            'repositoryGroupId', 'baseurl', 'set',
+            'collection', 'metadataPrefix', 'use',  
+            'targetId', 'mappingId', 'action', 
+            'complete', 'maximumIgnore'], ['shopclosed'])
+        self.domainId = domainId
+        self.id = repositoryId
+        self.mockUploader = None
+        self.uploadfulltext = True
+
+    def closedSlots(self):
+        if not hasattr(self, '_closedslots'):
+            if self.shopclosed:
+                self._closedslots = map(lambda txt: Timeslot(txt), self.shopclosed)
+            else:
+                self._closedslots = []
+        return self._closedslots
+
+    def shopClosed(self, dateTuple = localtime()[:5]):
+        return reduce(lambda lhs, rhs: lhs or rhs, map(lambda x:x.areWeWithinTimeslot( dateTuple), self.closedSlots()), False)
+
+    def target(self):
+        return self._saharaget.getTarget(self.domainId, self.targetId)
+
+    def mapping(self):
+        return self._saharaget.getMapping(self.domainId, self.mappingId)
+
+    def maxIgnore(self):
+        return int(self.maximumIgnore) if self.maximumIgnore else 0
+
+    def createUploader(self, logger):
+        if self.mockUploader:
+            return self.mockUploader
+        return UploaderFactory().createUploader(self.target(), logger, self.collection)
+
+    def _createAction(self, stateDir, logDir, generalHarvestLog):
+        return ActionFactory().createAction(self, stateDir=stateDir, logDir=logDir, generalHarvestLog=generalHarvestLog)
+
+    def do(self, stateDir, logDir, generalHarvestLog=nillogger):
+        try:
+            if not (stateDir or logDir):
+                raise RepositoryException('Missing stateDir and/or logDir')
+            action = self._createAction(stateDir=stateDir, logDir=logDir, generalHarvestLog=generalHarvestLog)
+            if action.info():
+                generalHarvestLog.logLine('START',action.info(), id=self.id)
+            actionIsDone, message, hasResumptionToken = action.do()
+            if  actionIsDone:
+                self.action = ''
+                self._saharaget.repositoryActionDone(self.domainId, self.id)
+            if message:
+                generalHarvestLog.logLine('END', message, id = self.id)
+            completeHarvest = hasResumptionToken and self.complete == 'true'
+            if completeHarvest:
+                generalHarvestLog.info('Repository will be completed in one attempt', id=self.id)
+            return message, completeHarvest
+        except OAIError, e:
+            errorMessage = _errorMessage()
+            generalHarvestLog.error(errorMessage, id=self.id)
+            if e.errorCode() == 'badResumptionToken':
+                action.resetState()
+                return errorMessage, self.complete == 'true'
+            return errorMessage, False
+        except:
+            errorMessage = _errorMessage()
+            generalHarvestLog.error(errorMessage, id=self.id)
+            return errorMessage, False
+
+def _errorMessage():
+    xtype,xval,xtb = exc_info()
+    return '|'.join(line.strip() for line in format_exception(xtype,xval,xtb))
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/repositorystatus.py version_7.0/meresco/harvester/repositorystatus.py
--- version_6.1/meresco/harvester/repositorystatus.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/repositorystatus.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,100 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+#
+#
+import re, sys
+NUMBERS_RE = re.compile(r'.*Harvested/Uploaded/Deleted/Total:\s*(\d+)/(\d+)/(\d+)/(\d+).*')
+from itertools import imap, ifilter
+from cgi import escape as escapeXml
+    
+class RepositoryStatus(object):
+    def __init__(self):
+        self.lastSuccesDate = ''
+        self.harvested = ''
+        self.deleted = ''
+        self.uploaded = ''
+        self.total = ''
+        self.errors = []
+        
+    def reformatDate(self, aDate):
+        return aDate[0:len('YYYY-MM-DD')] + 'T' + aDate[len('YYYY-MM-DD '):len('YYYY-MM-DD HH:MM:SS')] + 'Z'
+        
+    def addSucces(self, date, comments):
+        self.lastSuccesDate = self.reformatDate(date)
+        self.errors = []
+        match = NUMBERS_RE.match(comments)
+        if match:
+            self.harvested, self.uploaded, self.deleted, self.total = match.groups()
+
+    def addError(self, date, comments):
+        self.errors.append((self.reformatDate(date), comments))
+
+    def main(self, streamIn, streamOut):
+        streamOut.write("""<?xml version="1.0"?>
+<status>
+""")
+        self.innerXml(streamIn, streamOut)
+        streamOut.write("""</status>""")
+        streamOut.flush()
+        
+    def innerXml(self, streamIn, streamOut):
+        split = lambda l:l.strip().split('\t')
+        checkLen4 = lambda x:len(x)==4
+        for date, event, id, comments in ifilter(checkLen4, imap(split, streamIn)):
+            date = date[1:-1]
+            if event == 'SUCCES':
+                self.addSucces(date, comments)
+            if event == 'ERROR':
+                self.addError(date, comments)
+        streamOut.write("""  <lastHarvestDate>%(lastSuccesDate)s</lastHarvestDate>
+  <harvested>%(harvested)s</harvested>
+  <uploaded>%(uploaded)s</uploaded>
+  <deleted>%(deleted)s</deleted>
+  <total>%(total)s</total>
+"""%self.__dict__)
+        streamOut.write("""  <totalerrors>%i</totalerrors>
+"""%len(self.errors))
+        if len(self.errors):
+            streamOut.write("""  <recenterrors>
+""")
+            errors = self.errors[:]
+            errors.reverse()
+            for date,error in errors[:10]:
+                streamOut.write("""    <error date="%s">%s</error>
+"""%(date, escapeXml(error)))
+            streamOut.write("""  </recenterrors>
+""")
+        else:
+            streamOut.write("""  <recenterrors></recenterrors>
+""")
+        streamOut.flush()
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/saharaget.py version_7.0/meresco/harvester/saharaget.py
--- version_6.1/meresco/harvester/saharaget.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/saharaget.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,101 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+#
+# $Id: saharaget.py 4825 2007-04-16 13:36:24Z TJ $
+
+from slowfoot.wrappers import wrapp
+from repository import Repository
+from slowfoot import binderytools
+from urllib import urlencode
+from target import Target
+from mapping import Mapping
+
+class SaharaGet(object):
+    def __init__(self, saharaurl, doSetActionDone=True):
+        self.doSetActionDone = doSetActionDone
+        self.saharaurl = saharaurl
+        
+    def getRepository(self, domainId, repositoryId):
+        response = self._get(verb = 'GetRepository',
+                                    domainId = domainId,
+                                    repositoryId = repositoryId)
+        xml = response.saharaget.GetRepository.repository
+        repository = Repository(domainId, repositoryId)
+        repository.fill(self, xml)
+        return repository
+    
+    def getTarget(self, domainId, targetId):
+        response = self._get(verb = 'GetTarget',
+                                    domainId = domainId,
+                                    targetId = targetId)
+        xml = response.saharaget.GetTarget.target
+        target = Target(targetId)
+        target.fill(self, xml)
+        target.domainId = domainId
+        return target
+    
+    def getMapping(self, domainId, mappingId):
+        response = self._get(verb = 'GetMapping',
+                                    domainId = domainId,
+                                    mappingId = mappingId)
+        xml = response.saharaget.GetMapping.mapping
+        mapping = Mapping(mappingId)
+        mapping.fill(self, xml)
+        return mapping
+    
+    def getRepositoryIds(self, domainId):
+        response = self._get(verb = 'GetRepositories',
+                                    domainId = domainId)
+        repositories = response.saharaget.GetRepositories.repository
+        result = []
+        for repository in repositories:
+            result.append(str(repository.id))
+        return result
+    
+    def repositoryActionDone(self, domainId, repositoryId):
+        if self.doSetActionDone:
+            saharageturl = '%s/setactiondone?' % self.saharaurl + \
+                urlencode({'domainId': domainId, 'repositoryId': repositoryId})
+            binderytools.bind_uri(saharageturl)
+
+    def _get(self, **kwargs):
+        response = self._read(**kwargs)
+        if str(response.saharaget.error.code):
+            raise SaharaGetException(str(response.saharaget.error))
+        return response
+        
+    def _read(self, **kwargs):
+        saharageturl = '%s/saharaget?%s' % (self.saharaurl, urlencode(kwargs))
+        return wrapp(binderytools.bind_uri(saharageturl))
+        
+class SaharaGetException(Exception):
+    pass
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/saharaobject.py version_7.0/meresco/harvester/saharaobject.py
--- version_6.1/meresco/harvester/saharaobject.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/saharaobject.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,51 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+class SaharaObject(object):
+    
+    def __init__(self, attr, listattr = []):
+        self._attr = attr
+        self._listattr = listattr
+        self._initAttributes()
+        self._saharaget = None
+    
+    def _initAttributes(self):
+        for attr in self._attr + self._listattr:
+            setattr(self, attr, None)
+            
+    def fill(self, saharaget, xml):
+        for attr in self._attr:
+            setattr(self, attr, str(getattr(xml, attr, None)))
+        for attr in self._listattr:
+            setattr(self, attr, map(str, getattr(xml, attr, None)))
+        self._saharaget = saharaget
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/server.py version_7.0/meresco/harvester/server.py
--- version_6.1/meresco/harvester/server.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/server.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,93 @@
+#!/usr/bin/env python2.5
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from meresco.core import Observable, be
+from os.path import join, abspath, dirname
+from sys import stdout
+
+import time
+from weightless.io import Reactor
+from dynamichtml import DynamicHtml
+
+from meresco.components import readConfig
+from meresco.components.http import ApacheLogger, PathFilter, ObservableHttpServer, StringServer, FileServer
+from meresco.components.http.utils import ContentTypePlainText
+from __version__ import VERSION_STRING
+
+from saharaget import SaharaGet
+from status import Status
+
+myPath = dirname(abspath(__file__))
+dynamicHtmlPath = join(myPath, 'controlpanel', 'html', 'dynamic')
+staticHtmlPath = join(myPath, 'controlpanel', 'html')
+
+def dna(reactor, observableHttpServer, config, saharaUrl, logPath, statePath):
+    return \
+        (Observable(),
+            (observableHttpServer,
+                (ApacheLogger(stdout),
+                    (PathFilter("/info/version"),
+                        (StringServer(VERSION_STRING, ContentTypePlainText), )
+                    ),
+                    (PathFilter("/static"),
+                        (FileServer(staticHtmlPath),)
+                    ),
+                    (PathFilter('/', excluding=['/info/version', '/static']),
+                        (DynamicHtml(
+                            [dynamicHtmlPath],
+                            reactor=reactor,
+                            additionalGlobals = {'time': time},
+                            indexPage="/index.html",
+                            ),
+                            (SaharaGet(saharaurl=saharaUrl),),
+                            (Status(logPath, statePath),)
+                        )
+                    )
+                )
+            )
+        )
+
+def startServer(configFile):
+    config = readConfig(configFile)
+
+    portNumber = int(config['portNumber'])
+    saharaUrl = config['saharaUrl']
+    dataPath = config['dataPath']
+    logPath = config['logPath']
+    statePath = config['statePath']
+
+    reactor = Reactor()
+    observableHttpServer = ObservableHttpServer(reactor, portNumber)
+
+    server = be(dna(reactor, observableHttpServer, config, saharaUrl, logPath, statePath))
+    server.once.observer_init()
+
+    print "Ready to rumble at", portNumber
+    stdout.flush()
+    reactor.loop()
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/sruupdateuploader.py version_7.0/meresco/harvester/sruupdateuploader.py
--- version_6.1/meresco/harvester/sruupdateuploader.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/sruupdateuploader.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,135 @@
+# -*- coding: utf-8 -*-
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from xml.sax.saxutils import escape as xmlEscape
+from virtualuploader import VirtualUploader, UploaderException, InvalidDataException, InvalidComponentException
+from httplib import HTTPConnection, SERVICE_UNAVAILABLE, OK as HTTP_OK
+from lxml.etree import parse
+from StringIO import StringIO
+
+recordUpdate = """<?xml version="1.0" encoding="UTF-8"?>
+<updateRequest xmlns:srw="http://www.loc.gov/zing/srw/" xmlns:ucp="info:lc/xmlns/update-v1">
+    <srw:version>1.0</srw:version>
+    <ucp:action>info:srw/action/1/%(action)s</ucp:action>
+    <ucp:recordIdentifier>%(recordIdentifier)s</ucp:recordIdentifier>
+    <srw:record>
+        <srw:recordPacking>%(recordPacking)s</srw:recordPacking>
+        <srw:recordSchema>%(recordSchema)s</srw:recordSchema>
+        <srw:recordData>%(recordData)s</srw:recordData>
+    </srw:record>
+</updateRequest>"""
+
+namespaces = {
+    'srw': 'http://www.loc.gov/zing/srw/',
+    'diag': 'http://www.loc.gov/zing/srw/diagnostic/',
+    'ucp':  "info:lc/xmlns/update-v1",
+}
+def xpath(node, path):
+    return node.xpath(path, namespaces=namespaces)
+
+class SruUpdateUploader(VirtualUploader):
+    def __init__(self, sruUpdateTarget, eventlogger, collection="ignored"):
+        VirtualUploader.__init__(self, eventlogger)
+        self._target = sruUpdateTarget
+
+    def send(self, anUpload):
+        anId = anUpload.id
+        self.logLine('UPLOAD.SEND', 'START', id = anId)
+
+        recordData = '<document xmlns="http://meresco.org/namespace/harvester/document">%s</document>' % ''.join(
+                ['<part name="%s">%s</part>' % (xmlEscape(partName), xmlEscape(partValue)) for partName, partValue in anUpload.parts.items()])
+
+        action = "replace"
+        recordIdentifier= xmlEscape(anId)
+        recordPacking = 'xml'
+        recordSchema = xmlEscape(partName)
+        self._sendData(anId, recordUpdate % locals())
+        self.logLine('UPLOAD.SEND', 'END', id = anId)
+
+    def delete(self, anUpload):
+        self.logDelete(anUpload.id)
+        action = "delete"
+        recordIdentifier = xmlEscape(anUpload.id)
+        recordPacking = 'xml'
+        recordSchema = 'ignored'
+        recordData = '<ignored/>'
+        self._sendData(anUpload.id, recordUpdate % locals())
+
+    def info(self):
+        return 'Uploader connected to: %s:%s%s'%(self._target.baseurl, self._target.port, self._target.path)
+
+    def _sendData(self, uploadId, data):
+        tries = 0
+        while tries < 3:
+            status, message = self._sendDataToRemote(data)
+            if status != SERVICE_UNAVAILABLE:
+                break
+            self.logWarning("Status 503, SERVICE_UNAVAILABLE received while trying to upload")
+            tries += 1
+                
+        if status != HTTP_OK:
+            raise UploaderException(uploadId=uploadId, message="HTTP %s: %s" % (str(status), message))
+
+        version, operationStatus, diagnostics = self._parseMessage(parse(StringIO(message)))
+
+        if operationStatus == 'fail':
+            if diagnostics[0] == 'info:srw/diagnostic/12/1':
+                raise InvalidComponentException(uploadId=uploadId, message=message)
+            elif diagnostics[0] == 'info:srw/diagnostic/12/12':
+                raise InvalidDataException(uploadId=uploadId, message=message)
+
+    def _sendDataToRemote(self, data):
+        connection = HTTPConnection(self._target.baseurl, self._target.port)
+        connection.putrequest("POST", self._target.path)
+        connection.putheader("Host", self._target.baseurl)
+        connection.putheader("Content-Type", "text/xml; charset=\"utf-8\"")
+        connection.putheader("Content-Length", str(len(data)))
+        connection.endheaders()
+        connection.send(data)
+
+        result = connection.getresponse()
+        message = result.read()
+        return result.status, message
+        
+    def _parseMessage(self, message):
+        version = xpath(message, "/srw:updateResponse/srw:version/text()")[0]
+        operationStatus = xpath(message, "/srw:updateResponse/ucp:operationStatus/text()")[0]
+        diagresult = None
+        diagnostics = xpath(message, "/srw:updateResponse/srw:diagnostics/diag:diagnostic")
+        if len(diagnostics) > 0:
+            diagnostic_uri = xpath(diagnostics[0], "diag:uri/text()")[0]
+            diagnostic_details = xpath(diagnostics[0], "diag:details/text()")[0]
+            diagnostic_message = xpath(diagnostics[0], "diag:message/text()")[0]
+            diagresult = (diagnostic_uri, diagnostic_details, diagnostic_message)
+        return version, operationStatus, diagresult
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/startharvester.py version_7.0/meresco/harvester/startharvester.py
--- version_6.1/meresco/harvester/startharvester.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/startharvester.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,168 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from harvesterlog import HarvesterLog
+from eventlogger import EventLogger, NilEventLogger, CompositeLogger, StreamEventLogger
+from harvester import Harvester
+from saharaget import SaharaGet
+from time import sleep
+import traceback
+from timedprocess import TimedProcess
+from urllib import urlopen
+from os.path import join
+from sys import stderr, stdout, exit, argv
+from optparse import OptionParser
+
+AGAIN_EXITCODE = 42
+
+class StartHarvester(object):
+    def __init__(self):
+        if len(argv[1:]) == 0:
+            argv.append('-h')
+        self.parser = OptionParser()
+        args = self.parse_args()
+        self.__dict__.update(args.__dict__)
+
+        if not self.domainId:
+            self.parser.error("Specify domain")
+
+        if self._logDir == None:
+            self._logDir = urlopen(self.saharaurl + '/_getoptions/logDir').read()
+        if self._stateDir == None:
+            self._stateDir = urlopen(self.saharaurl + '/_getoptions/stateDir').read()
+
+        self.saharaget = SaharaGet(self.saharaurl, self.setActionDone)
+
+        self.repository = self.repositoryId and self.saharaget.getRepository(self.domainId, self.repositoryId)
+
+
+    def parse_args(self):
+        self.parser.add_option("-d", "--domain",
+            dest="domainId",
+            help="Mandatory argument denoting the domain.", 
+            metavar="DOMAIN")
+        self.parser.add_option("-s", "--saharaurl", 
+            dest="saharaurl",
+            help="The url of the SAHARA web interface, e.g. https://username:password@sahara.example.org", 
+            default="http://localhost")
+        self.parser.add_option("-r", "--repository", 
+            dest="repositoryId",
+            help="Process a single repository within the given domain. Defaults to all repositories from the domain.", 
+            metavar="REPOSITORY")
+        self.parser.add_option("-t", "--set-process-timeout", 
+            dest="processTimeout",
+            type="int", 
+            default=60*60, 
+            metavar="TIMEOUT",
+            help="Subprocess will be timed out after amount of seconds.")
+        self.parser.add_option("--logDir", "", 
+            dest="_logDir",
+            help="Override the logDir in the apache configuration.",
+            metavar="DIRECTORY", 
+            default=None)
+        self.parser.add_option("--stateDir", 
+            dest="_stateDir",
+            help="Override the stateDir in the apache configuration.", 
+            metavar="DIRECTORY", 
+            default=None)
+        self.parser.add_option("--force-target", "", 
+            dest="forceTarget",
+            help="Overrides the repository's target", 
+            metavar="TARGETID")
+        self.parser.add_option("--force-mapping", "", 
+            dest="forceMapping",
+            help="Overrides the repository's mapping", 
+            metavar="MAPPINGID")
+        self.parser.add_option("--no-action-done", "", 
+            action="store_false",
+            dest="setActionDone", 
+            default=True,
+            help="Do not set SAHARA's actions", 
+            metavar="TARGETID")
+        self.parser.add_option("--runOnce", "", 
+            dest="runOnce", 
+            action="store_true",
+            default=False,
+            help="Prevent harvester from looping (if combined with --repository)")
+
+        (options, args) = self.parser.parse_args()
+        return options
+
+    def start(self):
+        if not self.repository:
+            self._restartWithLoop()
+        elif not self.runOnce:
+            self._startRepositoryWithChild()
+        else:
+            self._startRepository()
+
+    def _restartWithLoop(self):
+        for key in self.saharaget.getRepositoryIds(self.domainId):
+            self._startChildProcess(['--repository='+key, '--runOnce'])
+
+    def _startRepositoryWithChild(self):
+        self._startChildProcess(['--runOnce'])
+
+    def _startChildProcess(self, extraArgs):
+        args = argv[:1] + extraArgs + argv[1:]
+        exitstatus = AGAIN_EXITCODE
+        while exitstatus == AGAIN_EXITCODE:
+            t = TimedProcess()
+            try:
+                SIG_INT = 2
+                exitstatus = t.executeScript(args, self.processTimeout, SIG_INT)
+            except KeyboardInterrupt, e:
+                t.terminate()
+                raise
+
+
+    def _startRepository(self):
+
+        if self.forceTarget:
+            self.repository.targetId = self.forceTarget
+        if self.forceMapping:
+            self.repository.mappingId = self.forceMapping
+
+        self._generalHarvestLog = CompositeLogger([
+            (['*'], EventLogger(join(self._logDir, self.domainId, 'harvester.log'))),
+            (['*'], StreamEventLogger(stdout)),
+            (['ERROR', 'WARN'], StreamEventLogger(stderr)),
+        ])
+
+        messageIgnored, again = self.repository.do(
+            stateDir=join(self._stateDir, self.domainId),
+            logDir=join(self._logDir, self.domainId),
+            generalHarvestLog=self._generalHarvestLog)
+        sleep(1)
+        if again:
+            exit(AGAIN_EXITCODE)
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/state.py version_7.0/meresco/harvester/state.py
--- version_6.1/meresco/harvester/state.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/state.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,127 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2010-2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+#    Copyright (C) 2011 Tilburg University http://www.uvt.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from os.path import join, isfile
+from os import SEEK_END
+from time import strftime, gmtime
+import re
+
+class State(object):
+    def __init__(self, stateDir, name):
+        self._filename = join(stateDir, '%s.stats' % name)
+        open(self._filename, 'a').close()
+        self._statsfile = open(self._filename, 'r+')
+        self._readState()
+        self._prepareForWriting()
+
+    def close(self):
+        self._write('\n')
+        self._statsfile.close()
+
+    def setToLastCleanState(self):
+        cleanState = self._getLastCleanState()
+        if cleanState != None:
+            self._write(self._getLastCleanState())
+        else:
+            self.markDeleted()
+
+    def markDeleted(self):
+        self._write("Started: %s, Harvested/Uploaded/Deleted/Total: 0/0/0/0, Done: Deleted all id's." % self.getTime())
+
+    def _getLastCleanState(self):
+        result = None
+        self._statsfile.seek(0)
+        for line in self._filterNonErrorLogLine(self._statsfile):
+            token = getResumptionToken(line)
+            if token == None:
+                result = line
+        self._statsfile.seek(0, SEEK_END)
+        return result
+
+    def _getLastDoneState(self):
+        result = None
+        self._statsfile.seek(0)
+        for line in self._filterNonErrorLogLine(self._statsfile):
+            result = line
+        self._statsfile.seek(0, SEEK_END)
+        return result
+
+    def _readState(self):
+        self.startdate = None
+        self.token = None
+        self.total = 0
+        if isfile(self._filename):
+            logline = self._getLastDoneState()
+            if logline and not self._isDeleted(logline):
+                self.startdate = getStartDate(logline)
+                self.token = getResumptionToken(logline)
+                harvested, uploaded, deleted, total = getHarvestedUploadedRecords(logline)
+                self.total = int(total)
+
+    def _prepareForWriting(self):
+        """Make sure writing always starts on newline."""
+        if self._statsfile.tell() == 0:
+            return
+        self._statsfile.seek(-1, SEEK_END)
+        lastchar = self._statsfile.read()
+        if lastchar != '\n':
+            self._write('\n')
+    
+    def _write(self, *args):
+        self._statsfile.write(*args)
+
+    @staticmethod
+    def _filterNonErrorLogLine(iterator):
+        return (line for line in iterator if 'Done:' in line)
+    
+    @staticmethod
+    def _isDeleted(logline):
+        return "Done: Deleted all id's" in logline
+
+    def getTime(self):
+        return strftime('%Y-%m-%d %H:%M:%S', self._gmtime())
+
+    @staticmethod
+    def _gmtime():
+        return gmtime()
+                
+def getStartDate(logline):
+    matches = re.search('Started: (\d{4}-\d{2}-\d{2})', logline)
+    return matches.group(1)
+
+def getResumptionToken(logline):
+    matches=re.search('ResumptionToken: (.*)', logline.strip())
+    if matches and matches.group(1) != 'None': 
+        return matches.group(1)
+    return None
+
+def getHarvestedUploadedRecords(logline):
+    matches=re.search('Harvested/Uploaded/(?:Deleted/)?Total: \s*(\d*)/\s*(\d*)(?:/\s*(\d*))?/\s*(\d*)', logline)
+    return matches.groups('0')
+   
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/status.py version_7.0/meresco/harvester/status.py
--- version_6.1/meresco/harvester/status.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/status.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,61 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from os.path import join, isfile, isdir
+from os import listdir
+from lxml.etree import parse
+
+class Status(object):
+
+    def __init__(self, logPath, statePath):
+        self._logPath = logPath
+        self._statePath = statePath
+
+    def getStatus(self, domainId, repositoryIds):
+        ignoredDir = join(self._logPath, domainId, "ignored")
+        repositoryIds = [repositoryIds] if repositoryIds else []
+        if not repositoryIds and isdir(ignoredDir):
+            repositoryIds = listdir(ignoredDir)
+        yield "<GetStatus>"
+        for repoId in repositoryIds:
+            yield '<status repositoryId="%s"><ignored>%s</ignored></status>' % (repoId, self.ignoredCount(domainId, repoId))
+        yield "</GetStatus>"
+
+    def ignoredCount(self, domainId, repositoryId):
+        ignoredFile = join(self._statePath, domainId, "%s_ignored.ids" % repositoryId)
+        return len(open(ignoredFile).readlines()) if isfile(ignoredFile) else 0
+
+    def ignoredRecords(self, domainId, repositoryId):
+        ignoredFile = join(self._statePath, domainId, "%s_ignored.ids" % repositoryId)
+        if not isfile(ignoredFile):
+            return []
+        return reversed([line.strip() for line in open(ignoredFile) if line.strip()])
+
+    def getIgnoredRecord(self, domainId, repositoryId, recordId):
+        return parse(open(join(self._logPath, domainId, "ignored", repositoryId, recordId)))
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/target.py version_7.0/meresco/harvester/target.py
--- version_6.1/meresco/harvester/target.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/target.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,39 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2009 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from saharaobject import SaharaObject
+
+class Target(SaharaObject):
+    def __init__(self, id):
+        SaharaObject.__init__(self, ['baseurl', 'name', 'username', 'password',
+                                'port', 'path', 'targetType', 'privateKey', 'command', 'hostname', 'oaiEnvelope'], ['delegate'])
+        self.id = id
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/throughputanalyser.py version_7.0/meresco/harvester/throughputanalyser.py
--- version_6.1/meresco/harvester/throughputanalyser.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/throughputanalyser.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,118 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+#
+#
+import re, sys, os
+from time import strptime
+from datetime import datetime
+NUMBERS_RE = re.compile(r'.*Harvested/Uploaded/Deleted/Total:\s*(\d+)/(\d+)/(\d+)/(\d+).*')
+from itertools import imap, ifilter
+from cgi import escape as escapeXml
+from os.path import isfile
+
+def parseToTime(dateString):
+    dateList = list((strptime(dateString.split(".")[0],"%Y-%m-%d %H:%M:%S"))[:6])
+    dateList.append(int(dateString.split(".")[1][:3]) * 1000)
+    date = datetime(*tuple(dateList))
+    return date
+
+def diffTime(newest, oldest):
+    delta = newest - oldest
+    return delta.seconds + delta.microseconds/1000000.0
+
+class ThroughputReport(object):
+    def __init__(self):
+        self.records = 0
+        self.seconds = 0.0
+        
+    def add(self, records, seconds):
+        self.records += records
+        self.seconds += seconds
+        
+    def recordsPerSecond(self):
+        if self.seconds == 0.0:
+            return '-'
+        return  "%2.2f" % (self.records / self.seconds)
+    
+    def recordsPerDay(self):
+        if self.seconds == 0.0:
+            return '-'
+        return "%2.0f" % (self.records / self.seconds * 24 * 3600)
+    
+    def hmsString(self):
+        hours = int(self.seconds) / 3600
+        minutes = int(self.seconds) % 3600 / 60
+        seconds = int(self.seconds) % 60
+        return "%02i:%02i:%02i" % (hours, minutes, seconds)
+
+                    
+class ThroughputAnalyser(object):
+    def __init__(self, eventpath):
+        self.eventpath = eventpath
+        
+    def analyse(self, repositoryNames, dateSince):
+        report = ThroughputReport()
+        for name in repositoryNames:
+            report.add(*self._analyseRepository(name, dateSince))
+        return report
+        
+    def _analyseRepository(self, repositoryName, dateSince):
+        reportfile = os.path.join(self.eventpath, repositoryName + '.events')
+
+        records, seconds = 0, 0.0
+        if not isfile(reportfile):
+            return records, seconds
+        events = open(reportfile)
+        try:
+            split = lambda l:map(str.strip, l.split('\t'))
+            begintime = None
+            datefilter = lambda (date, x,y,z): date[1:-1] >= dateSince 
+            allevents = imap(split, ifilter(str.strip, events))
+            for date, event, anIdentifier, comments in ifilter(datefilter, allevents):
+                if event == "STARTHARVEST":
+                    begintime = parseToTime(date[1:-1])
+                    harvested = uploaded = deleted = total = -1
+                elif event == 'ENDHARVEST':
+                    if begintime and harvested > -1:
+                        endtime = parseToTime(date[1:-1])
+                        if endtime > begintime:
+                            records += (int(uploaded) + int(deleted))
+                            seconds += diffTime(endtime, begintime)
+                            begintime = None
+                elif event == 'SUCCES':
+                    match = NUMBERS_RE.match(comments)
+                    if match:
+                        harvested, uploaded, deleted, total = match.groups()
+    
+        finally:
+            events.close()
+        return records, seconds
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/timedprocess.py version_7.0/meresco/harvester/timedprocess.py
--- version_6.1/meresco/harvester/timedprocess.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/timedprocess.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,76 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from os import spawnvp, waitpid, kill, P_NOWAIT
+from sys import executable
+
+from threading import Timer
+
+class TimedProcess(object):
+    def __init__(self):
+        self._wasTimeout = False
+        self._wasSuccess = False
+        self._pid = -1
+        self._signal=9
+            
+    def wasSuccess(self):
+        return self._wasSuccess
+
+    def wasTimeout(self):
+        return self._wasTimeout
+    
+    def setTimedOut(self):
+        self._wasTimeout = True
+        self._wasSuccess = False
+        
+    def terminate(self):
+        if self._pid != -1:
+            kill(self._pid, self._signal)
+        self._wasTimeout = True
+        self.timer.cancel()
+
+    def executeScript(self, args, timeout, signal=9):
+        executable="/usr/bin/python"
+        self._signal = signal
+        self._pid = spawnvp(P_NOWAIT, executable, [executable] + args)
+        self.timer = Timer(timeout, self.terminate)
+        self.timer.start()
+        resultpid, status = waitpid(self._pid, 0)
+        exitstatus = status >> 8
+
+        if not self._wasTimeout:
+            self.timer.cancel()
+            self._wasSuccess = True
+            self._wasTimeout = False
+
+        return exitstatus 
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/timeslot.py version_7.0/meresco/harvester/timeslot.py
--- version_6.1/meresco/harvester/timeslot.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/timeslot.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,87 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+import datetime
+import time
+import re
+
+class Wildcard(object):
+    def __eq__(self, arg): return True
+    def __lt__(self, arg): return True
+    def __le__(self, arg): return True
+    def __gt__(self, arg): return True
+    def __ge__(self, arg): return True
+    def __str__(self): return '*'
+    def __repr__(self): return '*'
+
+def _parseField(string):
+	if string == '*':
+		return Wildcard()
+	else:
+		return int(string)
+
+class ParseException(Exception):
+	pass
+
+_r = re.compile('(\d{1,2}|\*):(\d|\*):(\d{1,2}):(\d{1,2})')
+def _parse(txt):
+	match = _r.match(txt)
+	if not match:
+		raise ParseException('Illegal timeslot definition (should be "W[W]*|:D|*:HH:MM"), where W is weeknumber, D is day of week (monday = 0), HH is hours in 24 format, MM is minutes.  Week and weekday can be * (wildcard).')
+	return tuple(map(_parseField, match.groups()))
+
+def format(date):
+	return ':'.join(map(str, date))
+
+class Timeslot(object):
+
+	def __init__(self, string):
+		self._begin, self._end = map(_parse, string.split('-'))
+		self.beginweek = str(self._begin[0])
+		self.beginday = str(self._begin[1])
+		self.beginhour = str(self._begin[2])
+		self.beginminute = str(self._begin[3])
+		self.endweek = str(self._end[0])
+		self.endday = str(self._end[1])
+		self.endhour = str(self._end[2])
+		self.endminute = str(self._end[3])
+
+	def __str__(self):
+		return format(self._begin) + '-' + format(self._end)
+
+	def valid(self):
+		return self._begin < self._end
+
+	def areWeWithinTimeslot(self, dateTuple = time.localtime()[:5]):
+		date = datetime.datetime(*dateTuple)
+		date = date.isocalendar()[1:] + (date.hour, date.minute)
+		return self._begin <= date <= self._end
+		
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/__version__.py version_7.0/meresco/harvester/__version__.py
--- version_6.1/meresco/harvester/__version__.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/__version__.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,30 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl 
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+VERSION = '$Version: trunk$'[9:-1].strip()
+VERSION_STRING = """This is Meresco Harvester version %s.""" % VERSION
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/harvester/virtualuploader.py version_7.0/meresco/harvester/virtualuploader.py
--- version_6.1/meresco/harvester/virtualuploader.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/harvester/virtualuploader.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,105 @@
+# -*- coding: utf-8 -*-
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+import sys
+
+INVALID_COMPONENT = 1
+INVALID_DATA = 2
+
+class UploaderException(Exception):
+    def __init__(self, uploadId, message):
+        Exception.__init__(self, 'uploadId: "%s", message: "%s"' % (uploadId, message))
+        self.uploadId = uploadId
+        self.originalMessage = message
+
+class InvalidComponentException(UploaderException):
+    pass
+
+class InvalidDataException(UploaderException):
+    pass
+
+class TooMuchInvalidDataException(UploaderException):
+    def __init__(self, uploadId, maxIgnore):
+        UploaderException.__init__(self, uploadId, "Exceeded maximum number (%d) of invalid data records." % maxIgnore)
+
+class VirtualUploader(object):
+    def __init__(self, eventlogger):
+        self._logger = eventlogger
+
+    def start(self):
+        """Overwrite to initiate connections needed."""
+        pass
+
+    def stop(self):
+        """Overwrite to stop initiated connections."""
+        pass
+
+    def send(self, anUpload):
+        """Send data in upload object, identified by upload.id"""
+        raise NotImplementedError(self.send.__doc__)
+
+    def delete(self, anUpload):
+        """Delete the record with anUpload.id"""
+        raise NotImplementedError(self.delete.__doc__)
+
+    def info(self):
+        """Return information on yourself."""
+        raise NotImplementedError(self.info.__doc__)
+
+    def logLine(self, *args, **kwargs):
+        self._logger.logLine(*args, **kwargs)
+
+    def logError(self, *args, **kwargs):
+        self._logger.error(*args, **kwargs)
+
+    def logDelete(self, anId):
+        self.logLine('DELETE', "Delete document", id=anId)
+
+    def logWarning(self, *args, **kwargs):
+        self._logger.warning(*args, **kwargs)
+
+class UploaderFactory(object):
+    def __init__(self):
+        from sruupdateuploader import SruUpdateUploader
+        from compositeuploader import CompositeUploader
+        from filesystemuploader import FileSystemUploader
+        self.mapping = {
+                    'sruUpdate': SruUpdateUploader,
+                    'composite': CompositeUploader,
+                    'filesystem': FileSystemUploader
+                    }
+
+    def createUploader(self, target, logger, collection):
+        uploaderClass = self.mapping[target.targetType]
+        return uploaderClass(target, logger, collection)
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/meresco/__init__.py version_7.0/meresco/__init__.py
--- version_6.1/meresco/__init__.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/meresco/__init__.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,29 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl 
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+from pkgutil import extend_path
+__path__ = extend_path(__path__, __name__)
Only in version_6.1/: merescoharvester
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/setup.py version_7.0/setup.py
--- version_6.1/setup.py	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/setup.py	2011-03-30 11:12:06.000000000 +0200
@@ -32,17 +32,20 @@
 from distutils.core import setup
 
 setup(
-    name='merescoharvester',
+    name='meresco-harvester',
     packages=[
-        'merescoharvester',
-        'merescoharvester.controlpanel',
-        'merescoharvester.harvester',
+        'meresco.harvester',
+        'meresco.harvester.controlpanel',
     ],
     package_data={
-        'merescoharvester.controlpanel': [
-            'slowfoottemplates/*'
+        'meresco.harvester.controlpanel': [
+            'slowfoottemplates/*',
+            'html/dynamic/*.sf',
         ]
     },
+    scripts=[
+        'bin/start-harvester-internal-server',
+    ],
     version='%VERSION%',
     url='http://www.meresco.org',
     author='Seek You Too',
@@ -51,4 +54,4 @@
     long_description='"Meresco Harvester" consists of two subsystems, namely an OAI-harvester and a web-control panel.',
     license='GNU Public License',
     platforms='all',
-)
\ No newline at end of file
+)
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/actiontestcase.py version_7.0/test/actiontestcase.py
--- version_6.1/test/actiontestcase.py	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/test/actiontestcase.py	2011-03-29 17:08:20.000000000 +0200
@@ -31,7 +31,7 @@
 #
 ## end license ##
 from cq2utils import CallTrace, CQ2TestCase
-from merescoharvester.harvester.harvesterlog import HarvesterLog
+from meresco.harvester.harvesterlog import HarvesterLog
 from os.path import join
 
 class ActionTestCase(CQ2TestCase):
@@ -39,6 +39,7 @@
         CQ2TestCase.setUp(self)
         self.repository = CallTrace("Repository")
         self.repository.id = 'repository'
+        self.repository.baseurl = 'base:url'
         self.repository.returnValues['shopClosed'] = False
     
     def testTheWriteLogLineTestMethod(self):
@@ -54,16 +55,17 @@
 
     def writeMarkDeleted(self, year, month, day):
         h = self.newHarvesterLog()
-        h._state._localtime = lambda: (year, month, day, 12, 15, 0, 0, 0, 0)
+        h._state._gmtime = lambda: (year, month, day, 12, 15, 0, 0, 0, 0)
         h.markDeleted()
         h.close()
 
     def writeLogLine(self, year, month, day, token=None, exception=None):
         h = self.newHarvesterLog()
-        h._state._localtime = lambda: (year, month, day, 12, 15, 0, 0, 0, 0)
+        h._state._gmtime = lambda: (year, month, day, 12, 15, 0, 0, 0, 0)
  
         h.startRepository()
-        h.updateStatsfile(4,1,3)
+        h.notifyHarvestedRecord("repo:uploadId1")
+        h.logID("repo:uploadId1")
         if exception != None:
             try:
                 raise Exception(exception)
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/_alltests.py version_7.0/test/_alltests.py
--- version_6.1/test/_alltests.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/test/_alltests.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,75 @@
+#!/usr/bin/env python
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from os import getuid
+assert getuid() != 0, "Do not run tests as 'root'"
+
+from os import system                             #DO_NOT_DISTRIBUTE
+from sys import path as sysPath                   #DO_NOT_DISTRIBUTE
+system('find .. -name "*.pyc" | xargs rm -f')     #DO_NOT_DISTRIBUTE
+                                                  #DO_NOT_DISTRIBUTE
+from glob import glob                             #DO_NOT_DISTRIBUTE
+for path in glob('../deps.d/*'):                  #DO_NOT_DISTRIBUTE
+    sysPath.insert(0, path)                       #DO_NOT_DISTRIBUTE
+sysPath.insert(0,'..')                            #DO_NOT_DISTRIBUTE
+
+import unittest
+
+from amaraforharvestertest import AmaraForHarvesterTest
+from cacherecordtest import CacheRecordTest
+from deleteidstest import DeleteIdsTest
+from disallowfileplugintest import DisallowFilePluginTest
+from eventloggertest import EventLoggerTest
+from filesystemuploadtest import FileSystemUploaderTest
+from harvestactiontest import HarvestActionTest
+from harvesterlogtest import HarvesterLogTest
+from harvestertest import HarvesterTest
+from idstest import IdsTest
+from mappingtest import MappingTest
+from oairequesttest import OaiRequestTest
+from onlineharvesttest import OnlineHarvestTest
+from repositorystatustest import RepositoryStatusTest
+from repositorytest import RepositoryTest
+from saharagettest import SaharaGetTest
+from smoothactiontest import SmoothActionTest
+from sruupdateuploadertest import SruUpdateUploaderTest
+from statetest import StateTest
+from statustest import StatusTest
+from throughputanalysertest import ThroughputAnalyserTest
+from timedprocesstest import TimedProcessTest
+from timeslottest import TimeslotTest
+from toolstest import ToolsTest
+
+if __name__ == '__main__':
+        unittest.main()
+
Only in version_6.1/test: alltests.py
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/alltests.sh version_7.0/test/alltests.sh
--- version_6.1/test/alltests.sh	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/test/alltests.sh	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,32 @@
+#!/bin/bash
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+export LANG=en_US.UTF-8
+export PYTHONPATH=.:"$PYTHONPATH"
+python2.5 _alltests.py "$@"
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/deleteidstest.py version_7.0/test/deleteidstest.py
--- version_6.1/test/deleteidstest.py	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/test/deleteidstest.py	2011-03-29 17:08:20.000000000 +0200
@@ -31,11 +31,11 @@
 ## end license ##
 
 from cq2utils import CallTrace, CQ2TestCase
-from merescoharvester.harvester import harvesterlog
-from merescoharvester.harvester.deleteids import DeleteIds, readIds
+from meresco.harvester import harvesterlog
+from meresco.harvester.deleteids import DeleteIds, readIds
 from sets import Set
-from merescoharvester.harvester.virtualuploader import UploaderException, VirtualUploader
-from merescoharvester.harvester import deleteids
+from meresco.harvester.virtualuploader import UploaderException, VirtualUploader
+from meresco.harvester import deleteids
 from tempfile import mkdtemp
 from shutil import rmtree
 from os.path import join, isfile
@@ -131,7 +131,6 @@
     def createStatsFile(self,repository):
         logger = harvesterlog.HarvesterLog(self.stateDir, self.logDir, repository.id)
         logger.startRepository()
-        logger.updateStatsfile(0,0,0)
         logger.endRepository(None)
         logger.close()
         
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/disallowfileplugintest.py version_7.0/test/disallowfileplugintest.py
--- version_6.1/test/disallowfileplugintest.py	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/test/disallowfileplugintest.py	2011-03-29 17:08:20.000000000 +0200
@@ -31,7 +31,7 @@
 ## end license ##
 
 import unittest
-from merescoharvester.controlpanel.disallowfileplugin import DisallowFilePlugin
+from meresco.harvester.controlpanel.disallowfileplugin import DisallowFilePlugin
 import tempfile,os
 
 class MockRequest(object):
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/eventloggertest.py version_7.0/test/eventloggertest.py
--- version_6.1/test/eventloggertest.py	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/test/eventloggertest.py	2011-03-29 17:08:20.000000000 +0200
@@ -31,7 +31,7 @@
 ## end license ##
 
 import unittest,os,re
-from merescoharvester.harvester.eventlogger import StreamEventLogger, EventLogger, LOGLINE_RE, CompositeLogger
+from meresco.harvester.eventlogger import StreamEventLogger, EventLogger, LOGLINE_RE, CompositeLogger
 from StringIO import StringIO
 
 EVENTLOGFILE = '/tmp/EventLoggerTestFile'
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/filesystemuploadtest.py version_7.0/test/filesystemuploadtest.py
--- version_6.1/test/filesystemuploadtest.py	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/test/filesystemuploadtest.py	2011-03-29 17:08:20.000000000 +0200
@@ -8,10 +8,11 @@
 #        Seek You Too B.V. (CQ2) http://www.cq2.nl
 #    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
 #    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
 #    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
 #       http://www.kennisnetictopschool.nl
 #    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#    Copyright (C) 2011 Stichting Kennisnet Ict http://www.kennisnet.nl 
 #
 #    This file is part of "Meresco Harvester"
 #
@@ -31,14 +32,15 @@
 #
 ## end license ##
 import unittest
-from merescoharvester.harvester.filesystemuploader import FileSystemUploader
-from merescoharvester.harvester.virtualuploader import UploaderException
+from meresco.harvester.filesystemuploader import FileSystemUploader
+from meresco.harvester.virtualuploader import UploaderException
 from cq2utils import CallTrace, CQ2TestCase
 from slowfoot.wrappers import wrapp
 import os, shutil
 from slowfoot import binderytools
 from tempfile import mkdtemp
 from amara.binderytools import bind_string
+from meresco.harvester.mapping import Upload, parse_xml
 
 from os.path import isfile, join
 
@@ -61,9 +63,8 @@
             repository.repositoryGroupId = 'groupId'
             repository.id = 'repositoryId'
             
-            upload = CallTrace('Upload')
+            upload = Upload(repository=repository)
             upload.id = anId
-            upload.repository = repository
             return self.uploader._filenameFor(upload)
 
         self.assertEquals(self.tempdir + '/groupId/repositoryId/aa:bb_SLASH_cc.dd.record', getFilename('aa:bb/cc.dd'))
@@ -84,9 +85,8 @@
         repository.id = 'repositoryId'
 
         
-        upload = CallTrace('Upload')
+        upload = Upload(repository=repository)
         upload.id = 'id'
-        upload.repository = repository
         
         self.uploader.delete(upload)
 
@@ -112,15 +112,12 @@
         repository.baseurl = "http://repository"
         repository.id = 'repositoryId'
 
-        upload = CallTrace('Upload')
-        upload.id = 'id'
-        upload.repository = repository
 
-        header = bind_string("""<header xmlns="http://www.openarchives.org/OAI/2.0/" status="deleted">
+        record = parse_xml("""<record xmlns="http://www.openarchives.org/OAI/2.0/"><header status="deleted">
                 <identifier>id.record</identifier>
-            </header>""").header
+            </header></record>""").record
+        upload = Upload(repository=repository, record=record)
 
-        upload.header = header
 
         self.assertFalse(isfile(RECORD_FILENAME))
         self.uploader.delete(upload)
@@ -148,7 +145,7 @@
         self.uploader.send(upload)
         
         self.assertTrue(isfile(recordFile))
-        self.assertEquals('<?xml version="1.0" encoding="UTF-8"?>\n'+RECORD, open(recordFile).read())
+        self.assertEquals("<?xml version='1.0' encoding='UTF-8'?>\n"+RECORD, open(recordFile).read())
 
     def testSendWithAbout(self):
         ABOUT = "<about>abouttext</about>"
@@ -159,7 +156,7 @@
         self.uploader.send(upload)
         
         self.assertTrue(isfile(recordFile))
-        self.assertEquals('<?xml version="1.0" encoding="UTF-8"?>\n'+RECORD_WITH_ABOUT % ABOUT, open(recordFile).read())
+        self.assertEquals("<?xml version='1.0' encoding='UTF-8'?>\n"+RECORD_WITH_ABOUT % ABOUT, open(recordFile).read())
 
     def testSendWithMultipleAbout(self):
         ABOUT = "<about>about_1</about><about>about_2</about>"
@@ -171,7 +168,7 @@
         self.uploader.send(upload)
         
         self.assertTrue(isfile(recordFile))
-        self.assertEquals('<?xml version="1.0" encoding="UTF-8"?>\n'+RECORD_WITH_ABOUT % ABOUT, open(recordFile).read())
+        self.assertEquals("<?xml version='1.0' encoding='UTF-8'?>\n"+RECORD_WITH_ABOUT % ABOUT, open(recordFile).read())
 
     def testSendRaisesError(self):
         def raiseError(*args, **kwargs):
@@ -209,30 +206,22 @@
         self.testSend()
 
 def createUpload():
-    upload = CallTrace("Upload")
-    record = wrapp(binderytools.bind_string("""<record xmlns="http://www.openarchives.org/OAI/2.0/">
-    <header>header</header>
-    <metadata>text</metadata>
-</record>"""))
+    record = parse_xml("""<record xmlns="http://www.openarchives.org/OAI/2.0/"><header>header</header><metadata>text</metadata></record>""")
+    repository = CallTrace('repository')
+    repository.id = 'repoId'
     
-    upload.header = record.record.header
-    upload.metadata = record.record.metadata
-    upload.about = record.record.about
+    upload = Upload(repository=repository, record=record)
     upload.id = 'id'
     return upload
     
 def createUploadWithAbout(about):
     upload = CallTrace("Upload")
-    record = wrapp(binderytools.bind_string("""<record xmlns="http://www.openarchives.org/OAI/2.0/">
-    <header>header</header>
-    <metadata>text</metadata>
-    %s
-</record>""" % about))
+    record = parse_xml("""<record xmlns="http://www.openarchives.org/OAI/2.0/"><header>header</header><metadata>text</metadata>%s</record>""" % about)
     
-    upload.header = record.record.header
-    upload.metadata = record.record.metadata
-    upload.about = record.record.about
-
+    repository = CallTrace('repository')
+    repository.id = 'repoId'
+    
+    upload = Upload(repository=repository, record=record)
     upload.id = 'id'
     return upload
         
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/harvestactiontest.py version_7.0/test/harvestactiontest.py
--- version_6.1/test/harvestactiontest.py	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/test/harvestactiontest.py	2011-03-29 17:08:20.000000000 +0200
@@ -32,8 +32,9 @@
 ## end license ##
 from actiontestcase import ActionTestCase
 from cq2utils import CallTrace
-from merescoharvester.harvester.action import HarvestAction
-from merescoharvester.harvester.eventlogger import NilEventLogger
+from meresco.harvester.action import HarvestAction
+from meresco.harvester.eventlogger import NilEventLogger
+from meresco.harvester.oairequest import OaiRequest
 from os.path import join
 
 class HarvestActionTest(ActionTestCase):
@@ -95,6 +96,14 @@
         h = self.newHarvesterLog()
         self.assertEquals((None, None), (h.from_, h.token))
 
+    def testOriginalCreateHarvester(self):
+        HarvestAction._createHarvester = self._original_createHarvester
+        action = self.newHarvestAction()
+        harvester = action._createHarvester()
+        self.assertEquals(2, len(harvester._observers))
+        self.assertEquals(OaiRequest, type(harvester._observers[0]))
+        self.assertEquals(self.repository.baseurl, harvester._observers[0]._url)
+
     def newHarvestAction(self):
         return HarvestAction(self.repository, stateDir=self.tempdir, logDir=self.tempdir, generalHarvestLog=NilEventLogger())
 
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/harvesterlogtest.py version_7.0/test/harvesterlogtest.py
--- version_6.1/test/harvesterlogtest.py	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/test/harvesterlogtest.py	2011-03-29 17:08:20.000000000 +0200
@@ -31,10 +31,12 @@
 #
 ## end license ##
 
-import unittest,os, time
-from merescoharvester.harvester.harvesterlog import HarvesterLog
-from merescoharvester.harvester import harvesterlog
-from merescoharvester.harvester.eventlogger import LOGLINE_RE
+import unittest,os
+from time import strftime, gmtime
+from meresco.harvester.harvesterlog import HarvesterLog
+from meresco.harvester import harvesterlog
+from meresco.harvester.eventlogger import LOGLINE_RE
+from meresco.harvester.virtualuploader import UploaderException
 from tempfile import mkdtemp
 from shutil import rmtree
 
@@ -58,7 +60,7 @@
         logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir,name='someuni')
         self.assertEqual((None,None,0),(logger.from_,logger.token,logger.total))
         self.assert_(logger.hasWork())
-        logger.from_=time.strftime('%Y-%m-%d')
+        logger.from_=strftime('%Y-%m-%d', gmtime())
         self.assert_(not logger.hasWork())
         logger.token='SomeToken'
         self.assert_(logger.hasWork())
@@ -71,18 +73,11 @@
         logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir,name= 'name')
         self.assertTrue(logger.hasWork())
         logger.startRepository()
-        logger.updateStatsfile(0,0,0,0)
         logger.endRepository(None)
         logger.close()
         logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir,name= 'name')
         self.assertFalse(logger.hasWork())
 
-
-    def createMockMailer(self, name):
-        self.mockMailerName=name
-        self.mockMailer=MockMailer()
-        return self.mockMailer
-
     def testLoggingAlwaysStartsNewline(self):
         "Tests an old situation that when a log was interrupted, it continued on the same line"
         f = open(self.stateDir+'/name.stats','w')
@@ -96,22 +91,33 @@
 
     def testLogLine(self):
         logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir,name= 'name')
-        logger.updateStatsfile(1, 2, 3)
+        logger.startRepository()
+        logger.notifyHarvestedRecord("name:uploadId1")
+        logger.logID("name:uploadId1")
+        logger.notifyHarvestedRecord("name:uploadId1")
+        logger.logDeletedID("name:uploadId1")
+        logger.notifyHarvestedRecord("name:uploadId2")
+        logger.logIgnoredID("name:uploadId2", "Test Exception")
         logger.endRepository(None)
         logger.close()
         lines = open(self.stateDir+'/name.stats').readlines()
-        eventline = open(self.logDir+'/name.events').readlines()[0].strip()
+        eventline = open(self.logDir+'/name.events').readlines()[1].strip()
+        ignoredUploadId2 = open(self.logDir+'/ignored/name/uploadId2').read()
         #Total is now counted based upon the id's
-        self.assertEqual('1/2/3/0, Done:',lines[0][:14])
-        date,event,id,comments = LOGLINE_RE.match(eventline).groups()
+        self.assertTrue('3/1/1/0, Done:' in lines[0], lines[0])
+        date, event, id, comments = LOGLINE_RE.match(eventline).groups()
         self.assertEquals('SUCCES', event.strip())
         self.assertEquals('name', id)
-        self.assertEquals('Harvested/Uploaded/Deleted/Total: 1/2/3/0, ResumptionToken: None',comments)
+        self.assertEquals('Harvested/Uploaded/Deleted/Total: 3/1/1/0, ResumptionToken: None', comments)
+        self.assertEquals('Test Exception', ignoredUploadId2) 
 
     def testLogLineError(self):
-        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir,name= 'name')
+        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir,name='name')
+        logger.startRepository()
         try:
-            logger.updateStatsfile(1, 2, 3)
+            logger.notifyHarvestedRecord("name:uploadId1")
+            logger.logID("name:uploadId1")
+            logger.notifyHarvestedRecord("name:uploadId2")
             raise Exception('FATAL')
         except:
             logger.endWithException()
@@ -119,7 +125,7 @@
         lines = open(self.stateDir+'/name.stats').readlines()
         eventline = open(self.logDir+'/name.events').readlines()[0].strip()
         #Total is now counted based upon the id's
-        self.assertEqual('1/2/3/0, Error: ',lines[0][:16])
+        self.assertTrue('2/1/0/1, Error: ' in lines[0], lines[0])
         date,event,id,comments = LOGLINE_RE.match(eventline).groups()
         self.assertEquals('ERROR', event.strip())
         self.assertEquals('name', id)
@@ -132,12 +138,33 @@
         f.writelines(['id:1\n','id:2\n','id:1\n'])
         f.close()
         logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir,name= 'name')
-        self.assertEquals(2,logger.totalids())
+        logger.startRepository()
+        self.assertEquals(2,logger.totalIds())
         logger.logID('id:3')
-        self.assertEquals(3,logger.totalids())
+        self.assertEquals(3,logger.totalIds())
         logger.logID('id:3')
         logger.logID('id:2')
-        self.assertEquals(3,logger.totalids())
+        self.assertEquals(3,logger.totalIds())
+
+    def testLogIgnoredIDs(self):
+        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir, name='name')
+        logger.startRepository()
+        logger.notifyHarvestedRecord('id:4')
+        logger.logIgnoredID('id:4', "Error")
+        self.assertEquals(1, logger.totalIgnoredIds())
+        logger.notifyHarvestedRecord('id:4')
+        self.assertEquals(0, logger.totalIgnoredIds())
+        logger.logID('id:4')
+        self.assertEquals(1, logger.totalIds())
+
+    def testListIgnoredIDs(self):
+        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir, name='name')
+        logger.startRepository()
+        logger.notifyHarvestedRecord('id:1')
+        logger.logIgnoredID('id:1', "Error")
+        logger.notifyHarvestedRecord('id:2')
+        logger.logIgnoredID('id:2', "Error")
+        self.assertEquals(['id:1', 'id:2'], logger.ignoredIds())
 
     def testLogDeleted(self):
         logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir,name='emptyrepoi')
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/harvestertest.py version_7.0/test/harvestertest.py
--- version_6.1/test/harvestertest.py	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/test/harvestertest.py	2011-03-29 17:08:20.000000000 +0200
@@ -7,11 +7,11 @@
 #        Seek You Too B.V. (CQ2) http://www.cq2.nl
 #    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
 #    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
 #    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
 #       http://www.kennisnetictopschool.nl
 #    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+#    Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
 #
 #    This file is part of "Meresco Harvester"
 #
@@ -30,21 +30,31 @@
 #    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 #
 ## end license ##
-import unittest
-from merescoharvester.harvester.harvester import Harvester
-from merescoharvester.harvester.harvesterlog import HarvesterLog
-from merescoharvester.harvester.state import getHarvestedUploadedRecords
-from merescoharvester.harvester.oairequest import MockOAIRequest, OAIRequest
-from slowfoot.wrappers import wrapp, binderytools
-from merescoharvester.harvester.mapping import Mapping, DEFAULT_DC_CODE, Upload
+
 import shelve
 import os
 import sys
 import re
-from merescoharvester.harvester import harvester
+import unittest
 from time import sleep, strftime
 from shutil import rmtree
 from tempfile import mkdtemp
+from StringIO import StringIO
+from lxml.etree import parse
+
+from cq2utils import CallTrace
+from slowfoot.wrappers import wrapp, binderytools
+
+from meresco.harvester.harvester import Harvester
+from meresco.harvester.harvesterlog import HarvesterLog
+from meresco.harvester.state import getHarvestedUploadedRecords
+from meresco.harvester.oairequest import OaiRequest
+from meresco.harvester.virtualuploader import InvalidDataException, TooMuchInvalidDataException
+from meresco.harvester.mapping import Mapping, DEFAULT_CODE, Upload, parse_xml
+from meresco.harvester import namespaces
+
+from mockoairequest import MockOaiRequest
+
 
 class DeletedRecordHeader(object):
     def isDeleted(self):
@@ -52,10 +62,8 @@
     def identifier(self):
         return 'mockid'
 
-
-#TODO key == id
-class _MockRepository:
-    def __init__(self,id,baseurl,set,repositoryGroupId, outer):
+class _MockRepository(object):
+    def __init__(self, id, baseurl, set, repositoryGroupId, outer):
         self.repositoryGroupId=repositoryGroupId
         self.id = id
         self.baseurl = baseurl
@@ -67,7 +75,7 @@
     def mapping(self):
         m = Mapping('id')
         m.name = self.repositoryGroupId
-        m.code = DEFAULT_DC_CODE
+        m.code = DEFAULT_CODE
         return m
 
 class HarvesterTest(unittest.TestCase):
@@ -76,14 +84,13 @@
         self.sendReturn=None
         self.sendException = None
         self.upload = None
-        self.sendFields=[]
+        self.sendParts=[]
         self.sendId=[]
         self.listRecordsSet = None
         self.listRecordsToken = None
         self.startCalled=0
         self.stopCalled=0
         self.logDir = self.stateDir = mkdtemp()
-        harvester.p=lambda x:None
 
     def tearDown(self):
         rmtree(self.logDir)
@@ -93,7 +100,7 @@
         return self.logger
 
     def createServer(self, url='http://repository.tudelft.nl/oai'):
-        return OAIRequest(url)
+        return OaiRequest(url)
 
     def testCreateHarvester(self):
         harvester = self.createHarvesterWithMockUploader('tud')
@@ -105,26 +112,15 @@
         harvester.harvest()
         self.assertEquals((2,2),(self.startCalled,self.stopCalled))
 
-    def LIVE_test_LIVE_Data(self):
-        server = self.createServer('http://arno.uvt.nl/~arno/arno-1.2/oai/wo.uvt.nl.cgi')
-        record = server.getRecord(identifier=    'oai:wo.uvt.nl:155002', metadataPrefix='oai_dc')
-        print record.header.identifier
-        print record.metadata.dc.title
-
     def testDoUpload(self):
         harvester = self.createHarvesterWithMockUploader('tud')
         harvester.harvest()
 
         self.assertEqual(3, self.sendCalled)
         self.assertEqual('tud:oai:tudelft.nl:007193', self.sendId[2])
-        self.assertEqual(u'quantitative electron microscopy; statistical experimental design; parameter estimation', self.sendFields[2]['meta_dc.subject'])
-        self.assertEqual(
-            u"http://content.library.tudelft.nl/intradoc-cgi/nph-idc_cgi.exe/as_aert_20030520.pdf?IdcService=GET_FILE&dID=8799&dDocName=007193; ISBN 90-6464-861-1",
-            self.sendFields[2]['url'])
-        self.assertEqual('tud', self.sendFields[2]['generic1'])
-        self.assertEqual('oai:tudelft.nl:007193', self.sendFields[2]['generic2'])
-        self.assertEquals('insttud', self.sendFields[2]['generic3'])
-        self.assertEqual(u'2003-05-20', self.sendFields[2]['generic4'])
+        record = parse(StringIO(self.sendParts[2]['record']))
+        subjects = record.xpath('/oai:record/oai:metadata/oai_dc:dc/dc:subject/text()', namespaces=namespaces)
+        self.assertEqual(['quantitative electron microscopy', 'statistical experimental design', 'parameter estimation'], subjects)
         self.assertEquals('ResumptionToken: TestToken', file(os.path.join(self.stateDir, 'tud.stats')).read()[-27:-1])
 
     def testLogIDsForRemoval(self):
@@ -140,7 +136,9 @@
 
     def createHarvesterWithMockUploader(self, name, set=None, mockRequest = None):
         self.logger=HarvesterLog(stateDir=self.stateDir, logDir=self.logDir, name=name)
-        harvester = Harvester(self.MockRepository(name, set), stateDir=self.stateDir, logDir=self.logDir, mockLogger=self.logger, mockRequest = mockRequest or MockOAIRequest('mocktud'))
+        harvester = Harvester(self.MockRepository(name, set), stateDir=self.stateDir, logDir=self.logDir, eventLogger=self.logger.eventLogger())
+        harvester.addObserver(mockRequest or MockOaiRequest('mocktud'))
+        harvester.addObserver(self.logger)
         return harvester
 
     def testSimpleStat(self):
@@ -176,7 +174,9 @@
         self.logger=HarvesterLog(stateDir=self.stateDir, logDir=self.logDir, name='tud')
         repository = self.MockRepository('tud', None)
         repository.metadataPrefix='lom'
-        harvester = Harvester(repository, stateDir=self.stateDir, logDir=self.logDir, mockLogger=self.logger, mockRequest = MockOAIRequest('mocktud'))
+        harvester = Harvester(repository, stateDir=self.stateDir, logDir=self.logDir, eventLogger=self.logger.eventLogger())
+        harvester.addObserver(MockOaiRequest('mocktud'))
+        harvester.addObserver(self.logger)
         harvester.harvest()
         self.assertEquals(['tud:oai:lorenet:147'],self.sendId)
 
@@ -200,7 +200,7 @@
             self.assertTrue('exceptions.Exception' in str(sys.exc_type), str(sys.exc_type))
 
     def testIncrementalHarvest(self):
-        self.mockRepository = MockOAIRequest('mocktud')
+        self.mockRepository = MockOaiRequest('mocktud')
         f = open(self.stateDir + '/tud.stats', 'w')
         f.write(' Started: 1999-12-01 16:37:41, Harvested/Uploaded/Total: 56/23/113, Done: 2004-12-31 16:39:15\n')
         f.close();
@@ -208,7 +208,10 @@
         for i in range(113): f.write('oai:tudfakeid:%05i\n'%i)
         f.close()
         repository = self.MockRepository3('tud' ,'http://repository.tudelft.nl/oai', None, 'tud')
-        h = Harvester(repository, stateDir=self.stateDir, logDir=self.logDir, mockLogger=self.createLogger(), mockRequest = self)
+        logger = self.createLogger()
+        h = Harvester(repository, stateDir=self.stateDir, logDir=self.logDir, eventLogger=logger.eventLogger())
+        h.addObserver(self)
+        h.addObserver(logger)
         self.listRecordsFrom = None
         self.sendReturn = '127.0.0.1-123@localhost-12312-12312424123'
         h.harvest()
@@ -218,42 +221,51 @@
         self.assertEquals(('3', '3', '0', '116'), getHarvestedUploadedRecords(lines[1]))
 
     def testNotIncrementalInCaseOfError(self):
-        self.mockRepository = MockOAIRequest('mocktud')
+        self.mockRepository = MockOaiRequest('mocktud')
         f = open(self.stateDir + '/tud.stats', 'w')
         f.write('Started: 1998-12-01 16:37:41, Harvested/Uploaded/Total: 113/113/113, Done: 2004-12-31 16:39:15\n')
         f.write('Started: 1999-12-01 16:37:41, Harvested/Uploaded/Total: 113/113/113, Error: XXX\n')
         f.close();
         repository = self.MockRepository3('tud' ,'http://repository.tudelft.nl/oai', None, 'tud')
-        h = Harvester(repository, stateDir=self.stateDir, logDir=self.logDir, mockLogger=self.createLogger(), mockRequest = self)
+        logger = self.createLogger()
+        h = Harvester(repository, stateDir=self.stateDir, logDir=self.logDir, eventLogger=logger.eventLogger())
+        h.addObserver(self)
+        h.addObserver(logger)
         self.listRecordsFrom = None
         h.harvest()
         self.assertEquals('1998-12-01', self.listRecordsFrom)
 
     def testOnlyErrorInLogFile(self):
-        self.mockRepository = MockOAIRequest('mocktud')
+        self.mockRepository = MockOaiRequest('mocktud')
         f = open(self.stateDir + '/tud.stats', 'w')
         f.write('Started: 1998-12-01 16:37:41, Harvested/Uploaded/Total: 113/113/113, Error:\n')
         f.write('Started: 1999-12-01 16:37:41, Harvested/Uploaded/Total: 113/113/113, Error: XXX\n')
         f.close();
         repository = self.MockRepository3('tud' ,'http://repository.tudelft.nl/oai', None, 'tud')
-        h = Harvester(repository, stateDir=self.stateDir, logDir=self.logDir, mockLogger=self.createLogger(), mockRequest = self)
+        logger = self.createLogger()
+        h = Harvester(repository, stateDir=self.stateDir, logDir=self.logDir, eventLogger=logger.eventLogger())
+        h.addObserver(self)
+        h.addObserver(logger)
         self.listRecordsFrom = None
         h.harvest()
         self.assertEquals('aap', self.listRecordsFrom)
 
     def testResumptionToken(self):
-        self.mockRepository = MockOAIRequest('mocktud')
+        self.mockRepository = MockOaiRequest('mocktud')
         f = open(self.stateDir + '/tud.stats', 'w')
         f.write('Started: 1999-12-01 16:37:41, Harvested/Uploaded/Total: 113/113/113, Done: 2004-12-31 16:39:15, ResumptionToken: ga+hier+verder\n')
         f.close();
         repository = self.MockRepository3('tud' ,'http://repository.tudelft.nl/oai', None, 'tud')
-        h = Harvester(repository, stateDir=self.stateDir, logDir=self.logDir, mockLogger=self.createLogger(), mockRequest = self)
+        logger = self.createLogger()
+        h = Harvester(repository, stateDir=self.stateDir, logDir=self.logDir, eventLogger=logger.eventLogger())
+        h.addObserver(self)
+        h.addObserver(logger)
         self.listRecordsToken = None
         h.harvest()
         self.assertEquals('ga+hier+verder', self.listRecordsToken)
 
     def testHarvestSet(self):
-        self.mockRepository = MockOAIRequest('mocktud')
+        self.mockRepository = MockOaiRequest('mocktud')
         harvester = self.createHarvesterWithMockUploader('um', set='withfulltext:yes', mockRequest = self)
         harvester.harvest()
         self.assertEquals('withfulltext:yes', self.listRecordsSet)
@@ -261,17 +273,17 @@
     def mockHarvest(self, repository, logger, uploader):
         if not hasattr(self, 'mockHarvestArgs'):
             self.mockHarvestArgs=[]
-        self.mockHarvestArgs.append({'name':repository.key,'url':repository.url,'set':repository.set,'institutionkey':repository.institutionkey})
+        self.mockHarvestArgs.append({'name':repository.id,'baseurl':repository.baseurl,'set':repository.set,'repositoryGroupId':repository.repositoryGroupId})
 
     def testNoDateHarvester(self):
         "runs a test with xml containing no dates"
         harvester = self.createHarvesterWithMockUploader('tud')
-        self.logger.token='NoDateToken'
+        self.logger._state.token='NoDateToken'
         harvester.harvest()
 
     def testNothingInRepository(self):
         harvester = self.createHarvesterWithMockUploader('tud')
-        self.logger.token='EmptyListToken'
+        self.logger._state.token='EmptyListToken'
         harvester.harvest()
         lines = open(self.stateDir+'/tud.stats').readlines()
         self.assert_('Harvested/Uploaded/Deleted/Total: 0/0/0/0' in lines[0])
@@ -284,38 +296,31 @@
 
     def testUploadRecord(self):
         harvester = self.createHarvesterWithMockUploader('tud')
-        header = wrapp(binderytools.bind_string('<header><identifier>mockid</identifier></header>').header)
-        metadata = wrapp(binderytools.bind_string('<metadata><dc><title>mocktitle</title></dc></metadata>').metadata)
-        about = wrapp(binderytools.bind_string('<about/>').about)
-        upload = Upload()
+        record = parse_xml("""<record><header><identifier>mockid</identifier></header><metadata><dc><title>mocktitle</title></dc></metadata><about/></record>""").record
+        upload = Upload(record=record)
         upload.id = 'tud:mockid'
-        harvester._mapper.createUpload = lambda r,h,m,a,logger: upload
-        result = harvester.uploadRecord(header, metadata,about)
+        harvester._mapper.createUpload = lambda repository,record,logger: upload
+        harvester.uploadRecord(record)
         self.assertEquals(['tud:mockid'], self.sendId)
-        self.assert_(not hasattr(self, 'delete_id'))
-        self.assertEquals((1,0), result)
+        self.assertFalse(hasattr(self, 'delete_id'))
 
     def testSkippedRecord(self):
         harvester = self.createHarvesterWithMockUploader('tud')
-        header = wrapp(binderytools.bind_string('<header><identifier>mockid</identifier></header>').header)
-        metadata = wrapp(binderytools.bind_string('<metadata><dc><title>mocktitle</title></dc></metadata>').metadata)
-        about = wrapp(binderytools.bind_string('<about/>').about)
-        upload = None
-        harvester._mapper.createUpload = lambda r,h,m,a,logger: upload
-        result = harvester.uploadRecord(header, metadata, about)
+        record = parse_xml("""<record><header><identifier>mockid</identifier></header><metadata><dc><title>mocktitle</title></dc></metadata><about/></record>""").record
+        upload = Upload(record=record)
+        upload.id = "tud:mockid"
+        upload.skip = True
+        harvester._mapper.createUpload = lambda repository,record,logger: upload
+        harvester.uploadRecord(record)
         self.assertEquals([], self.sendId)
-        self.assert_(not hasattr(self, 'delete_id'))
-        self.assertEquals((0,0), result)
+        self.assertFalse(hasattr(self, 'delete_id'))
 
     def testDelete(self):
         harvester = self.createHarvesterWithMockUploader('tud')
-        header = wrapp(binderytools.bind_string('<header status="deleted"><identifier>mockid</identifier></header>').header)
-        metadata = 'true' # don't care
-        about = "still don't care"
-        result = harvester.uploadRecord(header, metadata, about)
+        record = parse_xml("""<record><header status="deleted"><identifier>mockid</identifier></header></record>""").record
+        harvester.uploadRecord(record)
         self.assertEquals([], self.sendId)
         self.assertEquals('tud:mockid', self.delete_id)
-        self.assertEquals((0,1), result)
 
     def testDcIdentifierTake2(self):
         self.sendFulltexturl=None
@@ -336,11 +341,43 @@
         harvester.listRecords = self.listRecordsButWaitLong
         harvester.harvest()
 
+    def testHarvesterIgnoringInvalidDataErrors(self):
+        record = parse_xml("""<record><header><identifier>mockid</identifier></header><metadata><dc><title>mocktitle</title></dc></metadata><about/></record>""").record
+        upload = Upload(record=record)
+        upload.id = 'mockid'
+        uploader=CallTrace("uploader")
+        uploader.exceptions['send'] =  InvalidDataException(upload.id, "message")
+        mapper=CallTrace("mapper", returnValues={'createUpload': upload})
+        repository=CallTrace("repository", returnValues={'createUploader': uploader, 'mapping': mapper, 'maxIgnore': 0})
+        observer=CallTrace("observer", returnValues={'totalIgnoredIds': 42})
+        harvester = Harvester(repository, stateDir=self.stateDir, logDir=self.logDir, eventLogger=None)
+        harvester.addObserver(observer)
+        self.assertRaises(TooMuchInvalidDataException, lambda: harvester.uploadRecord(record))
+        self.assertEquals(["notifyHarvestedRecord", "totalIgnoredIds"], [m.name for m in observer.calledMethods])
+        observer.calledMethods = []
+        repository.returnValues['maxIgnore'] = 43
+        harvester.uploadRecord(record)
+        self.assertEquals(["notifyHarvestedRecord", "totalIgnoredIds", "logIgnoredID"], [m.name for m in observer.calledMethods])
+
+    def testHarvesterStopsIgnoringAfter100records(self):
+        record = parse_xml("""<record><header><identifier>mockid</identifier></header><metadata><dc><title>mocktitle</title></dc></metadata><about/></record>""").record
+        upload = Upload(record=record)
+        upload.id = 'mockid'
+        uploader=CallTrace("uploader")
+        uploader.exceptions['send'] =  InvalidDataException(upload.id, "message")
+        mapper=CallTrace("mapper", returnValues={'createUpload': upload})
+        repository=CallTrace("repository", returnValues={'createUploader': uploader, 'mapping': mapper, 'maxIgnore': 100})
+        observer=CallTrace("observer", returnValues={'totalIgnoredIds': 100})
+        harvester = Harvester(repository, stateDir=self.stateDir, logDir=self.logDir, eventLogger=None)
+        harvester.addObserver(observer)
+        self.assertRaises(TooMuchInvalidDataException, lambda: harvester.uploadRecord(record))
+        self.assertEquals(["notifyHarvestedRecord", "totalIgnoredIds"], [m.name for m in observer.calledMethods])
+
     #self shunt:
     def send(self, upload):
         self.sendCalled+=1
         self.sendId.append(upload.id)
-        self.sendFields.append(upload.fields)
+        self.sendParts.append(upload.parts)
         self.upload = upload
         if self.sendException:
             raise self.sendException
@@ -361,14 +398,14 @@
     def listRecordsButWaitLong(self, a, b, c, d):
         sleep(20)
 
-    def MockRepository (self, key, set):
-            return _MockRepository(key, 'http://mock.server', set, 'inst'+key,self)
+    def MockRepository (self, id, set):
+        return _MockRepository(id, 'http://mock.server', set, 'inst'+id,self)
 
     def MockRepository2 (self, nr):
         return _MockRepository('reponame'+nr, 'url'+nr, 'set'+nr, 'instname'+nr,self)
 
-    def MockRepository3(self, key,url,set,institutionkey):
-        return _MockRepository(key,url,set,institutionkey,self)
+    def MockRepository3(self, id, baseurl, set, repositoryGroupId):
+        return _MockRepository(id, baseurl, set, repositoryGroupId, self)
 
     def mockssetarget(self):
         return self
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/idstest.py version_7.0/test/idstest.py
--- version_6.1/test/idstest.py	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/test/idstest.py	2011-03-29 17:08:20.000000000 +0200
@@ -30,54 +30,54 @@
 #
 ## end license ##
 
-import unittest
-from mytestcase import MyTestCase
-from merescoharvester.harvester.ids import Ids
+from cq2utils import CQ2TestCase
+from meresco.harvester.ids import Ids
 
-class IdsTest(MyTestCase):
+class IdsTest(CQ2TestCase):
     def tearDown(self):
         ids = getattr(self, 'ids', None)
         if ids: ids.close()
-        MyTestCase.tearDown(self)
+        CQ2TestCase.tearDown(self)
         
     def testAddOne(self):
-        self.ids = Ids(self.testdir + '/doesnotexistyet/', 'idstest')
+        self.ids = Ids(self.tempdir + '/doesnotexistyet/', 'idstest')
         self.ids.add('id:1')
-        self.assertEquals(1, self.ids.total())
+        self.assertEquals(1, len(self.ids))
         
     def testAddTwice(self):
-        self.ids = Ids(self.testdir, 'idstest')
+        self.ids = Ids(self.tempdir, 'idstest')
         self.ids.add('id:1')
         self.ids.add('id:1')
-        self.assertEquals(1, self.ids.total())
+        self.assertEquals(1, len(self.ids))
+        self.assertEquals(1, len(open(self.tempdir + '/idstest.ids').readlines()))
         
     def testInit(self):
         self.writeTestIds('one',['id:1'])
-        self.ids = Ids(self.testdir, 'one')
-        self.assertEquals(1, self.ids.total())
+        self.ids = Ids(self.tempdir, 'one')
+        self.assertEquals(1, len(self.ids))
         self.writeTestIds('three',['id:1', 'id:2', 'id:3'])
-        self.ids = Ids(self.testdir, 'three')
-        self.assertEquals(3, self.ids.total())
+        self.ids = Ids(self.tempdir, 'three')
+        self.assertEquals(3, len(self.ids))
         
     def testRemoveExistingId(self):
         self.writeTestIds('three',['id:1', 'id:2', 'id:3'])
-        self.ids = Ids(self.testdir, 'three')
+        self.ids = Ids(self.tempdir, 'three')
         self.ids.remove('id:1')
-        self.assertEquals(2, self.ids.total())
+        self.assertEquals(2, len(self.ids))
+        self.assertEquals(2, len(open(self.tempdir + '/three.ids').readlines()))
         self.ids.close()
-        self.assertEquals(2, len(open(self.testdir + '/three.ids').readlines()))
         
-    def testRemoveExistingId(self):
+    def testRemoveNonExistingId(self):
         self.writeTestIds('three',['id:1', 'id:2', 'id:3'])
-        self.ids = Ids(self.testdir, 'three')
+        self.ids = Ids(self.tempdir, 'three')
         self.ids.remove('id:4')
-        self.assertEquals(3, self.ids.total())
+        self.assertEquals(3, len(self.ids))
         self.ids.close()
-        self.assertEquals(3, len(open(self.testdir + '/three.ids').readlines()))
+        self.assertEquals(3, len(open(self.tempdir + '/three.ids').readlines()))
         
         
     def writeTestIds(self, name, ids):
-        w = open(self.testdir+ '/' + name + '.ids', 'w')
+        w = open(self.tempdir+ '/' + name + '.ids', 'w')
         try:
             for anId in ids:
                 w.write(anId + '\n')
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/integration/harvestertest.py version_7.0/test/integration/harvestertest.py
--- version_6.1/test/integration/harvestertest.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/test/integration/harvestertest.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,70 @@
+#!/usr/bin/env python2.5
+# -*- coding: utf-8 -*-
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from os import system, waitpid, listdir
+from os.path import join, dirname, abspath
+from urllib import urlopen
+from time import time, sleep
+from subprocess import Popen
+from shutil import copytree
+
+from cq2utils import CQ2TestCase
+from utils import getRequest
+
+from integrationtestcase import IntegrationTestCase
+
+class HarvesterTest(IntegrationTestCase):
+    def setUp(self):
+        IntegrationTestCase.setUp(self)
+        system("rm -rf %s/*" % self.dumpDir)
+        system("rm -rf %s" % self.harvesterLogDir)
+        system("rm -rf %s" % self.harvesterStateDir)
+
+    def testHarvestToDump(self):
+        self.startHarvester()
+        self.assertEquals(14, len(listdir(self.dumpDir)))
+        self.assertEquals(2, len([f for f in listdir(self.dumpDir) if "info:srw/action/1/delete" in open(join(self.dumpDir, f)).read()]))
+        ids = open(join(self.harvesterStateDir, "adomain", "integrationtest.ids")).readlines()
+        self.assertEquals(10, len(ids))
+        ignoredIds = open(join(self.harvesterStateDir, "adomain", "integrationtest_ignored.ids")).readlines()
+        self.assertEquals(0, len(ignoredIds))
+
+    def testInvalidIgnoredUptoMaxIgnore(self):
+        self.startHarvester()
+        self.assertEquals(2, len(listdir(self.dumpDir)))
+        ids = open(join(self.harvesterStateDir, "adomain", "integrationtest.ids")).readlines()
+        self.assertEquals(0, len(ids))
+        ignoredIds = open(join(self.harvesterStateDir, "adomain", "integrationtest_ignored.ids")).readlines()
+        self.assertEquals(5, len(ignoredIds), ignoredIds)
+        ignoreDir = join(self.harvesterLogDir, "adomain", "ignored", "integrationtest")
+        self.assertEquals(5, len(listdir(ignoreDir)))
+        ignoreId1Error = open(join(ignoreDir, "recordID1")).read()
+        self.assertTrue('uploadId: "integrationtest:recordID1"', ignoreId1Error)
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/integration/__init__.py version_7.0/test/integration/__init__.py
--- version_6.1/test/integration/__init__.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/test/integration/__init__.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,29 @@
+# -*- coding: utf-8 -*-
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+from integrationtestcase import globalSetUp, globalTearDown
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/integration/integrationtestcase.py version_7.0/test/integration/integrationtestcase.py
--- version_6.1/test/integration/integrationtestcase.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/test/integration/integrationtestcase.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,203 @@
+# -*- coding: utf-8 -*-
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from __future__ import with_statement
+
+from os.path import isdir, join, abspath, dirname, basename
+from os import system, listdir, makedirs
+from sys import stdout
+
+from utils import postRequest
+
+from cq2utils import CQ2TestCase
+from random import randint
+from time import sleep, time 
+
+from subprocess import Popen
+from signal import SIGTERM
+from os import waitpid, kill, WNOHANG
+from urllib import urlopen, urlencode
+from shutil import copytree
+
+from meresco.components import readConfig
+
+from traceback import print_exc
+
+mypath = dirname(abspath(__file__))
+binDir = join(dirname(dirname(mypath)), 'bin')
+documentationPath = join(dirname(dirname(mypath)), 'doc')
+harvesterDir = dirname(dirname(dirname(abspath(__file__))))
+
+if not isdir(binDir):
+    binDir = '/usr/bin'
+
+def stdoutWrite(aString):
+    stdout.write(aString)
+    stdout.flush()
+
+class PortNumberGenerator(object):
+    startNumber = randint(50000, 60000)
+
+    @classmethod
+    def next(cls):
+        cls.startNumber += 1
+        return cls.startNumber
+
+class IntegrationTestCase(CQ2TestCase):
+    def setUp(self):
+        CQ2TestCase.setUp(self)
+        global state
+        self.state = state
+        urlopen("http://localhost:%s/starttest?name=%s" % (self.helperServerPortNumber, self.id()))
+
+    def __getattr__(self, name):
+        if name.startswith('_'):
+            raise AttributeError(name)
+        return getattr(self.state, name)
+
+    def startHarvester(self):
+        stdoutfile = join(self.integrationTempdir, "stdouterr-harvester.log")
+        stdouterrlog = open(stdoutfile, 'w')
+        harvesterProcessInfo = Popen(
+            args=["python", join(self.integrationTempdir, "start-integrationtest-harvester.py"), "-d", "adomain", "--logDir=%s" % self.harvesterLogDir, "--stateDir=%s" % self.harvesterStateDir], 
+            cwd=self.integrationTempdir,
+            env={'PYTHONPATH': harvesterDir, 'LANG': 'en_US.UTF-8'},
+            stdout=stdouterrlog,
+            stderr=stdouterrlog)
+        print "Harvester PID", harvesterProcessInfo.pid
+        waitpid(harvesterProcessInfo.pid, 0)
+
+class IntegrationState(object):
+    def __init__(self, stateName, fastMode):
+        self.stateName = stateName
+        self._pids = []
+        self.integrationTempdir = '/tmp/mh-integrationtest-%s' % stateName 
+        system('rm -rf ' + self.integrationTempdir)
+
+        self.helperServerPortNumber = PortNumberGenerator.next()
+        self.harvesterInternalServerPortNumber = PortNumberGenerator.next()
+
+        self.dumpDir = join(self.integrationTempdir, 'dump')
+        self.harvesterLogDir = join(self.integrationTempdir, "log")
+        self.harvesterStateDir = join(self.integrationTempdir, "state")
+
+        copytree("integration-data", self.integrationTempdir)
+        fileSubstVars(join(self.integrationTempdir, "data", "DUMP.target"), dumpPortNumber=self.helperServerPortNumber)
+        fileSubstVars(join(self.integrationTempdir, "data", "integration.test.repository"), helperServerPortNumber=self.helperServerPortNumber)
+        config = readConfig(join(documentationPath, 'harvester.config'))
+        
+        # test example config has neccessary parameters
+        def setConfig(config, parameter, value):
+            assert config[parameter]
+            config[parameter] = value
+        setConfig(config, 'portNumber', self.harvesterInternalServerPortNumber)
+        setConfig(config, 'saharaUrl', "http://localhost:%s" % self.helperServerPortNumber)
+        setConfig(config, 'dataPath', join(self.integrationTempdir, 'data'))
+        setConfig(config, 'statePath', join(self.integrationTempdir, 'state'))
+        setConfig(config, 'logPath', join(self.integrationTempdir, 'log'))
+
+        self._writeConfig(config, 'harvester')
+
+        self.startHelperServer()
+        if self.stateName == 'internal-server':
+            self.startHarvesterInternalServer()
+
+    def _writeConfig(self, config, name):
+        configFile = join(self.integrationTempdir, '%s.config' % name)
+        with open(configFile, 'w') as f:
+            for item in config.items():
+                f.write('%s = %s\n' % item)
+
+    def startHelperServer(self):
+        stdoutfile = join(self.integrationTempdir, "stdouterr-helper.log")
+        stdouterrlog = open(stdoutfile, 'w')
+        processInfo = Popen(
+            args=["python", join(self.integrationTempdir, "helperserver.py"), str(self.helperServerPortNumber), self.dumpDir], 
+            env={'PYTHONPATH': harvesterDir, 'LANG': 'en_US.UTF-8'},
+            cwd=self.integrationTempdir, 
+            stdout=stdouterrlog,
+            stderr=stdouterrlog)
+        print "Helper Server PID", processInfo.pid
+        self._pids.append(processInfo.pid)
+        self._check(serverProcess=processInfo, 
+                serviceName='TestHelper', 
+                serviceReadyUrl='http://localhost:%s/ready' % self.helperServerPortNumber, 
+                stdoutfile=stdoutfile)
+
+    def startHarvesterInternalServer(self):
+        stdoutfile = join(self.integrationTempdir, "stdouterr-harvesterinternalserver.log")
+        stdouterrlog = open(stdoutfile, 'w')
+        configFile = join(self.integrationTempdir, 'harvester.config') 
+        processInfo = Popen(
+            args=[join(binDir, "start-harvester-internal-server"), configFile], 
+            env={'PYTHONPATH': harvesterDir, 'LANG': 'en_US.UTF-8'},
+            cwd=binDir,
+            stdout=stdouterrlog,
+            stderr=stdouterrlog)
+        print "Harvester Internal Server PID", processInfo.pid
+        self._pids.append(processInfo.pid)
+        self._check(serverProcess=processInfo, 
+                serviceName='Harvester-Internal-Server', 
+                serviceReadyUrl='http://localhost:%s/info/version' % self.harvesterInternalServerPortNumber, 
+                stdoutfile=stdoutfile)
+
+    def _check(self, serverProcess, serviceName, serviceReadyUrl, stdoutfile):
+        stdoutWrite("Starting service '%s', for state '%s' : v" % (serviceName, self.stateName))
+        done = False
+        while not done:
+            try:
+                stdoutWrite('r')
+                sleep(0.1)
+                urlopen(serviceReadyUrl).read()
+                done = True
+            except IOError:
+                if serverProcess.poll() != None:
+                    self._pids.remove(serverProcess.pid)
+                    exit('Service "%s" died, check "%s"' % (serviceName, stdoutfile))
+        stdoutWrite('oom!\n')
+
+    def tearDown(self):
+        for pid in self._pids:
+            kill(pid, SIGTERM)
+            waitpid(pid, WNOHANG)
+
+def globalSetUp(fast, stateName):
+    global state, fastMode
+    fastMode = fast
+    state = IntegrationState(stateName, fastMode)
+
+def globalTearDown():
+    global state
+    state.tearDown()
+
+def fileSubstVars(filepath, **kwargs):
+    contents = open(filepath).read()
+    for k, v in kwargs.items():
+        contents = contents.replace("${%s}" % k, str(v))
+    open(filepath, "w").write(contents)
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/integration/internalservertest.py version_7.0/test/integration/internalservertest.py
--- version_6.1/test/integration/internalservertest.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/test/integration/internalservertest.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,67 @@
+#!/usr/bin/env python2.5
+# -*- coding: utf-8 -*-
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from os import system
+from utils import getRequest
+from lxml.etree import tostring
+from integrationtestcase import IntegrationTestCase
+
+def xpath(node, xpath):
+    return node.xpath(xpath, namespaces={'s': 'http://sahara.cq2.org/xsd/saharaget.xsd'})
+
+class InternalServerTest(IntegrationTestCase):
+
+    def setUp(self):
+        IntegrationTestCase.setUp(self)
+        system("rm -rf %s/*" % self.dumpDir)
+        system("rm -rf %s" % self.harvesterLogDir)
+        system("rm -rf %s" % self.harvesterStateDir)
+
+    def testListAllRepositories(self):
+        self.startHarvester()
+        header, result = getRequest(self.harvesterInternalServerPortNumber, '/ignored', {'domainId': 'adomain', 'repositoryId': 'integrationtest'}, parse='lxml')
+        self.assertEquals(["recordID7", "recordID5", "recordID4", "recordID2", "recordID1"], result.xpath("/div/table/tr/td[@class='link']/a/text()"))
+        self.assertEquals("/page/ignoredRecord/?recordId=recordID7&domainId=adomain&repositoryId=integrationtest", result.xpath("/div/table/tr/td[@class='link']/a")[0].attrib['href'])
+        self.assertEquals("/page/showHarvesterStatus/show?domainId=adomain&repositoryId=integrationtest", result.xpath("/div/p/a/@href")[0])
+
+    def testViewIgnoredRecord(self):
+        self.startHarvester()
+        header, result = getRequest(self.harvesterInternalServerPortNumber, '/ignoredRecord', {'domainId': 'adomain', 'repositoryId': 'integrationtest', 'recordId': 'recordID2'}, parse='lxml')
+        self.assertEquals("Repository integrationtest - Record recordID2", result.xpath("//h3/text()")[0])
+        self.assertEquals("/page/ignored/?domainId=adomain&repositoryId=integrationtest", result.xpath("/div/p/a/@href")[0])
+
+    def testGetStatus(self):
+        self.startHarvester()
+        header, result = getRequest(self.harvesterInternalServerPortNumber, '/getStatus', {'domainId': 'adomain', 'repositoryId': 'integrationtest'}, parse='lxml')
+        self.assertEquals("GetStatus", xpath(result, "/s:saharaget/s:request/s:verb/text()")[0])
+        self.assertEquals("adomain", xpath(result, "/s:saharaget/s:request/s:domainId/text()")[0])
+        self.assertEquals("integrationtest", xpath(result, "/s:saharaget/s:request/s:repositoryId/text()")[0])
+        self.assertEquals("5", xpath(result, "/s:saharaget/s:GetStatus/s:status[@repositoryId='integrationtest']/s:ignored/text()")[0])
+        
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/integration-data/data/99ff846d-f05d-4bb8-be3f-c1b5039b50e5.mapping version_7.0/test/integration-data/data/99ff846d-f05d-4bb8-be3f-c1b5039b50e5.mapping
--- version_6.1/test/integration-data/data/99ff846d-f05d-4bb8-be3f-c1b5039b50e5.mapping	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/test/integration-data/data/99ff846d-f05d-4bb8-be3f-c1b5039b50e5.mapping	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,35 @@
+<?xml version="1.0"?>
+<mapping>
+  <id>99ff846d-f05d-4bb8-be3f-c1b5039b50e5</id>
+  <name>default</name>
+  <description>This mapping is what has become the default mapping for most Meresco based projects.
+</description>
+  <code>upload.parts['metadata'] = input.metadata.xml()
+
+upload.parts['header'] = input.header.xml()
+
+upload.parts['meta'] = """&lt;meta xmlns="http://meresco.org/namespace/harvester/meta"&gt;
+  &lt;upload&gt;&lt;id&gt;%(id)s&lt;/id&gt;&lt;/upload&gt;
+  &lt;record&gt;
+    &lt;id&gt;%(recordId)s&lt;/id&gt;
+  &lt;/record&gt;
+  &lt;repository&gt;
+    &lt;id&gt;%(repository)s&lt;/id&gt;
+    &lt;set&gt;%(set)s&lt;/set&gt;
+    &lt;baseurl&gt;%(baseurl)s&lt;/baseurl&gt;
+    &lt;repositoryGroupId&gt;%(repositoryGroupId)s&lt;/repositoryGroupId&gt;
+    &lt;metadataPrefix&gt;%(metadataPrefix)s&lt;/metadataPrefix&gt;
+    &lt;collection&gt;%(collection)s&lt;/collection&gt;
+  &lt;/repository&gt;
+&lt;/meta&gt;""" % dict([(k,xmlEscape(v)) for k,v in {
+  'id': upload.id,
+  'set': input.repository.set,
+  'baseurl': input.repository.baseurl,
+  'repositoryGroupId':  input.repository.repositoryGroupId,
+  'repository': input.repository.id,
+  'metadataPrefix': input.repository.metadataPrefix,
+  'collection': input.repository.collection,
+  'recordId': input.header.identifier,
+}.items()])
+</code>
+</mapping>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/integration-data/data/DUMP.target version_7.0/test/integration-data/data/DUMP.target
--- version_6.1/test/integration-data/data/DUMP.target	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/test/integration-data/data/DUMP.target	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,10 @@
+<?xml version="1.0"?>
+<target>
+  <id>DUMP</id>
+  <name>DUMP</name>
+  <username></username>
+  <port>${dumpPortNumber}</port>
+  <targetType>sruUpdate</targetType>
+  <path>/dump</path>
+  <baseurl>localhost</baseurl>
+</target>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/integration-data/data/integration.test.repository version_7.0/test/integration-data/data/integration.test.repository
--- version_6.1/test/integration-data/data/integration.test.repository	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/test/integration-data/data/integration.test.repository	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,15 @@
+<?xml version="1.0"?>
+<repository>
+  <id>integrationtest</id>
+  <repositoryGroupId>IntegrationTest</repositoryGroupId>
+  <use>true</use>
+  <complete></complete>
+  <action></action>
+  <baseurl>http://localhost:${helperServerPortNumber}/files/listrecords.oai</baseurl>
+  <set></set>
+  <collection>Integration</collection>
+  <targetId>DUMP</targetId>
+  <metadataPrefix>header</metadataPrefix>
+  <mappingId>99ff846d-f05d-4bb8-be3f-c1b5039b50e5</mappingId>
+  <maximumIgnore>5</maximumIgnore>
+</repository>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/integration-data/files/listrecords.oai version_7.0/test/integration-data/files/listrecords.oai
--- version_6.1/test/integration-data/files/listrecords.oai	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/test/integration-data/files/listrecords.oai	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,127 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd">
+  <responseDate>2011-03-18T10:48:58Z</responseDate>
+  <request metadataPrefix="header" verb="ListRecords">http://localhost/listrecords.oai</request>
+  <ListRecords>
+    <record>
+      <header>
+        <identifier>recordID1</identifier>
+        <datestamp>2011-03-11T14:44:32Z</datestamp>
+      </header>
+      <metadata>
+        <someformat xmlns="ns:uri">testrecord1</someformat>
+      </metadata>
+    </record>
+    <record>
+      <header>
+        <identifier>recordID2</identifier>
+        <datestamp>2011-03-11T14:44:32Z</datestamp>
+      </header>
+      <metadata>
+        <someformat xmlns="ns:uri">testrecord2</someformat>
+      </metadata>
+    </record>
+    <record>
+      <header>
+        <identifier>recordID3</identifier>
+        <datestamp>2011-03-11T14:44:33Z</datestamp>
+      </header>
+      <metadata>
+        <someformat xmlns="ns:uri">testrecord3</someformat>
+      </metadata>
+    </record>
+    <record>
+      <header status="deleted">
+        <identifier>recordID3</identifier>
+        <datestamp>2011-03-11T14:44:33Z</datestamp>
+      </header>
+    </record>
+    <record>
+      <header>
+        <identifier>recordID4</identifier>
+        <datestamp>2011-03-11T14:44:33Z</datestamp>
+      </header>
+      <metadata>
+        <someformat xmlns="ns:uri">testrecord4</someformat>
+      </metadata>
+    </record>
+    <record>
+      <header>
+        <identifier>recordID5</identifier>
+        <datestamp>2011-03-11T14:44:33Z</datestamp>
+      </header>
+      <metadata>
+        <someformat xmlns="ns:uri">testrecord5</someformat>
+      </metadata>
+    </record>
+    <record>
+      <header>
+        <identifier>recordID6</identifier>
+        <datestamp>2011-03-11T14:44:33Z</datestamp>
+      </header>
+      <metadata>
+        <someformat xmlns="ns:uri">testrecord6</someformat>
+      </metadata>
+    </record>
+    <record>
+      <header status="deleted">
+        <identifier>recordID6</identifier>
+        <datestamp>2011-03-11T14:44:33Z</datestamp>
+      </header>
+    </record>
+    <record>
+      <header>
+        <identifier>recordID7</identifier>
+        <datestamp>2011-03-11T14:44:33Z</datestamp>
+      </header>
+      <metadata>
+        <someformat xmlns="ns:uri">testrecord7</someformat>
+      </metadata>
+    </record>
+    <record>
+      <header>
+        <identifier>recordID8</identifier>
+        <datestamp>2011-03-11T14:44:34Z</datestamp>
+      </header>
+      <metadata>
+        <someformat xmlns="ns:uri">testrecord8</someformat>
+      </metadata>
+    </record>
+    <record>
+      <header>
+        <identifier>recordID9</identifier>
+        <datestamp>2011-03-11T14:44:34Z</datestamp>
+      </header>
+      <metadata>
+        <someformat xmlns="ns:uri">testrecord9</someformat>
+      </metadata>
+    </record>
+    <record>
+      <header>
+        <identifier>recordID10</identifier>
+        <datestamp>2011-03-11T14:44:34Z</datestamp>
+      </header>
+      <metadata>
+        <someformat xmlns="ns:uri">testrecord10</someformat>
+      </metadata>
+    </record>
+    <record>
+      <header>
+        <identifier>recordID11</identifier>
+        <datestamp>2011-03-11T14:44:34Z</datestamp>
+      </header>
+      <metadata>
+        <someformat xmlns="ns:uri">testrecord11</someformat>
+      </metadata>
+    </record>
+    <record>
+      <header>
+        <identifier>recordID12</identifier>
+        <datestamp>2011-03-11T14:44:34Z</datestamp>
+      </header>
+      <metadata>
+        <someformat xmlns="ns:uri">testrecord12</someformat>
+      </metadata>
+    </record>
+  </ListRecords>
+</OAI-PMH>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/integration-data/helperserver.py version_7.0/test/integration-data/helperserver.py
--- version_6.1/test/integration-data/helperserver.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/test/integration-data/helperserver.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,151 @@
+#!/usr/bin/env python2.5
+## begin license ##
+#
+#    Meresco Components are components to build searchengines, repositories
+#    and archives, based on Meresco Core.
+#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2009, 2011 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+#
+#    This file is part of Meresco Components.
+#
+#    Meresco Components is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    Meresco Components is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with Meresco Components; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+from __future__ import with_statement
+
+from test.mocksaharaget import MockSaharaGet
+
+from glob import glob
+from sys import path, argv, exit
+
+from weightless.io import Reactor
+from sys import stdout
+from os.path import abspath, dirname, join, isdir, basename
+from os import makedirs
+from meresco.components.http import ObservableHttpServer, PathFilter, FileServer, StringServer
+from meresco.components.http.utils import ContentTypePlainText
+from meresco.components.sru.srurecordupdate import RESPONSE_XML, DIAGNOSTIC_XML, escapeXml, bind_string
+from meresco.core import Observable, be
+from re import compile
+from traceback import format_exc
+
+mydir = dirname(abspath(__file__))
+notWordCharRE = compile('\W+')
+
+class InvalidDataException(Exception):
+    pass
+
+INVALID_COMPONENT_DIAGNOSTIC_XML = DIAGNOSTIC_XML
+INVALID_DATA_DIAGNOSTIC_XML = DIAGNOSTIC_XML.replace("12/1", "12/12")
+
+class Dump(object):
+    def __init__(self, dumpdir):
+        self._dumpdir = dumpdir
+        self._number = self._findLastNumber()
+
+    def handleRequest(self, Body='', **kwargs):
+        yield '\r\n'.join(['HTTP/1.0 200 Ok', 'Content-Type: text/xml, charset=utf-8\r\n', ''])
+        try:
+            updateRequest = bind_string(Body).updateRequest
+            print self._ignoreAll, str(updateRequest.action)
+            if self._ignoreAll and str(updateRequest.action) == "info:srw/action/1/replace":
+                raise InvalidDataException()
+            recordId = str(updateRequest.recordIdentifier)
+            normalizedRecordId = notWordCharRE.sub('_', recordId)
+            self._number +=1
+            filename = '%05d_%s.updateRequest' %(self._number, normalizedRecordId)
+            with open(join(self._dumpdir, filename), 'w') as f:
+                print recordId
+                stdout.flush()
+                updateRequest.xml(f)
+            answer = RESPONSE_XML % {
+                "operationStatus": "success",
+                "diagnostics": ""}
+        except InvalidDataException, e:
+            answer = RESPONSE_XML % {
+                "operationStatus": "fail",
+                "diagnostics": INVALID_DATA_DIAGNOSTIC_XML % escapeXml(format_exc())}
+        except Exception, e:
+            answer = RESPONSE_XML % {
+                "operationStatus": "fail",
+                "diagnostics": INVALID_COMPONENT_DIAGNOSTIC_XML % escapeXml(format_exc())}
+        yield answer
+
+    def _findLastNumber(self):
+        return max([int(basename(f)[:5]) for f in glob(join(self._dumpdir, '*.updateRequest'))]+[0])
+
+    def reset(self):
+        self._ignoreAll = False
+
+    def ignoreAll(self):
+        self._ignoreAll = True
+
+
+class StartTest(Observable):
+    def handleRequest(self, arguments, **kwargs):
+        name = arguments.get('name', [None])[0]
+        self.any.reset()
+        if name == "integration.harvestertest.HarvesterTest.testInvalidIgnoredUptoMaxIgnore" or \
+            name == "integration.internalservertest.InternalServerTest.testGetStatus" or \
+            name == "integration.internalservertest.InternalServerTest.testListAllRepositories" or \
+            name == "integration.internalservertest.InternalServerTest.testViewIgnoredRecord":
+            self.any.ignoreAll()
+        yield '\r\n'.join(['HTTP/1.0 200 Ok', 'Content-Type: text/plain, charset=utf-8\r\n', ''])
+
+def main(reactor, portNumber, dumpdir):
+    isdir(dumpdir) or makedirs(dumpdir)
+    dump = Dump(dumpdir)
+    server = be(
+        (Observable(),
+            (ObservableHttpServer(reactor, portNumber),
+                (PathFilter("/dump"),
+                    (dump,)
+                ),
+                (PathFilter("/starttest"),
+                    (StartTest(),
+                        (dump,)
+                    )
+                ),
+                (PathFilter("/files"),
+                    (FileServer(mydir),)
+                ),
+                (PathFilter("/saharaget"),
+                    (MockSaharaGet(),)
+                ),
+                (PathFilter("/ready"),
+                    (StringServer('yes', ContentTypePlainText),)
+                )
+            )
+        )
+    )
+    server.once.observer_init()
+
+if __name__== '__main__':
+    args = argv[1:]
+    if len(args) != 2:
+        print "Usage %s <portnumber> <dumpdir>" % argv[0]
+        exit(1)
+    portNumber = int(args[0])
+    dumpdir = args[1]
+    reactor = Reactor()
+    main(reactor, portNumber, dumpdir)
+    print 'Ready to rumble the dumpserver at', portNumber
+    print '  - dumps are written to', dumpdir
+    stdout.flush()
+    reactor.loop()
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/integration-data/start-integrationtest-harvester.py version_7.0/test/integration-data/start-integrationtest-harvester.py
--- version_6.1/test/integration-data/start-integrationtest-harvester.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/test/integration-data/start-integrationtest-harvester.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,41 @@
+#!/usr/bin/env python
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+# This script should be run by a user with write access to the logDir and stateDir
+# specified in the apache configuration
+
+from meresco.harvester.startharvester import StartHarvester
+from meresco.harvester.saharaget import SaharaGet
+
+from test import mocksaharaget
+
+SaharaGet._read = mocksaharaget.read
+
+StartHarvester().start()
+
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/_integrationtest.py version_7.0/test/_integrationtest.py
--- version_6.1/test/_integrationtest.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/test/_integrationtest.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,41 @@
+#!/usr/bin/env python2.5
+
+from os import system                               #DO_NOT_DISTRIBUTE
+from glob import glob                               #DO_NOT_DISTRIBUTE
+from sys import path as systemPath                  #DO_NOT_DISTRIBUTE
+system('find .. -name "*.pyc" | xargs rm -f')       #DO_NOT_DISTRIBUTE
+for path in glob('../deps.d/*'):                    #DO_NOT_DISTRIBUTE
+    systemPath.insert(0, path)                      #DO_NOT_DISTRIBUTE
+systemPath.insert(0, '..')                          #DO_NOT_DISTRIBUTE
+
+from sys import argv
+
+from testrunner import TestRunner
+
+from integration import globalSetUp, globalTearDown
+
+flags = ['--fast']
+
+if __name__ == '__main__':
+    fastMode = '--fast' in argv
+    for flag in flags:
+        if flag in argv:
+            argv.remove(flag)
+
+
+    runner = TestRunner()
+    runner.addGroup('default', [
+            'integration.harvestertest.HarvesterTest',
+        ],
+        groupSetUp = lambda: globalSetUp(fastMode, 'default'),
+        groupTearDown = lambda: globalTearDown())
+
+    runner.addGroup('internal-server', [
+            'integration.internalservertest.InternalServerTest',
+        ],
+        groupSetUp = lambda: globalSetUp(fastMode, 'internal-server'),
+        groupTearDown = lambda: globalTearDown())
+
+    testnames = argv[1:]
+    runner.run(testnames)
+    
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/integrationtest.sh version_7.0/test/integrationtest.sh
--- version_6.1/test/integrationtest.sh	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/test/integrationtest.sh	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,31 @@
+#!/bin/bash
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+export LANG=en_US.UTF-8
+export PYTHONPATH=.:$PYTHONPATH
+python2.5 _integrationtest.py "$@"
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/mappingtest.py version_7.0/test/mappingtest.py
--- version_6.1/test/mappingtest.py	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/test/mappingtest.py	2011-03-29 17:08:20.000000000 +0200
@@ -7,10 +7,11 @@
 #        Seek You Too B.V. (CQ2) http://www.cq2.nl
 #    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
 #    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
 #    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
 #       http://www.kennisnetictopschool.nl
 #    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#    Copyright (C) 2011 Stichting Kennisnet Ict http://www.kennisnet.nl 
 #
 #    This file is part of "Meresco Harvester"
 #
@@ -31,69 +32,14 @@
 ## end license ##
 
 import unittest
-from merescoharvester.harvester.mapping import Mapping, TestRepository, DataMapException, DataMapAssertionException, parse_xml
+from meresco.harvester.mapping import Mapping, TestRepository, DataMapException, DataMapAssertionException, parse_xml
 import os, tempfile
-from merescoharvester.harvester import mapping
+from meresco.harvester import mapping
 from StringIO import StringIO
-from merescoharvester.harvester.eventlogger import StreamEventLogger
+from meresco.harvester.eventlogger import StreamEventLogger
 from slowfoot.wrappers import wrapp
 
 class MappingTest(unittest.TestCase):
-    def testCreateUploadFields(self):
-        dcmap = Mapping('mappingId')
-        dcmap.code = mapping.execcode
-        header = parse_xml("""<header><identifier>oai:ident:321</identifier><datestamp>2005-08-29T07:08:09Z</datestamp></header>""").header
-        metadata = parse_xml("""<metadata>
-        <dc>
-        <identifier>bla</identifier>
-        <identifier>http://bla.example.org</identifier>
-        <title>Title</title>
-        <description>Description1</description>
-        <description>Description2</description>
-        <subject>sub1</subject>
-        <subject>sub2</subject>
-        <subject>sub3</subject>
-        <creator>Jonkers, J</creator></dc></metadata>""").metadata
-        about = parse_xml('<about/>').about
-
-        uploadfields = dcmap.createUpload(TestRepository(), header, metadata, about).fields
-        self.assertEquals('oai:ident:321', uploadfields['generic2'])
-        self.assertEquals(str, type(uploadfields['generic2']))
-        self.assertEquals('repository.id', uploadfields['generic1'])
-        self.assertEquals('repository.institute', uploadfields['generic3'])
-        self.assertEquals('Title', uploadfields['meta_dc.title'])
-        self.assertEquals('Title', uploadfields['title'])
-        self.assertEquals('Description1; Description2', uploadfields['meta_dc.description'])
-        self.assertEquals('sub1; sub2; sub3', uploadfields['meta_dc.subject'])
-        self.assertEquals('TitleDescription1; Description2sub1; sub2; sub3', uploadfields['data'])
-        self.assertEquals('bla; http://bla.example.org', uploadfields['url'])
-        self.assertEquals('bla; http://bla.example.org', uploadfields['meta_dc.identifier'])
-        self.assertEquals('Jonkers, J', uploadfields['meta_dc.creator'])
-        self.assertEquals('utf-8', uploadfields['charset'])
-
-    def testOtherFile(self):
-        testcode="""
-upload.fields['charset']=u'utf-8'
-upload.fields['data'] = 'zo maar iets'
-upload.fields['title'] = 'Dit is een test'"""
-
-        dcmap = Mapping('mappingId')
-        dcmap.code = testcode
-        fields = dcmap.createUpload(TestRepository(),wrapp(''),None, None).fields
-        self.assert_(fields)
-
-    def testValidMapping(self):
-        code = """
-upload.fields['charset']=u'utf-8'
-upload.fields['data'] = 'zo maar iets'
-upload.fields['title'] = 'Dit is een test'
-upload.fields['blah'] = input.header.identifier
-upload.fields['repository'] = input.repository.id"""
-        datamap = Mapping('mappingId')
-        datamap.code = code
-        self.assert_(datamap.isValid())
-        datamap.validate()
-
     def testInValidMapping(self):
         datamap = Mapping('mappingId')
         datamap.code ="""upload.parts['unfinishpython"""
@@ -107,11 +53,8 @@
     def testInValidWithImportMapping(self):
         datamap = Mapping('mappingId')
         datamap.code = """
-upload.fields['charset']=u'utf-8'
-upload.fields['data'] = 'zo maar iets'
-upload.fields['title'] = 'Dit is een test'
+upload.parts['record']="<somexml/>"
 import os
-#uploadfield['tikfout']='bla'
 """
         self.assert_(not datamap.isValid())
         try:
@@ -120,50 +63,27 @@
         except DataMapException, e:
             self.assertEquals('Import not allowed', str(e))
 
-    def testInValidCodeMapping(self):
-        datamap = Mapping('mappingId')
-        datamap.code = """
-upload.fields['charset']=u'utf-8'
-upload.fields['data'] = 'zo maar iets'
-upload.fields['title'] = 'Dit is een test'
-upload.fields['tikfout']='bla
-"""
-        self.assert_(not datamap.isValid())
-        try:
-            datamap.validate()
-            self.fail()
-        except:
-            pass
-
     def testLogging(self):
         datamap = Mapping('mappingId')
         datamap.code = """
-upload.fields['charset']=u'utf-8'
-upload.fields['data'] = 'zo maar iets'
-upload.fields['title'] = 'Dit is een test'
+upload.parts['record']="<somexml/>"
 logger.error('Iets om te zeuren')
 """
-        header = parse_xml("""<header><identifier>oai:ident:321</identifier><datestamp>2005-08-29T07:08:09Z</datestamp></header>""").header
-        metadata = parse_xml("""<metadata></metadata>""").metadata
-        about = parse_xml('<about/>').about
+        record = parse_xml("""<record><header><identifier>oai:ident:321</identifier><datestamp>2005-08-29T07:08:09Z</datestamp></header><metadata></metadata><about/></record>""").record
         stream = StringIO()
         logger = StreamEventLogger(stream)
-        upload = datamap.createUpload(TestRepository(),header,metadata, about, logger)
+        upload = datamap.createUpload(TestRepository(), record, logger)
         self.assertEquals('ERROR\t[]\tIets om te zeuren\n',stream.getvalue()[26:])
 
     def testNoLogging(self):
         datamap = Mapping('mappingId')
         datamap.code = """
-upload.fields['charset']=u'utf-8'
-upload.fields['data'] = 'zo maar iets'
-upload.fields['title'] = 'Dit is een test'
+upload.parts['record']="<somexml/>"
 logger.error('Iets om te zeuren')
 """
-        header = parse_xml("""<header><identifier>oai:ident:321</identifier><datestamp>2005-08-29T07:08:09Z</datestamp></header>""").header
-        metadata = parse_xml("""<metadata></metadata>""").metadata
-        about = parse_xml('<about/>').about
-        upload = datamap.createUpload(TestRepository(),header,metadata, about)
-        self.assertEquals('Dit is een test',upload.fields['title'])
+        record = parse_xml("""<record><header><identifier>oai:ident:321</identifier><datestamp>2005-08-29T07:08:09Z</datestamp></header><metadata></metadata><about/></record>""").record
+        upload = datamap.createUpload(TestRepository(), record)
+        self.assertEquals('<somexml/>',upload.parts['record'])
 
     def testJoin(self):
         metadata = parse_xml("""<metadata><dc>
@@ -179,81 +99,56 @@
         datamap.code = """
 doAssert(1==1)
 doAssert(1==2, "1 not equal 2")
-upload.fields['charset']=u'utf-8'
-upload.fields['data'] = 'zo maar iets'
-upload.fields['title'] = 'Dit is een test'"""
+upload.parts['record']="<somexml/>"
+"""
 
         stream = StringIO()
         logger = StreamEventLogger(stream)
         try:
-            header = parse_xml("""<header><identifier>oai:ident:321</identifier></header>""").header
-            datamap.createUpload(TestRepository(),header,None, None, logger, doAsserts=True)
+            record = parse_xml("""<record><header><identifier>oai:ident:321</identifier><datestamp>2005-08-29T07:08:09Z</datestamp></header><metadata></metadata><about/></record>""").record
+            datamap.createUpload(TestRepository(), record, logger, doAsserts=True)
             self.fail()
         except DataMapAssertionException, ex:
             self.assertEquals('ERROR\t[repository.id:oai:ident:321]\tAssertion: 1 not equal 2\n',stream.getvalue()[26:])
             self.assertEquals('1 not equal 2', str(ex))
 
         try:
-            datamap.createUpload(TestRepository(),wrapp(''),None, None, doAsserts=True)
+            datamap.createUpload(TestRepository(), record=wrapp(''), doAsserts=True)
             self.fail()
         except DataMapAssertionException, ex:
             self.assertEquals('1 not equal 2', str(ex))
 
         stream = StringIO()
         logger = StreamEventLogger(stream)
-        datamap.createUpload(TestRepository(),wrapp(''),None, None, logger, doAsserts=False)
+        datamap.createUpload(TestRepository(),wrapp(''), logger, doAsserts=False)
         self.assertEquals('',stream.getvalue())
 
-    def assertField(self, expected, fieldname, code):
+    def assertPart(self, expected, partname, code):
         datamap = Mapping('mappingId')
         datamap.code = code
-        header = parse_xml("""<header><identifier>oai:ident:321</identifier><datestamp>2005-08-29T07:08:09Z</datestamp></header>""").header
-        metadata = parse_xml("""<metadata></metadata>""").metadata
-        about = parse_xml('<about/>').about
-        upload = datamap.createUpload(TestRepository(),header,metadata, about)
-        self.assertEquals(expected,upload.fields[fieldname])
+        record = parse_xml("""<record><header><identifier>oai:ident:321</identifier><datestamp>2005-08-29T07:08:09Z</datestamp></header></record>""").record
+        upload = datamap.createUpload(TestRepository(), record)
+        self.assertEquals(expected,upload.parts[partname])
 
     def testUrlEncode(self):
-        code = """upload.fields['url'] = 'http://some/one?'+urlencode({'id':'oai:id:3/2'})"""
-        self.assertField('http://some/one?id=oai%3Aid%3A3%2F2','url', code)
+        code = """upload.parts['url'] = 'http://some/one?'+urlencode({'id':'oai:id:3/2'})"""
+        self.assertPart('http://some/one?id=oai%3Aid%3A3%2F2','url', code)
 
     def testXmlEscape(self):
-        code = """upload.fields['xml'] = '<tag>' + xmlEscape('&<>') + '</tag>'"""
-        self.assertField('<tag>&amp;&lt;&gt;</tag>', 'xml', code)
+        code = """upload.parts['xml'] = '<tag>' + xmlEscape('&<>') + '</tag>'"""
+        self.assertPart('<tag>&amp;&lt;&gt;</tag>', 'xml', code)
 
     def testSkip(self):
         datamap = Mapping('mappingId')
         datamap.code = """
 skipRecord("Don't like it here.")
 """
-        header = parse_xml("""<header><identifier>oai:ident:321</identifier><datestamp>2005-08-29T07:08:09Z</datestamp></header>""").header
-        metadata = parse_xml("""<metadata></metadata>""").metadata
-        about = parse_xml('<about/>').about
+        record = parse_xml("""<record><header><identifier>oai:ident:321</identifier><datestamp>2005-08-29T07:08:09Z</datestamp></header><metadata></metadata><about/></record>""").record
         stream = StringIO()
         logger = StreamEventLogger(stream)
-        upload = datamap.createUpload(TestRepository(),header,metadata, about, logger)
-        self.assertEquals(None, upload)
-        self.assertEquals("SKIP\t[repository.id:oai:ident:321]\tDon't like it here.\n",stream.getvalue()[26:])
-
-    def testUploadGetSetProperty(self):
-        upload = mapping.Upload()
-        upload.setProperty('sortfields', ['generic4', 'generic5'])
-
-        self.assertEquals(['generic4', 'generic5'], upload.getProperty('sortfields'))
-
-    def testUploadPropertyKeyMonkeyProof(self):
-        upload = mapping.Upload()
-
-        upload.setProperty('CAPS', 1)
-        self.assertEquals(1, upload.getProperty('caps'))
-
-        upload.setProperty('S p A c E d ', 1)
-        self.assertEquals(1, upload.getProperty('spaced'))
-
-    def testUploadGetUnknownProperty(self):
-        upload = mapping.Upload()
-
-        self.assertEquals('', upload.getProperty('doesnotexist'))
+        upload = datamap.createUpload(TestRepository(), record, logger)
+        self.assertTrue(upload.skip)
+        self.assertEquals("SKIP\t[repository.id:oai:ident:321]\tDon't like it here.\n", stream.getvalue()[26:])
 
     def testCreateUploadParts(self):
         upload = mapping.Upload()
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/mockoairequest.py version_7.0/test/mockoairequest.py
--- version_6.1/test/mockoairequest.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/test/mockoairequest.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,29 @@
+from slowfoot import binderytools
+from os.path import join
+from urllib import urlencode
+
+from meresco.harvester.oairequest import OaiRequest
+
+class MockOaiRequest(OaiRequest):
+    def __init__(self, url):
+        OaiRequest.__init__(self,url)
+        self._createMapping()
+        
+    def _request(self, argslist):
+        filename = self.findFile(argslist)
+        return binderytools.bind_file(filename)
+
+    def findFile(self, argslist):
+        argslist.sort()
+        return self._mapping[urlencode(argslist)]
+        
+    def _createMapping(self):
+        f = open(join(self._url, 'mapping.txt'), 'r')
+        self._mapping = {}
+        while 1:
+            request = f.readline().strip()
+            responsefile = f.readline().strip()
+            if not request or not responsefile:
+                break
+            self._mapping[request] = join(self._url, responsefile)
+        
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/mocksaharaget.py version_7.0/test/mocksaharaget.py
--- version_6.1/test/mocksaharaget.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/test/mocksaharaget.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,94 @@
+from time import gmtime, strftime
+from slowfoot.wrappers import wrapp
+from slowfoot.binderytools import bind_string, bind_file
+
+def buildResponseDateXml():
+    return """<responseDate>%s</responseDate>""" % strftime('%Y-%m-%dT%H:%M:%SZ', gmtime())
+
+def GetRepositories(domainId, **kwargs):
+    responseDateXml = buildResponseDateXml()
+    repositoryXml = readFile("integration.test.repository").repository.xml()
+    xml="""<?xml version="1.0" encoding="UTF-8"?>
+<saharaget xmlns="http://sahara.cq2.org/xsd/saharaget.xsd">
+ %(responseDateXml)s
+ <request>
+     <verb>GetRepositories</verb>
+     <domainId>%(domainId)s</domainId>
+ </request>
+ <GetRepositories>
+    %(repositoryXml)s
+ </GetRepositories>
+</saharaget>""" % locals()
+    return wrapp(bind_string(xml))
+
+def GetRepository(domainId, repositoryId, **kwargs):
+    responseDateXml = buildResponseDateXml()
+    repositoryXml = readFile("integration.test.repository").repository.xml()
+    xml="""<?xml version="1.0" encoding="UTF-8"?>
+<saharaget xmlns="http://sahara.cq2.org/xsd/saharaget.xsd">
+ %(responseDateXml)s
+ <request>
+     <verb>GetRepository</verb>
+     <domainId>%(domainId)s</domainId>
+     <repositoryId>%(repositoryId)s</repositoryId>
+ </request>
+ <GetRepository>
+    %(repositoryXml)s
+ </GetRepository>
+</saharaget>""" % locals()
+    return wrapp(bind_string(xml))
+
+def GetTarget(domainId, targetId, **kwargs):
+    responseDateXml = buildResponseDateXml()
+    targetXml = readFile("%s.target" % targetId).target.xml()
+    xml="""<?xml version="1.0" encoding="UTF-8"?>
+<saharaget xmlns="http://sahara.cq2.org/xsd/saharaget.xsd">
+ %(responseDateXml)s
+ <request>
+     <verb>GetTarget</verb>
+     <domainId>%(domainId)s</domainId>
+     <targetId>%(targetId)s</targetId>
+ </request>
+ <GetTarget>
+    %(targetXml)s
+ </GetTarget>
+</saharaget>""" % locals()
+    return wrapp(bind_string(xml))
+
+def GetMapping(domainId, mappingId, **kwargs):
+    responseDateXml = buildResponseDateXml()
+    mappingXml = readFile("%s.mapping" % mappingId).mapping.xml()
+    xml="""<?xml version="1.0" encoding="UTF-8"?>
+<saharaget xmlns="http://sahara.cq2.org/xsd/saharaget.xsd">
+ %(responseDateXml)s
+ <request>
+     <verb>GetMapping</verb>
+     <domainId>%(domainId)s</domainId>
+     <mappingId>%(mappingId)s</mappingId>
+ </request>
+ <GetMapping>
+    %(mappingXml)s
+ </GetMapping>
+</saharaget>""" % locals()
+    return wrapp(bind_string(xml))
+
+def readFile(fileName):
+    return bind_file("data/" + fileName)
+
+def read(self, verb, **kwargs):
+    print verb, kwargs
+    return globals()[verb](**kwargs)
+
+class MockSaharaGet(object):
+
+    def handleRequest(self, arguments, **kwargs):
+        yield '\r\n'.join(['HTTP/1.0 200 Ok', 'Content-Type: text/xml, charset=utf-8\r\n', ''])
+
+        verb = arguments.get('verb', [None])[0]
+        domainId = arguments.get('domainId', [None])[0]
+        repositoryId = arguments.get('repositoryId', [None])[0]
+        targetId = arguments.get('targetId', [None])[0]
+        mappingId = arguments.get('mappingId', [None])[0]
+        yield read(**locals()).xml()
+
+
Only in version_6.1/test: mytestcase.py
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/oairequesttest.py version_7.0/test/oairequesttest.py
--- version_6.1/test/oairequesttest.py	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/test/oairequesttest.py	2011-03-29 17:08:20.000000000 +0200
@@ -33,18 +33,19 @@
 import unittest
 from slowfoot import binderytools
 from urllib import urlencode
-from merescoharvester.harvester.oairequest import OAIRequest, MockOAIRequest, OAIError
+from meresco.harvester.oairequest import OaiRequest, OAIError
+from mockoairequest import MockOaiRequest
 
-class OAIRequestTest(unittest.TestCase):
+class OaiRequestTest(unittest.TestCase):
     def setUp(self):
-        self.request = MockOAIRequest('mocktud')
+        self.request = MockOaiRequest('mocktud')
         
         
-    def testMockOAIRequest(self):
+    def testMockOaiRequest(self):
         binding = self.request.request({'verb':'ListRecords','metadataPrefix':'oai_dc'})
         self.assertEquals('2004-12-29T13:19:27Z',str(binding.OAI_PMH.responseDate))
         
-    def testOtherOAIRequest(self):
+    def testOtherOaiRequest(self):
         binding = self.request.request({'verb':'GetRecord','metadataPrefix':'oai_dc', 'identifier':'oai:rep:12345'})
         self.assertEquals('2005-04-28T12:16:27Z',str(binding.OAI_PMH.responseDate))
         
@@ -97,7 +98,8 @@
         
         
     def xtest_LIVE_Retrieve(self):
-        request = OAIRequest('http://library.wur.nl/oai')
+        request = OaiRequest('http://library.wur.nl/oai')
         amarabinding = request.request({'verb':'ListRecords','metadataPrefix':'oai_dc'})
         amarabinding.OAI_PMH
                     
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/onlineharvesttest.py version_7.0/test/onlineharvesttest.py
--- version_6.1/test/onlineharvesttest.py	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/test/onlineharvesttest.py	2011-03-29 17:08:20.000000000 +0200
@@ -7,10 +7,11 @@
 #        Seek You Too B.V. (CQ2) http://www.cq2.nl
 #    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
 #    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
 #    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
 #       http://www.kennisnetictopschool.nl
 #    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#    Copyright (C) 2011 Stichting Kennisnet Ict http://www.kennisnet.nl 
 #
 #    This file is part of "Meresco Harvester"
 #
@@ -31,9 +32,9 @@
 ## end license ##
 
 import unittest
-from merescoharvester.harvester.onlineharvest import OnlineHarvest
+from meresco.harvester.onlineharvest import OnlineHarvest
 from StringIO import StringIO
-from merescoharvester.harvester.mapping import Mapping, Upload, DataMapAssertionException, DEFAULT_DC_CODE
+from meresco.harvester.mapping import Mapping, Upload, DataMapAssertionException, DEFAULT_DC_CODE
 from slowfoot.wrappers import wrapp
 import os
 
@@ -87,13 +88,13 @@
             harvest.performMapping(mapping, data)
             self.fail()
         except Exception, ex:
-            self.assertEquals('Mushroom, mushroom',str(ex))
+            self.assertEquals('Mushroom, mushroom', str(ex))
         self.assertEquals('',output.getvalue())
 
 
 
     #mocking
-    def createUpload(self, repository, header, metadata, about, logger=None, doAssertions=False):
+    def createUpload(self, repository, record, logger=None, doAssertions=False):
         self.createUpload_args={'doAssertions':doAssertions}
         if self.mock_createUpload_exception:
             ex = self.mock_createUpload_exception
@@ -102,7 +103,3 @@
         upload = Upload()
         return upload
 
-    def createEmptyUpload(self, repository, header, metadata, about):
-        upload = Upload()
-        upload.init(repository, header, metadata, about)
-        return upload
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/repositorystatustest.py version_7.0/test/repositorystatustest.py
--- version_6.1/test/repositorystatustest.py	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/test/repositorystatustest.py	2011-03-29 17:08:20.000000000 +0200
@@ -30,7 +30,7 @@
 #
 ## end license ##
 import unittest
-from merescoharvester.harvester.repositorystatus import RepositoryStatus
+from meresco.harvester.repositorystatus import RepositoryStatus
 import tempfile
 from StringIO import StringIO
 
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/repositorytest.py version_7.0/test/repositorytest.py
--- version_6.1/test/repositorytest.py	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/test/repositorytest.py	2011-03-29 17:08:20.000000000 +0200
@@ -30,15 +30,15 @@
 #    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 #
 ## end license ##
-from merescoharvester.harvester.saharaget import SaharaGet, SaharaGetException
-from merescoharvester.harvester.eventlogger import NilEventLogger
-from merescoharvester.harvester.harvesterlog import HarvesterLog
-from merescoharvester.harvester.repository import Repository
-from merescoharvester.harvester.action import Action, DONE, ActionFactory, ActionFactoryException
-from merescoharvester.harvester.oairequest import OAIError
+from meresco.harvester.saharaget import SaharaGet, SaharaGetException
+from meresco.harvester.eventlogger import NilEventLogger
+from meresco.harvester.harvesterlog import HarvesterLog
+from meresco.harvester.repository import Repository
+from meresco.harvester.action import Action, DONE, ActionFactory, ActionFactoryException
+from meresco.harvester.oairequest import OAIError
 from slowfoot.wrappers import wrapp
 from slowfoot.binderytools import bind_string
-from merescoharvester.harvester.timeslot import Timeslot, Wildcard
+from meresco.harvester.timeslot import Timeslot, Wildcard
 from cq2utils import CallTrace
 import tempfile, os, shutil
 import unittest
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/saharagettest.py version_7.0/test/saharagettest.py
--- version_6.1/test/saharagettest.py	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/test/saharagettest.py	2011-03-29 17:08:20.000000000 +0200
@@ -31,7 +31,7 @@
 ## end license ##
 
 import unittest
-from merescoharvester.harvester.saharaget import SaharaGet, SaharaGetException
+from meresco.harvester.saharaget import SaharaGet, SaharaGetException
 from slowfoot.wrappers import wrapp
 from slowfoot import binderytools
 
@@ -60,9 +60,6 @@
         self.assertEquals('aMappingId', repository.mappingId)
         self.assertEquals('true', repository.use)
         self.assertEquals('cq2Group2', repository.repositoryGroupId)
-        # Test deprecated stuff
-        self.assertEquals(repository.id, repository.key)
-        self.assertEquals(repository.repositoryGroupId, repository.institutionkey)
         # Test read call
         self.assertEquals(1, len(self.mock_read_args))
         self.assertEquals('GetRepository', self.mock_read_args[0]['verb'])
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/smoothactiontest.py version_7.0/test/smoothactiontest.py
--- version_6.1/test/smoothactiontest.py	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/test/smoothactiontest.py	2011-03-29 17:08:20.000000000 +0200
@@ -33,14 +33,15 @@
 import shutil, os
 from os.path import join
 from tempfile import mkdtemp
-from merescoharvester.harvester.repository import Repository
-from merescoharvester.harvester.action import SmoothAction, DONE
+from meresco.harvester.repository import Repository
+from meresco.harvester.action import SmoothAction, DONE
 from slowfoot.wrappers import wrapp
-from merescoharvester.harvester.harvester import HARVESTED, NOTHING_TO_DO
-from merescoharvester.harvester.deleteids import readIds
-from merescoharvester.harvester import action
+from meresco.harvester.harvester import HARVESTED, NOTHING_TO_DO
+from meresco.harvester.deleteids import readIds
+from meresco.harvester import action
 from sets import Set
-from merescoharvester.harvester.eventlogger import NilEventLogger
+from meresco.harvester.eventlogger import NilEventLogger
+from cq2utils import CallTrace
 
 class SmoothActionTest(ActionTestCase):
     def setUp(self):
@@ -156,19 +157,13 @@
 
 
     def testHarvest(self):
-        class MockHarvester(object):
-            usedrep, usedStateDir, usedLogDir = None, 'some path', 'some path'
-            def __init__(self, rep, stateDir, logDir, generalHarvestLog):
-                MockHarvester.usedrep = rep
-                MockHarvester.usedStateDir = stateDir
-                MockHarvester.usedLogDir = logDir
-            def harvest(self):
-                return 'mockharvest', False
-        action.Harvester = MockHarvester
-        self.assertEquals(('mockharvest', False), self.smoothaction._harvest())
-        self.assertEquals(self.repo, MockHarvester.usedrep)
-        self.assertEquals(self.stateDir, MockHarvester.usedStateDir)
-        self.assertEquals(self.logDir, MockHarvester.usedLogDir)
+        harvester = CallTrace('harvester')
+        self.smoothaction._createHarvester = lambda: harvester
+        harvester.returnValues['harvest'] = ('result', True)
+
+        result = self.smoothaction._harvest()
+        self.assertEquals(['harvest'], [m.name for m in harvester.calledMethods]) 
+        self.assertEquals(('result', True), result)
 
     def testResetState_WithoutPreviousCleanState(self):
         self.writeLogLine(2010, 3, 1, token='resumptionToken')
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/sruupdateuploadertest.py version_7.0/test/sruupdateuploadertest.py
--- version_6.1/test/sruupdateuploadertest.py	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/test/sruupdateuploadertest.py	2011-03-29 17:08:20.000000000 +0200
@@ -8,10 +8,11 @@
 #        Seek You Too B.V. (CQ2) http://www.cq2.nl
 #    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
 #    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
 #    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
 #       http://www.kennisnetictopschool.nl
 #    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
 #
 #    This file is part of "Meresco Harvester"
 #
@@ -30,10 +31,14 @@
 #    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 #
 ## end license ##
+
 from cq2utils import CQ2TestCase, CallTrace
 from amara.binderytools import bind_string
+from lxml.etree import parse
+from StringIO import StringIO
 
-from merescoharvester.harvester.sruupdateuploader import SruUpdateUploader, UploaderException
+from meresco.harvester.sruupdateuploader import SruUpdateUploader, UploaderException, InvalidComponentException, InvalidDataException
+from httplib import SERVICE_UNAVAILABLE, OK as HTTP_OK
 
 class SruUpdateUploaderTest(CQ2TestCase):
     def setUp(self):
@@ -41,7 +46,7 @@
         self.target = CallTrace('SruUpdateTarget', verbose=True)
         self.uploader = SruUpdateUploader(self.target, CallTrace('eventlogger'))
         self.sentData = []
-        def sendData(data):
+        def sendData(anId, data):
             self.sentData.append(data)
         self.uploader._sendData = sendData
 
@@ -53,7 +58,6 @@
         }
         
     def testOne(self):
-
         self.uploader.send(self.upload)
         self.assertEquals(1, len(self.sentData))
 
@@ -70,31 +74,53 @@
 
     def testException(self):
         possibleSRUError="""<?xml version="1.0" encoding="UTF-8"?>
-<updateRequest xmlns:srw="info:srw/namespace/1/srw-schema" xmlns:ucp="info:srw/namespace/1/update">
+<srw:updateResponse xmlns:srw="http://www.loc.gov/zing/srw/" xmlns:ucp="info:lc/xmlns/update-v1">
     <srw:version>1.0</srw:version>
     <ucp:operationStatus>fail</ucp:operationStatus>
     <srw:diagnostics>
-            <diag:diagnostic xmlns:diag="http://www.loc.gov/zing/srw/diagnostic/">
+        <diag:diagnostic xmlns:diag="http://www.loc.gov/zing/srw/diagnostic/">
             <diag:uri>info:srw/diagnostic/12/1</diag:uri>
             <diag:details>Traceback (most recent call last): File "../meresco/components/sru/srurecordupdate.py", line 47, in handleRequest File "../meresco/framework/transaction.py", line 63, in unknown File "../meresco/framework/observable.py", line 101, in __call__ File "../meresco/framework/observable.py", line 109, in _callonce File "../meresco/framework/observable.py", line 109, in _callonce File "../meresco/framework/observable.py", line 109, in _callonce File "../meresco/framework/observable.py", line 106, in _callonce KeyError: '__id__' </diag:details>
             <diag:message>Invalid component: record rejected</diag:message>
         </diag:diagnostic>
     </srw:diagnostics>
-</updateRequest>"""
-        def sendData(data):
-            raise Exception(possibleSRUError)
-        self.uploader._sendData = sendData
+</srw:updateResponse>"""
+        eventLogger = CallTrace('eventlogger')
+        uploader = SruUpdateUploader(self.target, eventLogger)
+        uploader._sendDataToRemote = lambda data: (HTTP_OK, possibleSRUError)
         try:
-            self.uploader.send(self.upload)
+            uploader.send(self.upload)
             self.fail()
-        except UploaderException, e:
+        except InvalidComponentException, e:
+            self.assertEquals(self.upload.id, e.uploadId)
+
+    def testInvalidDataException(self):
+        possibleSRUValidationError="""<?xml version="1.0" encoding="UTF-8"?>
+<srw:updateResponse xmlns:srw="http://www.loc.gov/zing/srw/" xmlns:ucp="info:lc/xmlns/update-v1">
+    <srw:version>1.0</srw:version>
+    <ucp:operationStatus>fail</ucp:operationStatus>
+    <srw:diagnostics>
+        <diag:diagnostic xmlns:diag="http://www.loc.gov/zing/srw/diagnostic/">
+            <diag:uri>info:srw/diagnostic/12/12</diag:uri>
+            <diag:details>Xsd Validation error</diag:details>
+            <diag:message>Invalid data structure: record rejected</diag:message>
+        </diag:diagnostic>
+    </srw:diagnostics>
+</srw:updateResponse>"""
+        eventLogger = CallTrace('eventlogger')
+        uploader = SruUpdateUploader(self.target, eventLogger)
+        uploader._sendDataToRemote = lambda data: (HTTP_OK, possibleSRUValidationError)
+        try:
+            uploader.send(self.upload)
+            self.fail("Diagnostic code 12 should raise a validation exception")
+        except InvalidDataException, e:
             self.assertEquals(self.upload.id, e.uploadId)
 
-    def testRetryOn400(self):
+    def testRetryOnServiceUnavailable(self):
         eventLogger = CallTrace('eventlogger')
         uploader = SruUpdateUploader(self.target, eventLogger)
 
-        answers = [(200, "ALL IS WELL")]
+        answers = [(HTTP_OK, SUCCES_RESPONSE)]
         datas = []
         def sendDataToRemote(data):
             answer = answers.pop(0)
@@ -102,25 +128,25 @@
             return answer
 
         uploader._sendDataToRemote = sendDataToRemote
-        uploader._sendData("HOW IS EVERYTHING")
+        uploader._sendData(1, "HOW IS EVERYTHING")
 
         self.assertEquals(0, len(answers))
         self.assertEquals(1, len(datas))
 
-        answers = [(400, ''), (200, "ALL IS WELL")]
+        answers = [(SERVICE_UNAVAILABLE, ''), (HTTP_OK, SUCCES_RESPONSE)]
         datas = []
-        uploader._sendData("HOW IS EVERYTHING")
+        uploader._sendData(1, "HOW IS EVERYTHING")
         
         self.assertEquals(0, len(answers))
         self.assertEquals(2, len(datas))
         self.assertEquals(1, len(eventLogger.calledMethods))
-        self.assertEquals("Status 400 received while trying to upload", eventLogger.calledMethods[0].args[0])
+        self.assertEquals("Status 503, SERVICE_UNAVAILABLE received while trying to upload", eventLogger.calledMethods[0].args[0])
 
-    def testRetryOn400FailsAfter3Times(self):
+    def testRetryOnServiceUnavailableFailsAfter3Times(self):
         eventLogger = CallTrace('eventlogger')
         uploader = SruUpdateUploader(self.target, eventLogger)
         
-        answers = [(400, ''), (400, ''), (400, ''), (200, "ALL IS WELL")]
+        answers = [(SERVICE_UNAVAILABLE, ''), (SERVICE_UNAVAILABLE, ''), (SERVICE_UNAVAILABLE, ''), (HTTP_OK, SUCCES_RESPONSE)]
         datas = []
         def sendDataToRemote(data):
             answer = answers.pop(0)
@@ -130,13 +156,50 @@
         uploader._sendDataToRemote = sendDataToRemote
         exception = None
         try:
-            uploader._sendData("HOW IS EVERYTHING")
+            uploader._sendData(1, "HOW IS EVERYTHING")
             self.fail()
         except Exception, e:
             exception = e
 
         self.assertFalse(exception == None)
-        self.assertEquals("HTTP 400: ", str(e))
+        self.assertEquals('uploadId: "1", message: "HTTP 503: "', str(e))
         self.assertEquals(1, len(answers))
         self.assertEquals(3, len(datas))
         self.assertEquals(3, len(eventLogger.calledMethods))
+
+    def testParseMessageWithDiagnostic(self):
+        SRU_MESSAGE=parse(StringIO("""<?xml version="1.0" encoding="UTF-8"?>
+<srw:updateResponse xmlns:srw="http://www.loc.gov/zing/srw/" xmlns:ucp="info:lc/xmlns/update-v1">
+    <srw:version>1.0</srw:version>
+    <ucp:operationStatus>fail</ucp:operationStatus>
+    <srw:diagnostics>
+        <diag:diagnostic xmlns:diag="http://www.loc.gov/zing/srw/diagnostic/">
+            <diag:uri>info:srw/diagnostic/12/12</diag:uri>
+            <diag:details>Xsd Validation error</diag:details>
+            <diag:message>Invalid component: record rejected</diag:message>
+        </diag:diagnostic>
+    </srw:diagnostics>
+</srw:updateResponse>"""))
+
+        eventLogger = CallTrace('eventlogger')
+        uploader = SruUpdateUploader(self.target, eventLogger)
+        version, operationStatus, diagnostics = uploader._parseMessage(SRU_MESSAGE)
+        self.assertEquals("1.0", version)
+        self.assertEquals("fail", operationStatus)
+        self.assertEquals(("info:srw/diagnostic/12/12", "Xsd Validation error", "Invalid component: record rejected"), diagnostics)
+
+    def testParseMessage(self):
+        SRU_MESSAGE=parse(StringIO(SUCCES_RESPONSE))
+
+        eventLogger = CallTrace('eventlogger')
+        uploader = SruUpdateUploader(self.target, eventLogger)
+        version, operationStatus, diagnostics = uploader._parseMessage(SRU_MESSAGE)
+        self.assertEquals("1.0", version)
+        self.assertEquals("success", operationStatus)
+        self.assertEquals(None, diagnostics)
+        
+SUCCES_RESPONSE = """<?xml version="1.0" encoding="UTF-8"?>
+<srw:updateResponse xmlns:srw="http://www.loc.gov/zing/srw/" xmlns:ucp="info:lc/xmlns/update-v1">
+    <srw:version>1.0</srw:version>
+    <ucp:operationStatus>success</ucp:operationStatus>
+</srw:updateResponse>"""
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/statetest.py version_7.0/test/statetest.py
--- version_6.1/test/statetest.py	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/test/statetest.py	2011-03-29 17:08:20.000000000 +0200
@@ -31,7 +31,7 @@
 #
 ## end license ##
 
-from merescoharvester.harvester.state import State, getHarvestedUploadedRecords, getResumptionToken, getStartDate
+from meresco.harvester.state import State, getHarvestedUploadedRecords, getResumptionToken, getStartDate
 from cq2utils import CQ2TestCase
 from os.path import join
 
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/statustest.py version_7.0/test/statustest.py
--- version_6.1/test/statustest.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/test/statustest.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,92 @@
+## begin license ##
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from os import makedirs
+from os.path import join
+
+from cq2utils import CQ2TestCase
+
+from meresco.harvester.status import Status
+from lxml.etree import tostring
+
+class StatusTest(CQ2TestCase):
+
+    def setUp(self):
+        CQ2TestCase.setUp(self)
+        stateDir = join(self.tempdir, "state")
+        logDir = join(self.tempdir, "log")
+        self.domainId = "adomain"
+        makedirs(join(stateDir, self.domainId))
+        repoId1LogDir = join(logDir, self.domainId, "ignored", "repoId1")
+        repoId2LogDir = join(logDir, self.domainId, "ignored", "repoId2")
+        makedirs(repoId1LogDir)
+        makedirs(repoId2LogDir)
+        open(join(repoId1LogDir, "ignoredId1"), 'w').write("<diagnostic>ERROR1</diagnostic>")
+        open(join(repoId1LogDir, "ignoredId2"), 'w').write("<diagnostic>ERROR2</diagnostic>")
+        open(join(repoId2LogDir, "ignoredId3"), 'w').write("<diagnostic>ERROR3</diagnostic>")
+        open(join(stateDir, self.domainId, "repoId1_ignored.ids"), 'w').write("ignoredId1\nignoredId2")
+        open(join(stateDir, self.domainId, "repoId2_ignored.ids"), 'w').write("ignoredId3")
+        open(join(stateDir, self.domainId, "repoId3_ignored.ids"), 'w').write("")
+        self.status = Status(logDir, stateDir)
+
+    def testGetStatusForRepoIdAndDomainId(self):
+        self.assertEqualsWS("""<GetStatus>
+            <status repositoryId="repoId1">
+                <ignored>2</ignored>
+            </status>
+        </GetStatus>""", ''.join(self.status.getStatus(self.domainId, "repoId1")))
+        self.assertEqualsWS("""<GetStatus>
+            <status repositoryId="anotherRepoId">
+                <ignored>0</ignored>
+            </status>
+        </GetStatus>""", ''.join(self.status.getStatus(self.domainId, "anotherRepoId")))
+
+    def testGetStatusForDomainId(self):
+        self.assertEqualsWS("""<GetStatus>
+            <status repositoryId="repoId1">
+                <ignored>2</ignored>
+            </status>
+            <status repositoryId="repoId2">
+                <ignored>1</ignored>
+            </status>
+        </GetStatus>""", ''.join(self.status.getStatus(self.domainId, None)))
+
+    def testGetAllIgnoredRecords(self):
+        def ignoredRecords(repoId):
+            return list(self.status.ignoredRecords(self.domainId, repoId))
+        self.assertEquals(["ignoredId2", "ignoredId1"], ignoredRecords("repoId1"))
+        self.assertEquals(["ignoredId3"], ignoredRecords("repoId2"))
+        self.assertEquals([], ignoredRecords("repoId3"))
+        self.assertEquals([], ignoredRecords("repoId4"))
+
+    def testGetIgnoredRecord(self):
+        def getIgnoredRecord(repoId, recordId):
+            return tostring(self.status.getIgnoredRecord(self.domainId, repoId, recordId)) 
+        self.assertEquals("<diagnostic>ERROR1</diagnostic>", getIgnoredRecord("repoId1", "ignoredId1")) 
+        self.assertEquals("<diagnostic>ERROR2</diagnostic>", getIgnoredRecord("repoId1", "ignoredId2")) 
+        self.assertEquals("<diagnostic>ERROR3</diagnostic>", getIgnoredRecord("repoId2", "ignoredId3")) 
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/testrunner.py version_7.0/test/testrunner.py
--- version_6.1/test/testrunner.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/test/testrunner.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,162 @@
+## begin license ##
+#
+#    "HBO-Kennisbank" is a webportal that provides free access to student theses,
+#    publications and learning objects made available by the Universities of
+#    Applied Sciences in the Netherlands.
+#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+#    Copyright (C) 2011 SURFfoundation. http://www.surf.nl
+#    Copyright (C) 2010-2011 Seek You Too B.V. (CQ2) http://www.cq2.nl
+#
+#    This file is part of "HBO-Kennisbank"
+#
+#    "HBO-Kennisbank" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "HBO-Kennisbank" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "HBO-Kennisbank"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from sys import stdout, stderr
+from time import time
+from traceback import print_exc
+from unittest import TestSuite, TestLoader, TestResult as UnitTestResult
+
+class TestResult(UnitTestResult):
+    def __init__(self, stream=stdout, errStream=stderr, verbosity=1):
+        UnitTestResult.__init__(self)
+        self.showAll = verbosity > 1
+        self.dots = verbosity == 1
+        self._errStream = errStream
+        self._stream = stream
+
+    def startTest(self, test):
+        UnitTestResult.startTest(self, test)
+        if self.showAll:
+            self._errWrite(str(test))
+            self._errWrite(' ... ')
+
+    def addError(self, test, err):
+        UnitTestResult.addError(self, test, err)
+        if self.showAll:
+            self._errWrite('ERROR\n')
+        elif self.dots:
+            self._errWrite('E')
+
+    def addFailure(self, test, err):
+        UnitTestResult.addFailure(self, test, err)
+        if self.showAll:
+            self._errWrite('FAIL\n')
+        elif self.dots:
+            self._errWrite('F')
+
+    def addSuccess(self, test):
+        UnitTestResult.addSuccess(self, test)
+        if self.showAll:
+            self._errWrite('ok\n')
+        elif self.dots:
+            self._errWrite('.')
+
+    def printResult(self, timeTaken):
+        self._write('\n')
+        self._printErrorList('ERROR', self.errors)
+        self._printErrorList('FAIL', self.failures)
+        run = self.testsRun
+        self._write(sep2)
+        self._write("Ran %d test%s in %.3fs\n" % (run, run != 1 and "s" or "", timeTaken))
+        self._write("\n")
+        if not self.wasSuccessful():
+            output = "FAILED ("
+            failed, errored = map(len, (self.failures, self.errors))
+            if failed:
+                output += "failures=%d" % failed
+            if errored:
+                if failed: output += ", "
+                output += "errors=%d" % errored
+            self._write(output + ")\n")
+        else:
+            self._write("OK\n")
+
+    def _printErrorList(self, flavour, errors):
+        for test, err in errors:
+            self._write(sep1)
+            self._write("%s: %s\n" % (flavour, test.shortDescription() or str(test)))
+            self._write(sep2)
+            self._write("%s\n" % err)
+
+    def _errWrite(self, aString):
+        self._errStream.write(aString)
+        self._errStream.flush()
+
+    def _write(self, aString):
+        self._stream.write(aString)
+        self._stream.flush()
+
+
+class TestGroup(object):
+    def __init__(self, name, classnames=None, groupSetUp=lambda:None, groupTearDown=lambda:None):
+        self.name = name
+        self._classes = {}
+        for classname in (classnames or []):
+            self._loadClass(classname)
+        self._loader = TestLoader()
+        self.setUp = groupSetUp
+        self.tearDown = groupTearDown
+
+    def _loadClass(self, classname):
+        moduleName, className = classname.rsplit('.', 1)
+        cls = getattr(__import__(moduleName, globals(), locals(), [className]), className)
+        self._classes[className] = cls
+
+    def createSuite(self, testnames=None):
+        if not testnames:
+            testnames = sorted(self._classes.keys())
+        suite = TestSuite()
+        for testname in testnames:
+            testcase = testname.split('.')
+            testclass = self._classes.get(testcase[0], None)
+            if not testclass:
+                continue
+            if len(testcase) == 1:
+                suite.addTest(self._loader.loadTestsFromTestCase(testclass))
+            else:
+                suite.addTest(self._loader.loadTestsFromName(testcase[1], testclass))
+        return suite
+
+class TestRunner(object):
+    def __init__(self):
+        self._groups = []
+        self._stream = stdout
+
+    def addGroup(self, *args, **kwargs):
+        self._groups.append(TestGroup(*args, **kwargs))
+
+    def run(self, testnames=None):
+        t0 = time()
+        testResult = TestResult()
+        quit = False
+        for group in self._groups:
+            suite = group.createSuite(testnames)
+            if not suite.countTestCases():
+                continue
+            try:
+                group.setUp() 
+                suite.run(testResult)
+            except:
+                print_exc()
+                break
+            finally:
+                group.tearDown()
+        timeTaken = time() - t0
+        testResult.printResult(timeTaken)
+
+sep1 = '=' * 70 + '\n'
+sep2 = '-' * 70 + '\n'
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/throughputanalysertest.py version_7.0/test/throughputanalysertest.py
--- version_6.1/test/throughputanalysertest.py	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/test/throughputanalysertest.py	2011-03-29 17:08:20.000000000 +0200
@@ -32,7 +32,7 @@
 
 import unittest
 import datetime, tempfile, os, shutil
-from merescoharvester.harvester.throughputanalyser import parseToTime, ThroughputAnalyser, ThroughputReport
+from meresco.harvester.throughputanalyser import parseToTime, ThroughputAnalyser, ThroughputReport
 
 class ThroughputAnalyserTest(unittest.TestCase):
     
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/timedprocesstest.py version_7.0/test/timedprocesstest.py
--- version_6.1/test/timedprocesstest.py	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/test/timedprocesstest.py	2011-03-29 17:08:20.000000000 +0200
@@ -31,7 +31,7 @@
 ## end license ##
 
 from cq2utils import CQ2TestCase
-from merescoharvester.harvester.timedprocess import TimedProcess
+from meresco.harvester.timedprocess import TimedProcess
 from os.path import join
 
 class TimedProcessTest(CQ2TestCase):
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/timeslottest.py version_7.0/test/timeslottest.py
--- version_6.1/test/timeslottest.py	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/test/timeslottest.py	2011-03-29 17:08:20.000000000 +0200
@@ -34,7 +34,7 @@
 import time
 import re
 
-from merescoharvester.harvester.timeslot import Timeslot, Wildcard, _parse as parse, ParseException
+from meresco.harvester.timeslot import Timeslot, Wildcard, _parse as parse, ParseException
 
 class TimeslotTest(unittest.TestCase):
 
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/toolstest.py version_7.0/test/toolstest.py
--- version_6.1/test/toolstest.py	2011-03-11 10:31:33.000000000 +0100
+++ version_7.0/test/toolstest.py	2011-03-29 17:08:20.000000000 +0200
@@ -30,7 +30,7 @@
 #
 ## end license ##
 import unittest
-from merescoharvester.controlpanel import tools
+from meresco.harvester.controlpanel import tools
 
 class ToolsTest(unittest.TestCase):
 	def testCheckName(self):
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6.1/test/utils.py version_7.0/test/utils.py
--- version_6.1/test/utils.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.0/test/utils.py	2011-03-29 17:08:20.000000000 +0200
@@ -0,0 +1,125 @@
+## begin license ##
+#
+#    "HBO-Kennisbank" is a webportal that provides free access to student theses,
+#    publications and learning objects made available by the Universities of
+#    Applied Sciences in the Netherlands.
+#    Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
+#    Copyright (C) 2011 SURFfoundation. http://www.surf.nl
+#    Copyright (C) 2010-2011 Seek You Too B.V. (CQ2) http://www.cq2.nl
+#
+#    This file is part of "HBO-Kennisbank"
+#
+#    "HBO-Kennisbank" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "HBO-Kennisbank" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "HBO-Kennisbank"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+from amara.binderytools import bind_string
+from lxml.etree import parse as parse_lxml
+from StringIO import StringIO
+from socket import socket
+from urllib import urlencode
+from cq2utils.wrappers import wrapp
+from sys import stdout
+
+def _socket(port, timeOutInSeconds):
+    sok = socket()
+    sok.connect(('localhost', port))
+    sok.settimeout(5.0 if timeOutInSeconds is None else timeOutInSeconds)
+    return sok
+
+def createReturnValue(header, body, parse):
+    if parse == True:
+        try:
+            body = wrapp(bind_string(body))
+        except:
+            print body
+            raise
+    elif parse == 'lxml':
+        body = parse_lxml(StringIO(body))
+    return header, body
+
+
+def postRequest(port, path, data, contentType='text/xml; charset="utf-8"', parse=True, timeOutInSeconds=None):
+    sok = _socket(port, timeOutInSeconds)
+    try:
+        contentLength = len(data)
+        sendBuffer = '\r\n'.join([
+            'POST %(path)s HTTP/1.0',
+            'Content-Type: %s' % contentType,
+            'Content-Length: %(contentLength)s',
+            '', '']) % locals()
+        sendBuffer += data
+
+        totalBytesSent = 0
+        bytesSent = 0
+        while totalBytesSent != len(sendBuffer):
+            bytesSent = sok.send(sendBuffer[totalBytesSent:])
+            totalBytesSent += bytesSent
+
+        header, body = receiveFromSocket(sok)
+        return createReturnValue(header, body, parse)
+    finally:
+        sok.close()
+
+def getRequest(port, path, arguments, parse=True, timeOutInSeconds=None, host=None, additionalHeaders=None):
+    sok = _socket(port, timeOutInSeconds)
+    try:
+        requestString = path
+        if arguments:
+            requestString = path + '?' + urlencode(arguments, doseq=True)
+
+        request = 'GET %(requestString)s HTTP/1.0\r\n' % locals()
+        if host != None:
+            request = 'GET %(requestString)s HTTP/1.1\r\nHost: %(host)s\r\n' % locals()
+        if additionalHeaders != None:
+            for header in additionalHeaders.items():
+                request += '%s: %s\r\n' % header
+        request += '\r\n'
+
+        sok.send(request)
+
+        header, body = receiveFromSocket(sok)
+        return createReturnValue(header, body, parse)
+    finally:
+        sok.close()
+
+
+def receiveFromSocket(sok):
+    response = ''
+    part = sok.recv(1024)
+    response += part
+    while part != None:
+        part = sok.recv(1024)
+        if not part:
+            break
+        response += part
+    return response.split('\r\n\r\n', 1)
+
+
+def getRequestWithChecks(port, path, arguments, parse=True):
+    header, body = getRequest(port, path, arguments, parse=False)
+    if 'Traceback (most recent call last):' in body:
+        print body
+        raise ValueError("Exception found in webpage")
+    
+    if not parse:
+        return header, body
+
+    try:
+        parsed = parse_lxml(StringIO(body))
+    except:
+        for item in enumerate(body.split('\n')):
+            print '%05d %s' % item
+        raise
+    return header, parsed
