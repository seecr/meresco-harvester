Changeset created on Wed Jul 27 09:37:00 CEST 2011 by Seecr

Description: Added rss on every repository status

    For every repository is an RSS feed available with the status of the last harvest action. This status is the same as shown in the showHarvesterStatus page. The RSS feed will be updated on every harvest (except Nothing to be done)
    - GetStatus page is now completely handled using DynamicHTML
    - RepositoryStatus component is rewritten for usage in DynamicHTML templates

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-harvester/tags/version_7.1.3

diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_7.1.3/deps.txt version_7.2/deps.txt
--- version_7.1.3/deps.txt	2011-07-01 15:31:48.000000000 +0200
+++ version_7.2/deps.txt	2011-07-27 09:36:31.000000000 +0200
@@ -10,3 +10,5 @@
 python-slowfoot (<<7.4)
 python-escaping (>=0.1)
 python-escaping (<<0.2)
+python-weightless-core (>= 0.5)
+python-weightless-core (<< 0.6)
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_7.1.3/examples/harvester.config version_7.2/examples/harvester.config
--- version_7.1.3/examples/harvester.config	2011-07-01 15:31:48.000000000 +0200
+++ version_7.2/examples/harvester.config	2011-07-27 09:36:31.000000000 +0200
@@ -17,7 +17,13 @@
 # logPath will contain logging information which may be rotated
 #
 logPath = /home/harvester/log
+
 #
 # statePath will contain the current state for harvested
 #
 statePath = /home/harvester/state
+
+#
+# URL to the harvester status page 
+#
+harvesterStatusURL = http://localhost:9443/page/showHarvesterStatus/show
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_7.1.3/meresco/harvester/controlpanel/html/dynamic/getStatus.sf version_7.2/meresco/harvester/controlpanel/html/dynamic/getStatus.sf
--- version_7.1.3/meresco/harvester/controlpanel/html/dynamic/getStatus.sf	2011-07-01 15:31:48.000000000 +0200
+++ version_7.2/meresco/harvester/controlpanel/html/dynamic/getStatus.sf	2011-07-27 09:36:31.000000000 +0200
@@ -6,10 +6,10 @@
 # SURFnet by:
 # Seek You Too B.V. (CQ2) http://www.cq2.nl 
 # 
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
 # Copyright (C) 2011 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
 # 
-# 
 # This file is part of "Meresco Harvester"
 # 
 # "Meresco Harvester" is free software; you can redistribute it and/or modify
@@ -30,6 +30,7 @@
 
 def main(arguments, **kwargs):
     domainId = arguments.get('domainId', [None])[0]
+    repositoryGroupId = arguments.get('repositoryGroupId', [None])[0]
     repositoryId = arguments.get('repositoryId', [None])[0]
 
     yield """<?xml version="1.0" encoding="UTF-8"?>
@@ -39,7 +40,8 @@
     <verb>GetStatus</verb>
     <domainId>%(domainId)s</domainId>
     <repositoryId>%(repositoryId)s</repositoryId>
+    <repositoryGroupId>%(repositoryGroupId)s</repositoryGroupId>
   </request>""" % locals()
-    yield any.getStatus(domainId, repositoryId)
+    yield any.getStatus(domainId=domainId, repositoryGroupId=repositoryGroupId, repositoryId=repositoryId)
     yield """</saharaget>"""
 
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_7.1.3/meresco/harvester/controlpanel/html/dynamic/rss.sf version_7.2/meresco/harvester/controlpanel/html/dynamic/rss.sf
--- version_7.1.3/meresco/harvester/controlpanel/html/dynamic/rss.sf	1970-01-01 01:00:00.000000000 +0100
+++ version_7.2/meresco/harvester/controlpanel/html/dynamic/rss.sf	2011-07-27 09:36:31.000000000 +0200
@@ -0,0 +1,82 @@
+## begin license ##
+# 
+# "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+# a web-control panel.
+# "Meresco Harvester" is originally called "Sahara" and was developed for 
+# SURFnet by:
+# Seek You Too B.V. (CQ2) http://www.cq2.nl 
+# 
+# Copyright (C) 2010-2011 Maastricht University Library http://www.maastrichtuniversity.nl/web/Library/home.htm
+# Copyright (C) 2010-2011 Seek You Too B.V. (CQ2) http://www.cq2.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Harvester"
+# 
+# "Meresco Harvester" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Harvester" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Harvester"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
+## end license ##
+
+def main(path, arguments, **kwargs):
+    domainId = arguments.get('domainId', [None])[0]
+    repositoryGroupId = arguments.get('repositoryGroupId', [None])[0]
+    repositoryId = arguments.get('repositoryId', [None])[0]
+
+    linkToStatusPage = "%s?%s" % (config["harvesterStatusURL"], escapeXml(urlencode(dict(domainId=domainId, repositoryId=repositoryId))))
+    statusLxml = XML(''.join(compose(any.getStatus(domainId=domainId, repositoryGroupId=repositoryGroupId, repositoryId=repositoryId))))
+
+    yield "HTTP/1.0 200 OK\r\n"
+    yield "Content-Type: application/rss+xml\r\n"
+    yield "\r\n"
+    yield '<?xml version="1.0" encoding="UTF-8"?>\r\n'
+    yield """<rss version="2.0"><channel>"""
+    yield '<title>Harvester status voor %s</title>' % repositoryId
+    yield '<description>Recente repository harvest status voor %s in %s</description>' % (repositoryId, domainId)
+    yield '<link>%s</link>' % linkToStatusPage
+    yield '<ttl>360</ttl>'
+
+    state = {
+        'lastHarvestDate': ''.join(statusLxml.xpath("/GetStatus/status/lastHarvestDate/text()")),
+        'total': ''.join(statusLxml.xpath("/GetStatus/status/total/text()")),
+        'harvested': ''.join(statusLxml.xpath("/GetStatus/status/harvested/text()")),
+        'uploaded': ''.join(statusLxml.xpath("/GetStatus/status/uploaded/text()")),
+        'deleted': ''.join(statusLxml.xpath("/GetStatus/status/deleted/text()")),
+        'ignored': ''.join(statusLxml.xpath("/GetStatus/status/ignored/text()")),
+        'totalerrors': ''.join(statusLxml.xpath("/GetStatus/status/totalerrors/text()")),
+    }
+    lastHarvestAttempt = statusLxml.xpath("/GetStatus/status/lastHarvestAttempt/text()")
+    if len(lastHarvestAttempt) == 1:
+        yield RSS_TEMPLATE % {
+            "title": 'Harvester status voor %s' % repositoryId,
+            "description": """Last harvest date: %(lastHarvestDate)s&lt;br/&gt;
+    Total records: %(total)s&lt;br/&gt;
+    Harvested records: %(harvested)s&lt;br/&gt;
+    Uploaded records: %(uploaded)s&lt;br/&gt;
+    Deleted records: %(deleted)s&lt;br/&gt;
+    Validation errors: %(ignored)s&lt;br/&gt;
+    Errors: %(totalerrors)s""" % state,
+            "link": linkToStatusPage,
+            "guid": lastHarvestAttempt[0],
+        }
+
+    yield "</channel>"
+    yield "</rss>"
+
+RSS_TEMPLATE = """<item>
+    <title>%(title)s</title>
+    <description>%(description)s</description>
+    <link>%(link)s</link>
+    <guid>%(guid)s</guid>
+</item>\n"""
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_7.1.3/meresco/harvester/controlpanel/slowfoottemplates/getStatus version_7.2/meresco/harvester/controlpanel/slowfoottemplates/getStatus
--- version_7.1.3/meresco/harvester/controlpanel/slowfoottemplates/getStatus	2011-07-01 15:31:48.000000000 +0200
+++ version_7.2/meresco/harvester/controlpanel/slowfoottemplates/getStatus	2011-07-27 09:36:31.000000000 +0200
@@ -10,20 +10,8 @@
 repositoryGroupId = args.repositoryGroupId
 
 import os
-from meresco.harvester.repositorystatus import RepositoryStatus
 logDir = req.get_options()['logDir']
 
-def writeStatus(repositoryId, repositoryGroupId):
-  rs = RepositoryStatus()
-  eventsfile = os.path.join(logDir, domainId, repositoryId + '.events')
-  if os.path.isfile(eventsfile):
-    try:
-      f = open(eventsfile)
-%><status repositoryId="<%= repositoryId %>" repositoryGroupId="<%= repositoryGroupId %>"><%
-      rs.innerXml(f, req)
-      req.write("</status>")
-    finally:
-      f.close()
 #
 
 exists = True
@@ -36,36 +24,7 @@
   include('/saharageterror?errorCode=idDoesNotExist')
 else:
   type('text/xml; charset=utf-8')
-%><?xml version="1.0" encoding="UTF-8"?>
-<saharaget xmlns="http://sahara.cq2.org/xsd/saharaget.xsd">
-<%
-  include('/saharagetTime')
-%> 
-  <request>
-    <verb>GetStatus</verb>
-    <domainId><% escape_xml(domainId) %></domainId><%
-  if repositoryId:
+queryArgs = urlencode(dict(domainId=domainId, repositoryGroupId=args.repositoryGroupId, repositoryId=args.repositoryId))
+statusUrl = url('%s/getStatus?%s' % (req.get_options()['internalServer'], queryArgs))
+req.write(statusUrl.read())
 %>
-    <repositoryId><% escape_xml(repositoryId) %></repositoryId><%
-  elif repositoryGroupId:
-%>
-    <repositoryGroupId><% escape_xml(repositoryGroupId) %></repositoryGroupId><%
-  #
-%>
-  </request>
-  <GetStatus>
-<%
-  #
-  if not repositoryId and repositoryGroupId:
-    allGroupIds = [ repositoryGroupId ]
-  else:
-    allGroupIds = asxml(url('/' + domainId + '.domain')).domain.repositoryGroupId
-  for groupId in allGroupIds:
-    repositories = asxml(url('/' + domainId + '.' + groupId + '.repositoryGroup')).repositoryGroup.repositoryId
-    for repId in repositories:
-      if not repositoryId or repositoryId == repId:
-        writeStatus(repId, groupId)
-  #
-%>
-  </GetStatus>
-</saharaget>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_7.1.3/meresco/harvester/controlpanel/slowfoottemplates/rss version_7.2/meresco/harvester/controlpanel/slowfoottemplates/rss
--- version_7.1.3/meresco/harvester/controlpanel/slowfoottemplates/rss	1970-01-01 01:00:00.000000000 +0100
+++ version_7.2/meresco/harvester/controlpanel/slowfoottemplates/rss	2011-07-27 09:36:31.000000000 +0200
@@ -0,0 +1,5 @@
+<%
+type("application/rss+xml")
+include(req.get_options()['internalServer'] + '/rss?' + urlencode(args))
+%>
+
Binary files version_7.1.3/meresco/harvester/controlpanel/slowfoottemplates/rss.png and version_7.2/meresco/harvester/controlpanel/slowfoottemplates/rss.png differ
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_7.1.3/meresco/harvester/controlpanel/slowfoottemplates/showHarvesterStatus version_7.2/meresco/harvester/controlpanel/slowfoottemplates/showHarvesterStatus
--- version_7.1.3/meresco/harvester/controlpanel/slowfoottemplates/showHarvesterStatus	2011-07-01 15:31:48.000000000 +0200
+++ version_7.2/meresco/harvester/controlpanel/slowfoottemplates/showHarvesterStatus	2011-07-27 09:36:31.000000000 +0200
@@ -3,7 +3,8 @@
 </p>
 <%
 domainId = args.domainId
-args = urlencode(dict(domainId=domainId, repositoryGroupId=args.repositoryGroupId, repositoryId=args.repositoryId))
+originalArgs = dict(domainId=domainId, repositoryGroupId=args.repositoryGroupId, repositoryId=args.repositoryId)
+args = urlencode(originalArgs)
 theUrl = url('/getStatus?%s' % args)
 
 statuses = asxml(theUrl).saharaget.GetStatus.status
@@ -23,6 +24,7 @@
 <td>Harvested<br/>Uploaded<br/>Deleted</td>
 <td>#Validation<br/>Errors</td>
 <td>#Errors</td>
+<td>RSS</td>
 </tr>
 <%
 for status in sorted(statuses, key=lambda s: (str(s.repositoryGroupId).lower(),str(s.repositoryId))):
@@ -40,8 +42,8 @@
 <td class="link">
 <% 
   nrOfValidationErrors = int(ignored[status.repositoryId].ignored) if status.repositoryId in ignored else 0
+  args = urlencode(dict(domainId=domainId, repositoryId=status.repositoryId))
   if nrOfValidationErrors > 0:
-    args = urlencode(dict(domainId=domainId, repositoryId=status.repositoryId))
 %>
     <a href="/page/ignored/?<%= args %>"><%=nrOfValidationErrors%> error<%='s' if nrOfValidationErrors != 1 else ''%></a>
 <%
@@ -57,6 +59,9 @@
   #
 %>
 </td>
+<td class="link">
+<a href="/rss?<%= args %>"><img src="/images/rss.png"/></a>
+</td>
 </tr>
 <%
 #
@@ -99,3 +104,37 @@
 #
 %>
 </table>
+
+<p>
+<h3>Validatie Errors.</h3>
+</p>
+<table class="event">
+<%
+for status in statuses:
+  repositoryId = status.repositoryId
+  ignorednr = int(str(status.ignored))
+  if ignorednr:
+    #
+%>
+<tr class="eventinfo">
+<td><a name="<%= repositoryId %>" href="#top_<%= repositoryId %>"><%= repositoryId %></a></td>
+</tr>
+<tr>
+<td>Nr. of validation errors: <strong><%= ignorednr %></strong></td>
+</tr>
+<%
+    if hasattr(status.recentignores, 'ignoredId'):
+      for ignoredId in status.recentignores.ignoredId:
+        recordId = ignoredId.split(":", 1)[-1]
+        newArgs = {'recordId': recordId, 'repositoryId': repositoryId, 'domainId': domainId}
+        #
+%>
+        <tr>
+          <td class="link">
+            <a href="/page/ignoredRecord/?<%= urlencode(newArgs)%>"><%= recordId%></a>
+          </td>
+        </tr>
+<%
+#
+%>
+</table>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_7.1.3/meresco/harvester/harvesterdata.py version_7.2/meresco/harvester/harvesterdata.py
--- version_7.1.3/meresco/harvester/harvesterdata.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.2/meresco/harvester/harvesterdata.py	2011-07-27 09:36:31.000000000 +0200
@@ -0,0 +1,49 @@
+## begin license ##
+# 
+# "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+# a web-control panel.
+# "Meresco Harvester" is originally called "Sahara" and was developed for 
+# SURFnet by:
+# Seek You Too B.V. (CQ2) http://www.cq2.nl 
+# 
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Harvester"
+# 
+# "Meresco Harvester" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Harvester" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Harvester"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
+## end license ##
+
+from lxml.etree import parse
+from os.path import join
+
+class HarvesterData(object):
+
+    def __init__(self, dataPath):
+        self._dataPath = dataPath
+
+    def getRepositoryGroupIds(self, domainId):
+        lxml = parse(open(join(self._dataPath, '%s.domain' % domainId)))
+        return lxml.xpath("/domain/repositoryGroupId/text()")
+
+    def getRepositoryIds(self, domainId, repositoryGroupId):
+        lxml = parse(open(join(self._dataPath, '%s.%s.repositoryGroup' % (domainId, repositoryGroupId))))
+        return lxml.xpath("/repositoryGroup/repositoryId/text()")
+
+    def getRepositoryGroupId(self, domainId, repositoryId):
+        lxml = parse(open(join(self._dataPath, '%s.%s.repository' % (domainId, repositoryId))))
+        return lxml.xpath("/repository/repositoryGroupId/text()")[0]
+
+    
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_7.1.3/meresco/harvester/repositorystatus.py version_7.2/meresco/harvester/repositorystatus.py
--- version_7.1.3/meresco/harvester/repositorystatus.py	2011-07-01 15:31:48.000000000 +0200
+++ version_7.2/meresco/harvester/repositorystatus.py	2011-07-27 09:36:31.000000000 +0200
@@ -1,37 +1,34 @@
 ## begin license ##
-# 
-# "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
-# a web-control panel.
-# "Meresco Harvester" is originally called "Sahara" and was developed for 
-# SURFnet by:
-# Seek You Too B.V. (CQ2) http://www.cq2.nl 
-# 
-# Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
-# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
-# Copyright (C) 2009 Tilburg University http://www.uvt.nl
-# Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
-# 
-# 
-# This file is part of "Meresco Harvester"
-# 
-# "Meresco Harvester" is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-# 
-# "Meresco Harvester" is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-# 
-# You should have received a copy of the GNU General Public License
-# along with "Meresco Harvester"; if not, write to the Free Software
-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-# 
+#
+#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+#    a web-control panel.
+#    "Meresco Harvester" is originally called "Sahara" and was developed for
+#    SURFnet by:
+#        Seek You Too B.V. (CQ2) http://www.cq2.nl
+#    Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
+#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
+#       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#
+#    This file is part of "Meresco Harvester"
+#
+#    "Meresco Harvester" is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    "Meresco Harvester" is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with "Meresco Harvester"; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
 ## end license ##
-
 #
 #
 import re, sys
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_7.1.3/meresco/harvester/server.py version_7.2/meresco/harvester/server.py
--- version_7.1.3/meresco/harvester/server.py	2011-07-01 15:31:48.000000000 +0200
+++ version_7.2/meresco/harvester/server.py	2011-07-27 09:36:31.000000000 +0200
@@ -1,30 +1,32 @@
 #!/usr/bin/env python2.5
 ## begin license ##
-#
-#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
-#    a web-control panel.
-#    "Meresco Harvester" is originally called "Sahara" and was developed for
-#    SURFnet by:
-#        Seek You Too B.V. (CQ2) http://www.cq2.nl
-#    Copyright (C) 2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of "Meresco Harvester"
-#
-#    "Meresco Harvester" is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    "Meresco Harvester" is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with "Meresco Harvester"; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+# a web-control panel.
+# "Meresco Harvester" is originally called "Sahara" and was developed for 
+# SURFnet by:
+# Seek You Too B.V. (CQ2) http://www.cq2.nl 
+# 
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+# 
+# This file is part of "Meresco Harvester"
+# 
+# "Meresco Harvester" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Harvester" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Harvester"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from meresco.core import Observable, be
@@ -33,6 +35,7 @@
 
 import time
 from weightless.io import Reactor
+from weightless.core import compose
 from dynamichtml import DynamicHtml
 
 from meresco.components import readConfig
@@ -41,13 +44,17 @@
 from __version__ import VERSION_STRING
 
 from saharaget import SaharaGet
-from status import Status
+from repositorystatus import RepositoryStatus
+from harvesterdata import HarvesterData
+
+from xml.sax.saxutils import escape as escapeXml
+from lxml.etree import XML
 
 myPath = dirname(abspath(__file__))
 dynamicHtmlPath = join(myPath, 'controlpanel', 'html', 'dynamic')
 staticHtmlPath = join(myPath, 'controlpanel', 'html')
 
-def dna(reactor, observableHttpServer, config, saharaUrl, logPath, statePath):
+def dna(reactor, observableHttpServer, config):
     return \
         (Observable(),
             (observableHttpServer,
@@ -62,11 +69,19 @@
                         (DynamicHtml(
                             [dynamicHtmlPath],
                             reactor=reactor,
-                            additionalGlobals = {'time': time},
+                            additionalGlobals = {
+                                'time': time,
+                                'config': config,
+                                'escapeXml': escapeXml,
+                                'compose': compose,
+                                'XML': XML,
+                            },
                             indexPage="/index.html",
                             ),
-                            (SaharaGet(saharaurl=saharaUrl),),
-                            (Status(logPath, statePath),)
+                            (SaharaGet(saharaurl=config["saharaUrl"]),),
+                            (RepositoryStatus(config["logPath"], config["statePath"]),
+                                (HarvesterData(config["dataPath"]),)    
+                            )
                         )
                     )
                 )
@@ -85,7 +100,7 @@
     reactor = Reactor()
     observableHttpServer = ObservableHttpServer(reactor, portNumber)
 
-    server = be(dna(reactor, observableHttpServer, config, saharaUrl, logPath, statePath))
+    server = be(dna(reactor, observableHttpServer, config))
     server.once.observer_init()
 
     print "Ready to rumble at", portNumber
Only in version_7.1.3/meresco/harvester: status.py
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_7.1.3/test/_alltests.py version_7.2/test/_alltests.py
--- version_7.1.3/test/_alltests.py	2011-07-01 15:31:48.000000000 +0200
+++ version_7.2/test/_alltests.py	2011-07-27 09:36:31.000000000 +0200
@@ -12,9 +12,9 @@
 # Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
 # Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
 # Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
 # 
-# 
 # This file is part of "Meresco Harvester"
 # 
 # "Meresco Harvester" is free software; you can redistribute it and/or modify
@@ -53,19 +53,19 @@
 from eventloggertest import EventLoggerTest
 from filesystemuploadtest import FileSystemUploaderTest
 from harvestactiontest import HarvestActionTest
+from harvesterdatatest import HarvesterDataTest
 from harvesterlogtest import HarvesterLogTest
 from harvestertest import HarvesterTest
 from idstest import IdsTest
 from mappingtest import MappingTest
 from oairequesttest import OaiRequestTest
 from onlineharvesttest import OnlineHarvestTest
-from repositorystatustest import RepositoryStatusTest
 from repositorytest import RepositoryTest
 from saharagettest import SaharaGetTest
 from smoothactiontest import SmoothActionTest
 from sruupdateuploadertest import SruUpdateUploaderTest
 from statetest import StateTest
-from statustest import StatusTest
+from repositorystatustest import RepositoryStatusTest
 from throughputanalysertest import ThroughputAnalyserTest
 from timedprocesstest import TimedProcessTest
 from timeslottest import TimeslotTest
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_7.1.3/test/harvesterdatatest.py version_7.2/test/harvesterdatatest.py
--- version_7.1.3/test/harvesterdatatest.py	1970-01-01 01:00:00.000000000 +0100
+++ version_7.2/test/harvesterdatatest.py	2011-07-27 09:36:31.000000000 +0200
@@ -0,0 +1,66 @@
+## begin license ##
+# 
+# "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+# a web-control panel.
+# "Meresco Harvester" is originally called "Sahara" and was developed for 
+# SURFnet by:
+# Seek You Too B.V. (CQ2) http://www.cq2.nl 
+# 
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Harvester"
+# 
+# "Meresco Harvester" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Harvester" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Harvester"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
+## end license ##
+
+from os.path import join
+from cq2utils import CQ2TestCase
+
+from meresco.harvester.harvesterdata import HarvesterData
+
+class HarvesterDataTest(CQ2TestCase):
+
+    def testGetRepositoryGroupIds(self):
+        open(join(self.tempdir, 'adomain.domain'), 'w').write("""<?xml version="1.0" encoding="UTF-8"?>
+<domain>
+    <id>adomain</id>
+    <mappingId>ignored MAPPING</mappingId>
+    <repositoryGroupId>Group1</repositoryGroupId>
+    <repositoryGroupId>Group2</repositoryGroupId>
+</domain>""")
+        hd = HarvesterData(self.tempdir)
+        self.assertEquals(["Group1", "Group2"], hd.getRepositoryGroupIds(domainId="adomain"))
+ 
+    def testGetRepositoryIds(self):
+        open(join(self.tempdir, 'adomain.Group1.repositoryGroup'), 'w').write("""<?xml version="1.0" encoding="UTF-8"?>
+<repositoryGroup>
+  <id>Group1</id>
+  <name xml:lang="nl">Groep1</name>
+  <name xml:lang="en">Group1</name>
+  <repositoryId>repository1</repositoryId>
+  <repositoryId>repository2</repositoryId>
+</repositoryGroup>""")
+        hd = HarvesterData(self.tempdir)
+        self.assertEquals(["repository1", "repository2"], hd.getRepositoryIds(domainId="adomain", repositoryGroupId="Group1"))
+
+    def testGetRepositoryGroupId(self):
+        open(join(self.tempdir, 'adomain.repository1.repository'), 'w').write("""<?xml version="1.0" encoding="UTF-8"?>
+<repository>
+  <id>repository1</id>
+  <repositoryGroupId>Group1</repositoryGroupId>
+</repository>""")
+        hd = HarvesterData(self.tempdir)
+        self.assertEquals("Group1", hd.getRepositoryGroupId(domainId="adomain", repositoryId="repository1"))
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_7.1.3/test/integration/integrationtestcase.py version_7.2/test/integration/integrationtestcase.py
--- version_7.1.3/test/integration/integrationtestcase.py	2011-07-01 15:31:48.000000000 +0200
+++ version_7.2/test/integration/integrationtestcase.py	2011-07-27 09:36:31.000000000 +0200
@@ -135,6 +135,7 @@
         setConfig(config, 'dataPath', join(self.integrationTempdir, 'data'))
         setConfig(config, 'statePath', self.harvesterStateDir)
         setConfig(config, 'logPath', self.harvesterLogDir)
+        setConfig(config, 'harvesterStatusURL', "http://localhost:9999/harvesterStatus.page")
 
         self._writeConfig(config, 'harvester')
 
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_7.1.3/test/integration/internalservertest.py version_7.2/test/integration/internalservertest.py
--- version_7.1.3/test/integration/internalservertest.py	2011-07-01 15:31:48.000000000 +0200
+++ version_7.2/test/integration/internalservertest.py	2011-07-27 09:36:31.000000000 +0200
@@ -1,31 +1,33 @@
 #!/usr/bin/env python2.5
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
-#    a web-control panel.
-#    "Meresco Harvester" is originally called "Sahara" and was developed for
-#    SURFnet by:
-#        Seek You Too B.V. (CQ2) http://www.cq2.nl
-#    Copyright (C) 2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of "Meresco Harvester"
-#
-#    "Meresco Harvester" is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    "Meresco Harvester" is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with "Meresco Harvester"; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+# a web-control panel.
+# "Meresco Harvester" is originally called "Sahara" and was developed for 
+# SURFnet by:
+# Seek You Too B.V. (CQ2) http://www.cq2.nl 
+# 
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+# 
+# This file is part of "Meresco Harvester"
+# 
+# "Meresco Harvester" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Harvester" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Harvester"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from os import system
@@ -60,12 +62,53 @@
         self.assertEquals("Repository integrationtest - Record oai:record:02", result.xpath("//h3/text()")[0])
         self.assertEquals("/page/ignored/?domainId=adomain&repositoryId=integrationtest", result.xpath("/div/p/a/@href")[0])
 
-    def testGetStatus(self):
+    def testGetStatusForDomainAndRepositoryId(self):
         self.controlHelper(action='ignoreAll')
         self.startHarvester(repository=REPOSITORY)
         header, result = getRequest(self.harvesterInternalServerPortNumber, '/getStatus', {'domainId': 'adomain', 'repositoryId': 'integrationtest'}, parse='lxml')
         self.assertEquals("GetStatus", xpath(result, "/s:saharaget/s:request/s:verb/text()")[0])
         self.assertEquals("adomain", xpath(result, "/s:saharaget/s:request/s:domainId/text()")[0])
         self.assertEquals("integrationtest", xpath(result, "/s:saharaget/s:request/s:repositoryId/text()")[0])
+        self.assertEquals("IntegrationTest", xpath(result, "/s:saharaget/s:GetStatus/s:status/@repositoryGroupId")[0])
         self.assertEquals("5", xpath(result, "/s:saharaget/s:GetStatus/s:status[@repositoryId='integrationtest']/s:ignored/text()")[0])
         
+    def testGetStatusForDomain(self):
+        self.controlHelper(action='ignoreAll')
+        self.startHarvester(repository=REPOSITORY)
+        header, result = getRequest(self.harvesterInternalServerPortNumber, '/getStatus', {'domainId': 'adomain'}, parse='lxml')
+        self.assertEquals(2, len(xpath(result, "/s:saharaget/s:GetStatus/s:status")))
+        self.assertEquals("adomain", xpath(result, "/s:saharaget/s:request/s:domainId/text()")[0])
+
+    def testGetStatusForDomainAndRepositoryGroup(self):
+        self.controlHelper(action='ignoreAll')
+        self.startHarvester(repository=REPOSITORY)
+        header, result = getRequest(self.harvesterInternalServerPortNumber, '/getStatus', {'domainId': 'adomain', 'repositoryGroupId': 'IntegrationTest'}, parse='lxml')
+        self.assertEquals(1, len(xpath(result, "/s:saharaget/s:GetStatus/s:status")))
+        self.assertEquals("adomain", xpath(result, "/s:saharaget/s:request/s:domainId/text()")[0])
+        self.assertEquals("IntegrationTest", xpath(result, "/s:saharaget/s:request/s:repositoryGroupId/text()")[0])
+
+    def testRssForHarvesterStatus(self):
+        self.controlHelper(action="ignoreNothing")
+        self.startHarvester(repository=REPOSITORY)
+        header, result = getRequest(self.harvesterInternalServerPortNumber, '/rss', {'domainId': 'adomain', 'repositoryId': 'integrationtest'}, parse='lxml')
+        self.assertEquals("Harvester status voor integrationtest", xpath(result, "/rss/channel/title/text()")[0])
+        self.assertEquals("Recente repository harvest status voor integrationtest in adomain", xpath(result, "/rss/channel/description/text()")[0])
+        self.assertEquals("http://localhost:9999/harvesterStatus.page?domainId=adomain&repositoryId=integrationtest", xpath(result, "/rss/channel/link/text()")[0])
+        self.assertEquals(str(60 * 6), xpath(result, "/rss/channel/ttl/text()")[0])
+
+        self.assertEquals("Harvester status voor integrationtest", xpath(result, "/rss/channel/item[1]/title/text()")[0])
+        description = xpath(result, "/rss/channel/item[1]/description/text()")[0]
+        self.assertTrue("Last harvest date: " in description, description)
+        self.assertTrue("Total records: 8" in description, description)
+        self.assertTrue("Harvested records: 10" in description, description)
+        self.assertTrue("Uploaded records: 8" in description, description)
+        self.assertTrue("Deleted records: 2" in description, description)
+        self.assertTrue("Validation errors: 0" in description, description)
+        self.assertTrue("Errors: 0" in description, description)
+        self.assertEquals("http://localhost:9999/harvesterStatus.page?domainId=adomain&repositoryId=integrationtest", xpath(result, "/rss/channel/item[1]/link/text()")[0])
+
+    def testRssForNeverHarvestedRepository(self):
+        header, result = getRequest(self.harvesterInternalServerPortNumber, '/rss', {'domainId': 'adomain', 'repositoryId': 'repository2'}, parse='lxml')
+        self.assertEquals("Harvester status voor repository2", xpath(result, "/rss/channel/title/text()")[0])
+        self.assertEquals(0, len(xpath(result, "/rss/channel/item")))
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_7.1.3/test/integration-data/data/adomain.domain version_7.2/test/integration-data/data/adomain.domain
--- version_7.1.3/test/integration-data/data/adomain.domain	1970-01-01 01:00:00.000000000 +0100
+++ version_7.2/test/integration-data/data/adomain.domain	2011-07-27 09:36:31.000000000 +0200
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<domain>
+    <id>adomain</id>
+    <mappingId>MAPPING</mappingId>
+    <repositoryGroupId>IntegrationTest</repositoryGroupId>
+    <repositoryGroupId>Group2</repositoryGroupId>
+</domain>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_7.1.3/test/integration-data/data/adomain.Group2.repositoryGroup version_7.2/test/integration-data/data/adomain.Group2.repositoryGroup
--- version_7.1.3/test/integration-data/data/adomain.Group2.repositoryGroup	1970-01-01 01:00:00.000000000 +0100
+++ version_7.2/test/integration-data/data/adomain.Group2.repositoryGroup	2011-07-27 09:36:31.000000000 +0200
@@ -0,0 +1,8 @@
+<?xml version="1.0"?>
+<repositoryGroup>
+  <id>Group2</id>
+  <name xml:lang="nl">Groep2</name>
+  <name xml:lang="en">Group2</name>
+  <repositoryId>repository2</repositoryId>
+</repositoryGroup>
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_7.1.3/test/integration-data/data/adomain.IntegrationTest.repositoryGroup version_7.2/test/integration-data/data/adomain.IntegrationTest.repositoryGroup
--- version_7.1.3/test/integration-data/data/adomain.IntegrationTest.repositoryGroup	1970-01-01 01:00:00.000000000 +0100
+++ version_7.2/test/integration-data/data/adomain.IntegrationTest.repositoryGroup	2011-07-27 09:36:31.000000000 +0200
@@ -0,0 +1,8 @@
+<?xml version="1.0"?>
+<repositoryGroup>
+  <id>IntegrationTest</id>
+  <name xml:lang="nl">IntegrationTest</name>
+  <name xml:lang="en">IntegrationTest</name>
+  <repositoryId>integrationtest</repositoryId>
+</repositoryGroup>
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_7.1.3/test/integration-data/data/adomain.repository2.repository version_7.2/test/integration-data/data/adomain.repository2.repository
--- version_7.1.3/test/integration-data/data/adomain.repository2.repository	1970-01-01 01:00:00.000000000 +0100
+++ version_7.2/test/integration-data/data/adomain.repository2.repository	2011-07-27 09:36:31.000000000 +0200
@@ -0,0 +1,15 @@
+<?xml version="1.0"?>
+<repository>
+  <id>repository2</id>
+  <repositoryGroupId>Group2</repositoryGroupId>
+  <use>true</use>
+  <complete></complete>
+  <action></action>
+  <baseurl>http://localhost:${helperServerPortNumber}/oai</baseurl>
+  <set></set>
+  <collection>Integration</collection>
+  <targetId>SRUUPDATE</targetId>
+  <metadataPrefix>oai_dc</metadataPrefix>
+  <mappingId>MAPPING</mappingId>
+  <maximumIgnore>5</maximumIgnore>
+</repository>
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_7.1.3/test/repositorystatustest.py version_7.2/test/repositorystatustest.py
--- version_7.1.3/test/repositorystatustest.py	2011-07-01 15:31:48.000000000 +0200
+++ version_7.2/test/repositorystatustest.py	2011-07-27 09:36:31.000000000 +0200
@@ -6,14 +6,10 @@
 # SURFnet by:
 # Seek You Too B.V. (CQ2) http://www.cq2.nl 
 # 
-# Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
-# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-# Copyright (C) 2007-2009, 2011 Seek You Too (CQ2) http://www.cq2.nl
-# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
-# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
 # 
-# 
 # This file is part of "Meresco Harvester"
 # 
 # "Meresco Harvester" is free software; you can redistribute it and/or modify
@@ -32,87 +28,268 @@
 # 
 ## end license ##
 
-import unittest
+from __future__ import with_statement
+from os import makedirs
+from os.path import join
+
+from cq2utils import CQ2TestCase, CallTrace
+
 from meresco.harvester.repositorystatus import RepositoryStatus
-import tempfile
+from weightless.core import compose
+from lxml.etree import tostring, parse
 from StringIO import StringIO
 
-class RepositoryStatusTest(unittest.TestCase):
+class RepositoryStatusTest(CQ2TestCase):
+
     def setUp(self):
-        self.repositoryStatus = RepositoryStatus()
-    
-    def testZero(self):
-        self.assertEquals('', self.repositoryStatus.lastSuccesDate)
-        self.assertEquals('', self.repositoryStatus.harvested)
-        self.assertEquals('', self.repositoryStatus.uploaded)
-        self.assertEquals('', self.repositoryStatus.deleted)
-        self.assertEquals('', self.repositoryStatus.total)
-        self.assertEquals(0, len(self.repositoryStatus.errors))
+        CQ2TestCase.setUp(self)
+        self.stateDir = join(self.tempdir, "state")
+        self.logDir = join(self.tempdir, "log")
+        self.domainId = "adomain"
+        makedirs(join(self.stateDir, self.domainId))
+        repoId1LogDir = join(self.logDir, self.domainId, "ignored", "repoId1")
+        repoId2LogDir = join(self.logDir, self.domainId, "ignored", "repoId2")
+        makedirs(repoId1LogDir)
+        makedirs(repoId2LogDir)
+        open(join(repoId1LogDir, "ignoredId1"), 'w').write("<diagnostic>ERROR1</diagnostic>")
+        open(join(repoId1LogDir, "ignoredId2"), 'w').write("<diagnostic>ERROR2</diagnostic>")
+        open(join(repoId2LogDir, "ignoredId3"), 'w').write("<diagnostic>ERROR3</diagnostic>")
+        open(join(self.stateDir, self.domainId, "repoId1_ignored.ids"), 'w').write("ignoredId1\nignoredId2")
+        open(join(self.stateDir, self.domainId, "repoId2_ignored.ids"), 'w').write("ignoredId3")
+        open(join(self.stateDir, self.domainId, "repoId3_ignored.ids"), 'w').write("")
+        self.status = RepositoryStatus(self.logDir, self.stateDir)
+        observer = CallTrace("HarvesterData")
+        observer.returnValues["getRepositoryGroupIds"] = ["repoGroupId1", "repoGroupId2"]
+        def getRepositoryIds(domainId, repositoryGroupId):
+            if repositoryGroupId == "repoGroupId1":
+                return ["repoId1", "repoId2"]
+            return ["repoId3", "anotherRepoId"]
+        observer.methods["getRepositoryIds"] = getRepositoryIds
+        def getRepositoryGroupId(domainId, repositoryId):
+            return 'repoGroupId1' if repositoryId in ['repoId1', 'repoId2'] else 'repoGroupId2'
+        observer.methods["getRepositoryGroupId"] = getRepositoryGroupId
+        self.status.addObserver(observer)
+
+    def testGetStatusForRepoIdAndDomainId(self):
+        self.assertEqualsWS("""<GetStatus>
+            <status repositoryId="repoId1" repositoryGroupId="repoGroupId1">
+                <lastHarvestDate></lastHarvestDate>
+                <harvested></harvested>
+                <uploaded></uploaded>
+                <deleted></deleted>
+                <total></total>
+                <totalerrors>0</totalerrors>
+                <recenterrors></recenterrors>
+                <ignored>2</ignored>
+                <recentignores>
+                    <ignoredId>ignoredId2</ignoredId>
+                    <ignoredId>ignoredId1</ignoredId>
+                </recentignores>
+                <lastHarvestAttempt></lastHarvestAttempt>
+            </status>
+        </GetStatus>""", ''.join(compose(self.status.getStatus(domainId=self.domainId, repositoryId="repoId1"))))
+        self.assertEqualsWS("""<GetStatus>
+            <status repositoryId="anotherRepoId" repositoryGroupId="repoGroupId2">
+                <lastHarvestDate></lastHarvestDate>
+                <harvested></harvested>
+                <uploaded></uploaded>
+                <deleted></deleted>
+                <total></total>
+                <totalerrors>0</totalerrors>
+                <recenterrors></recenterrors>
+                <ignored>0</ignored>
+                <recentignores></recentignores>
+                <lastHarvestAttempt></lastHarvestAttempt>
+            </status>
+        </GetStatus>""", ''.join(compose(self.status.getStatus(domainId=self.domainId, repositoryId="anotherRepoId"))))
+
+    def testGetStatusForDomainIdAndRepositoryGroupId(self):
+        self.assertEqualsWS("""<GetStatus>
+            <status repositoryId="repoId1" repositoryGroupId="repoGroupId1">
+                <lastHarvestDate></lastHarvestDate>
+                <harvested></harvested>
+                <uploaded></uploaded>
+                <deleted></deleted>
+                <total></total>
+                <totalerrors>0</totalerrors>
+                <recenterrors></recenterrors>
+                <ignored>2</ignored>
+                <recentignores>
+                    <ignoredId>ignoredId2</ignoredId>
+                    <ignoredId>ignoredId1</ignoredId>
+                </recentignores>
+                <lastHarvestAttempt></lastHarvestAttempt>
+            </status>
+            <status repositoryId="repoId2" repositoryGroupId="repoGroupId1">
+                <lastHarvestDate></lastHarvestDate>
+                <harvested></harvested>
+                <uploaded></uploaded>
+                <deleted></deleted>
+                <total></total>
+                <totalerrors>0</totalerrors>
+                <recenterrors></recenterrors>
+                <ignored>1</ignored>
+                <recentignores>
+                    <ignoredId>ignoredId3</ignoredId>
+                </recentignores>
+                <lastHarvestAttempt></lastHarvestAttempt>
+            </status>
+            </GetStatus>""", ''.join(compose(self.status.getStatus(domainId=self.domainId, repositoryGroupId="repoGroupId1"))))
+
+    def testGetStatusForDomainId(self):
+        self.assertEqualsWS("""<GetStatus>
+            <status repositoryId="repoId1" repositoryGroupId="repoGroupId1">
+                <lastHarvestDate></lastHarvestDate>
+                <harvested></harvested>
+                <uploaded></uploaded>
+                <deleted></deleted>
+                <total></total>
+                <totalerrors>0</totalerrors>
+                <recenterrors></recenterrors>
+                <ignored>2</ignored>
+                <recentignores>
+                    <ignoredId>ignoredId2</ignoredId>
+                    <ignoredId>ignoredId1</ignoredId>
+                </recentignores>
+                <lastHarvestAttempt></lastHarvestAttempt>
+            </status>
+            <status repositoryId="repoId2" repositoryGroupId="repoGroupId1">
+                <lastHarvestDate></lastHarvestDate>
+                <harvested></harvested>
+                <uploaded></uploaded>
+                <deleted></deleted>
+                <total></total>
+                <totalerrors>0</totalerrors>
+                <recenterrors></recenterrors>
+                <ignored>1</ignored>
+                <recentignores>
+                    <ignoredId>ignoredId3</ignoredId>
+                </recentignores>
+                <lastHarvestAttempt></lastHarvestAttempt>
+            </status>
+            <status repositoryId="repoId3" repositoryGroupId="repoGroupId2">
+                <lastHarvestDate></lastHarvestDate>
+                <harvested></harvested>
+                <uploaded></uploaded>
+                <deleted></deleted>
+                <total></total>
+                <totalerrors>0</totalerrors>
+                <recenterrors></recenterrors>
+                <ignored>0</ignored>
+                <recentignores></recentignores>
+                <lastHarvestAttempt></lastHarvestAttempt>
+            </status>
+            <status repositoryId="anotherRepoId" repositoryGroupId="repoGroupId2">
+                <lastHarvestDate></lastHarvestDate>
+                <harvested></harvested>
+                <uploaded></uploaded>
+                <deleted></deleted>
+                <total></total>
+                <totalerrors>0</totalerrors>
+                <recenterrors></recenterrors>
+                <ignored>0</ignored>
+                <recentignores></recentignores>
+                <lastHarvestAttempt></lastHarvestAttempt>
+            </status>
+        </GetStatus>""", ''.join(compose(self.status.getStatus(self.domainId))))
+
+    def testGetAllIgnoredRecords(self):
+        def ignoredRecords(repoId):
+            return list(self.status.ignoredRecords(self.domainId, repoId))
+        self.assertEquals(["ignoredId2", "ignoredId1"], ignoredRecords("repoId1"))
+        self.assertEquals(["ignoredId3"], ignoredRecords("repoId2"))
+        self.assertEquals([], ignoredRecords("repoId3"))
+        self.assertEquals([], ignoredRecords("repoId4"))
+
+    def testGetIgnoredRecord(self):
+        def getIgnoredRecord(repoId, recordId):
+            return tostring(self.status.getIgnoredRecord(self.domainId, repoId, recordId)) 
+        self.assertEquals("<diagnostic>ERROR1</diagnostic>", getIgnoredRecord("repoId1", "ignoredId1")) 
+        self.assertEquals("<diagnostic>ERROR2</diagnostic>", getIgnoredRecord("repoId1", "ignoredId2")) 
+        self.assertEquals("<diagnostic>ERROR3</diagnostic>", getIgnoredRecord("repoId2", "ignoredId3")) 
+
+    def testLotOfIgnoresGivesOnly10(self):
+        with open(join(self.stateDir, self.domainId, "repoId1_ignored.ids"), 'w') as f:
+            for i in range(20):
+                f.write("ignoredId%d\n" % i)
+        lxmlResult = parse(StringIO(''.join(compose(self.status.getStatus(domainId=self.domainId, repositoryId="repoId1")))))
+        self.assertEquals("20", lxmlResult.xpath("/GetStatus/status/ignored/text()")[0])
+        self.assertEquals(10, len(lxmlResult.xpath("/GetStatus/status/recentignores/ignoredId")))
+
+    def testSucces(self):
+        logLine = '\t'.join(['[2006-03-13 12:13:14]', 'SUCCES', 'repoId1', 'Harvested/Uploaded/Deleted/Total: 200/199/1/1542, ResumptionToken: None'])
+        open(join(self.logDir, self.domainId, 'repoId1.events'), 'w').write(logLine)
+        state = self.status._parseEventsFile(domainId=self.domainId, repositoryId='repoId1')
+        self.assertEquals('2006-03-13T12:13:14Z', state["lastHarvestDate"])
+        self.assertEquals('200', state["harvested"])
+        self.assertEquals('199', state["uploaded"])
+        self.assertEquals('1', state["deleted"])
+        self.assertEquals('1542', state["total"])
+        self.assertEquals(0, state["totalerrors"])
+        self.assertEquals([], state["recenterrors"])
+
+    def testOnlyErrors(self):
+        logLine = '\t'.join(['[2006-03-11 12:13:14]', 'ERROR', 'repoId1', 'Sorry, but the VM has crashed.'])
+        open(join(self.logDir, self.domainId, 'repoId1.events'), 'w').write(logLine)
+        state = self.status._parseEventsFile(domainId=self.domainId, repositoryId='repoId1')
+        self.assertTrue("lastHarvestDate" not in state, state.keys())
+        self.assertTrue("harvested" not in state, state.keys())
+        self.assertTrue("uploaded" not in state, state.keys())
+        self.assertTrue("deleted" not in state, state.keys())
+        self.assertTrue("total" not in state, state.keys())
+        self.assertEquals(1, state["totalerrors"])
+        self.assertEquals("2006-03-11T12:13:14Z", state["lastHarvestAttempt"])
+        self.assertEquals([('2006-03-11T12:13:14Z','Sorry, but the VM has crashed.')], state["recenterrors"])
+
+    def testTwoErrors(self):
+        logLine1 = '\t'.join(['[2006-03-11 12:13:14]', 'ERROR', 'repoId1', 'Sorry, but the VM has crashed.'])
+        logLine2 = '\t'.join(['[2006-03-11 12:14:14]', 'ERROR', 'repoId1', 'java.lang.NullPointerException.'])
+        open(join(self.logDir, self.domainId, 'repoId1.events'), 'w').write(logLine1 + "\n" + logLine2)
+        state = self.status._parseEventsFile(domainId=self.domainId, repositoryId='repoId1')
+        self.assertEquals(2, state["totalerrors"])
+        self.assertEquals("2006-03-11T12:14:14Z", state["lastHarvestAttempt"])
+        self.assertEquals([('2006-03-11T12:14:14Z', 'java.lang.NullPointerException.'), ('2006-03-11T12:13:14Z','Sorry, but the VM has crashed.')], state["recenterrors"])
+
+    def testErrorAfterSucces(self):
+        logLine1 = '\t'.join(['[2006-03-11 12:13:14]', 'SUCCES', 'repoId1', 'Harvested/Uploaded/Deleted/Total: 200/199/1/1542, ResumptionToken: abcdef'])
+        logLine2 = '\t'.join(['[2006-03-11 12:14:14]', 'ERROR', 'repoId1', 'java.lang.NullPointerException.'])
+        open(join(self.logDir, self.domainId, 'repoId1.events'), 'w').write(logLine1 + "\n" + logLine2)
+        state = self.status._parseEventsFile(domainId=self.domainId, repositoryId='repoId1')
+        self.assertEquals("2006-03-11T12:13:14Z", state["lastHarvestDate"])
+        self.assertEquals("200", state["harvested"])
+        self.assertEquals("199", state["uploaded"])
+        self.assertEquals("1", state["deleted"])
+        self.assertEquals("1542", state["total"])
+        self.assertEquals(1, state["totalerrors"])
+        self.assertEquals("2006-03-11T12:14:14Z", state["lastHarvestAttempt"])
+        self.assertEquals([('2006-03-11T12:14:14Z', 'java.lang.NullPointerException.')], state["recenterrors"])
+
+    def testErrorBeforeSucces(self):
+        logLine1 = '\t'.join(['[2006-03-11 12:13:14]', 'ERROR', 'repoId1', 'java.lang.NullPointerException.'])
+        logLine2 = '\t'.join(['[2006-03-11 12:14:14]', 'SUCCES', 'repoId1', 'Harvested/Uploaded/Deleted/Total: 200/199/1/1542, ResumptionToken: abcdef'])
+        open(join(self.logDir, self.domainId, 'repoId1.events'), 'w').write(logLine1 + "\n" + logLine2)
+        state = self.status._parseEventsFile(domainId=self.domainId, repositoryId='repoId1')
+        self.assertEquals("2006-03-11T12:14:14Z", state["lastHarvestDate"])
+        self.assertEquals("200", state["harvested"])
+        self.assertEquals("199", state["uploaded"])
+        self.assertEquals("1", state["deleted"])
+        self.assertEquals("1542", state["total"])
+        self.assertEquals(0, state["totalerrors"])
+        self.assertEquals([], state["recenterrors"])
+        self.assertEquals("2006-03-11T12:14:14Z", state["lastHarvestAttempt"])
+
+    def testLotOfErrors(self):
+        with open(join(self.logDir, self.domainId, 'repoId1.events'), 'w') as f:
+            for i in range(20):
+                logLine = '\t'.join(['[2006-03-11 12:%.2d:14]' % i, 'ERROR', 'repoId1', 'Error %d, Crash' % i])
+                f.write(logLine + "\n")
+        state = self.status._parseEventsFile(domainId=self.domainId, repositoryId='repoId1')
+        self.assertEquals(20, state["totalerrors"])
+        self.assertEquals(10, len(state["recenterrors"]))
+        self.assertEquals([('2006-03-11T12:19:14Z', 'Error 19, Crash'), ('2006-03-11T12:18:14Z', 'Error 18, Crash'), ('2006-03-11T12:17:14Z', 'Error 17, Crash'), ('2006-03-11T12:16:14Z', 'Error 16, Crash'), ('2006-03-11T12:15:14Z', 'Error 15, Crash'), ('2006-03-11T12:14:14Z', 'Error 14, Crash'), ('2006-03-11T12:13:14Z', 'Error 13, Crash'), ('2006-03-11T12:12:14Z', 'Error 12, Crash'), ('2006-03-11T12:11:14Z', 'Error 11, Crash'), ('2006-03-11T12:10:14Z', 'Error 10, Crash')], state["recenterrors"])
         
-    def testAddSucces(self):
-        self.repositoryStatus.addSucces('2006-03-13 12:13:14.456','Harvested/Uploaded/Deleted/Total: 200/199/1/1542')
-        self.assertEquals('2006-03-13T12:13:14Z', self.repositoryStatus.lastSuccesDate)
-        self.assertEquals('200', self.repositoryStatus.harvested)
-        self.assertEquals('199', self.repositoryStatus.uploaded)
-        self.assertEquals('1', self.repositoryStatus.deleted)
-        self.assertEquals('1542', self.repositoryStatus.total)
-        self.assertEquals(0, len(self.repositoryStatus.errors))
-    
-    def testAddSuccesDates(self):
-        self.repositoryStatus.addSucces('2006-03-01 12:13:14.456','Harvested/Uploaded/Deleted/Total: 300/297/3/1100')
-        self.repositoryStatus.addSucces('2006-03-03 12:13:14.456','Harvested/Uploaded/Deleted/Total: 200/199/1/1542')
-        self.assertEquals('2006-03-03T12:13:14Z', self.repositoryStatus.lastSuccesDate)
-        self.assertEquals('200', self.repositoryStatus.harvested)
-        self.assertEquals('199', self.repositoryStatus.uploaded)
-        self.assertEquals('1', self.repositoryStatus.deleted)
-        self.assertEquals('1542', self.repositoryStatus.total)
-        self.assertEquals(0, len(self.repositoryStatus.errors))
-    
-    def testAddOnlyErrors(self):
-        self.repositoryStatus.addError('2006-03-01 12:13:14.456','Sorry, but the VM has crashed.')
-        self.assertEquals('', self.repositoryStatus.lastSuccesDate)
-        self.assertEquals('', self.repositoryStatus.harvested)
-        self.assertEquals('', self.repositoryStatus.uploaded)
-        self.assertEquals('', self.repositoryStatus.deleted)
-        self.assertEquals('', self.repositoryStatus.total)
-        self.assertEquals(1, len(self.repositoryStatus.errors))
-        self.assertEquals(('2006-03-01T12:13:14Z','Sorry, but the VM has crashed.'), self.repositoryStatus.errors[0])
-    
-    def testAddTwoErrors(self):
-        self.repositoryStatus.addError('2006-03-01 12:13:14.456','Sorry, but the VM has crashed.')
-        self.repositoryStatus.addError('2006-03-02 12:13:14.456','java.lang.NullPointerException.')
-        self.assertEquals('', self.repositoryStatus.lastSuccesDate)
-        self.assertEquals('', self.repositoryStatus.harvested)
-        self.assertEquals('', self.repositoryStatus.uploaded)
-        self.assertEquals('', self.repositoryStatus.deleted)
-        self.assertEquals('', self.repositoryStatus.total)
-        self.assertEquals(2, len(self.repositoryStatus.errors))
-        self.assertEquals(('2006-03-01T12:13:14Z','Sorry, but the VM has crashed.'), self.repositoryStatus.errors[0])
-        self.assertEquals(('2006-03-02T12:13:14Z','java.lang.NullPointerException.'), self.repositoryStatus.errors[1])
-    
-    def testAddErrorsAfterSucces(self):
-        self.repositoryStatus.addSucces('2006-03-03 12:13:14.456','Harvested/Uploaded/Deleted/Total: 200/199/1/1542')
-        self.repositoryStatus.addError('2006-03-04 12:13:14.456','Sorry, but the VM has crashed.')
-        self.assertEquals('2006-03-03T12:13:14Z', self.repositoryStatus.lastSuccesDate)
-        self.assertEquals('200', self.repositoryStatus.harvested)
-        self.assertEquals('199', self.repositoryStatus.uploaded)
-        self.assertEquals('1', self.repositoryStatus.deleted)
-        self.assertEquals('1542', self.repositoryStatus.total)
-        self.assertEquals(1, len(self.repositoryStatus.errors))
-        self.assertEquals(('2006-03-04T12:13:14Z','Sorry, but the VM has crashed.'), self.repositoryStatus.errors[0])
-    
-    def testAddErrorsBeforeSucces(self):
-        self.repositoryStatus.addError('2006-03-02 12:13:14.456','Sorry, but the VM has crashed.')
-        self.repositoryStatus.addSucces('2006-03-03 12:13:14.456','Harvested/Uploaded/Deleted/Total: 200/199/1/1542')
-        self.assertEquals('2006-03-03T12:13:14Z', self.repositoryStatus.lastSuccesDate)
-        self.assertEquals('200', self.repositoryStatus.harvested)
-        self.assertEquals('199', self.repositoryStatus.uploaded)
-        self.assertEquals('1', self.repositoryStatus.deleted)
-        self.assertEquals('1542', self.repositoryStatus.total)
-        self.assertEquals(0, len(self.repositoryStatus.errors))
-    
     def testIntegration(self):
-        streamIn = StringIO("""[2005-08-20 20:00:00.456]\tERROR\t[repositoryId]\tError 1
+        open(join(self.logDir, self.domainId, 'repoId1.events'), 'w').write("""[2005-08-20 20:00:00.456]\tERROR\t[repositoryId]\tError 1
 [2005-08-21 20:00:00.456]\tSUCCES\t[repositoryId]\tHarvested/Uploaded/Deleted/Total: 4/3/2/10
 [2005-08-22 00:00:00.456]\tSUCCES\t[repositoryId]\tHarvested/Uploaded/Deleted/Total: 8/4/3/16
 [2005-08-22 20:00:00.456]\tERROR\t[repositoryId]\tError 2
@@ -122,10 +299,8 @@
 [2005-08-24 00:00:00.456]\tSUCCES\t[repositoryId]\tHarvested/Uploaded/Deleted/Total: 8/4/3/20
 [2005-08-24 20:00:00.456]\tERROR\t[repositoryId]\tError With Scary Characters < & > " '
 """)
-        streamOut = StringIO()
-        self.repositoryStatus.main(streamIn, streamOut)
-        self.assertEquals("""<?xml version="1.0"?>
-<status>
+        self.assertEqualsWS("""<GetStatus>
+<status repositoryId="repoId1" repositoryGroupId="repoGroupId1">
   <lastHarvestDate>2005-08-24T00:00:00Z</lastHarvestDate>
   <harvested>8</harvested>
   <uploaded>4</uploaded>
@@ -135,20 +310,11 @@
   <recenterrors>
     <error date="2005-08-24T20:00:00Z">Error With Scary Characters &lt; &amp; &gt; " '</error>
   </recenterrors>
-</status>""", streamOut.getvalue())
-        
-    def testZero(self):
-        streamIn = StringIO()
-        streamOut = StringIO()
-        self.repositoryStatus.main(streamIn, streamOut)
-        self.assertEquals("""<?xml version="1.0"?>
-<status>
-  <lastHarvestDate></lastHarvestDate>
-  <harvested></harvested>
-  <uploaded></uploaded>
-  <deleted></deleted>
-  <total></total>
-  <totalerrors>0</totalerrors>
-  <recenterrors></recenterrors>
-</status>""", streamOut.getvalue())
-
+  <ignored>2</ignored>
+  <recentignores>
+    <ignoredId>ignoredId2</ignoredId>
+    <ignoredId>ignoredId1</ignoredId>
+  </recentignores>
+  <lastHarvestAttempt>2005-08-24T20:00:00Z</lastHarvestAttempt>
+</status>
+</GetStatus>""", ''.join(compose(self.status.getStatus(domainId=self.domainId, repositoryId='repoId1'))))
Only in version_7.1.3/test: statustest.py
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_7.1.3/testsetup.sh version_7.2/testsetup.sh
--- version_7.1.3/testsetup.sh	2011-07-01 15:31:48.000000000 +0200
+++ version_7.2/testsetup.sh	2011-07-27 09:36:31.000000000 +0200
@@ -37,7 +37,7 @@
 cp -r test tmp/test
 cp meresco/__init__.py tmp/usr/lib/python2.5/site-packages/meresco
 export PYTHONPATH=`pwd`/tmp/usr/lib/python2.5/site-packages
-find tmp -name '*.py' -exec sed -e \
+find tmp -type f -exec sed -e \
     "/DO_NOT_DISTRIBUTE/d;
     s,^examplesPath.*$,examplesPath='$mydir/examples',;
     s,^harvesterDir.*$,harvesterDir='$PYTHONPATH',;
