Changeset created on Thu Apr 12 13:22:45 UTC 2012 by Seecr (Seek You Too B.V.)

Description: Update repositories in the current harvested waiting list. 

    Newly created repositories and delete repositories are now also updated in the list of current harvested repositories.
    This bug only affects harvesting without --runOnce.
    Also: Did some refactorings in the _startChildProcesses loop

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-harvester/workingsets/7.4.1-Edurep/version_0

diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/meresco/harvester/startharvester.py /home/hendrik/development/meresco/meresco-harvester/workingsets/7.4.1-Edurep/version_1/meresco/harvester/startharvester.py
--- version_0/meresco/harvester/startharvester.py	2012-04-12 09:09:14.000000000 +0200
+++ version_1/meresco/harvester/startharvester.py	2012-04-12 15:21:40.000000000 +0200
@@ -136,32 +136,25 @@
         return options
 
     def start(self):
-        self._childProcesses = []
         if self.child:
             self._startRepository()
-        elif self.repository:
-            self._startOne()
         else:
-            self._startAll()
-
-    def _startAll(self):
-        for key in self.saharaget.getRepositoryIds(self.domainId):
-            self._childProcesses.append(self._createArgs(['--repository='+key]))
-        self._startChildProcesses()
-
-    def _startOne(self):
-        self._childProcesses.append(self._createArgs(extraArgs=[]))
-        self._startChildProcesses()
+            self._startChildProcesses()
 
     def _startChildProcesses(self):
+        running = set()
+        if self.repository:
+            waiting = [self.repositoryId]
+        else:
+            waiting = self.saharaget.getRepositoryIds(self.domainId)
         processes = {}
         try:
-            for i in range(min(self._concurrency, len(self._childProcesses))):
-                args = self._childProcesses.pop(0)
-                t, process = self._createProcess(args)
-                processes[process.stdout.fileno()] = t, process, args
-                processes[process.stderr.fileno()] = t, process, args
-            while processes:
+            while running or waiting:
+                while waiting and (len(running) < self._concurrency):
+                    repositoryId = waiting.pop(0)
+                    self._createProcess(processes, repositoryId)
+                    running.add(repositoryId)
+
                 try:
                     readers, _, _ = select(processes.keys(), [], [])
                 except error, (errno, description):
@@ -173,7 +166,7 @@
                     if reader not in processes:
                         continue
 
-                    t, process, args = processes[reader]
+                    t, process, repositoryId = processes[reader]
                     try:
                         pipeContent = read(reader, 4096)
                     except OSError, e:
@@ -189,32 +182,46 @@
 
                     if process.poll() is not None:
                         exitstatus = t.stopScript(process)
+                        running.remove(repositoryId)
                         del processes[process.stdout.fileno()]
                         del processes[process.stderr.fileno()]
                         if exitstatus == AGAIN_EXITCODE:
-                            self._childProcesses.insert(0, args)
+                            waiting.insert(0, repositoryId)
                         else:
                             if exitstatus != 0:
-                                stderr.write("Process (with args: %s) exited with exitstatus %s.\n" % (args, exitstatus))
+                                stderr.write("Process (for repository %s) exited with exitstatus %s.\n" % (repositoryId, exitstatus))
                                 stderr.flush()
                             if not self.runOnce:
-                                self._childProcesses.append(args)
-                        if len(self._childProcesses) > 0:
-                            newArgs = self._childProcesses.pop(0)
-                            t, process = self._createProcess(newArgs)
-                            processes[process.stdout.fileno()] = t, process, newArgs
-                            processes[process.stderr.fileno()] = t, process, newArgs
+                                waiting.append(repositoryId)
+                        self._updateWaiting(waiting, running)
         except:
-            for t in set([t for t,process,args in processes.values()]):
+            for t in set([t for t,process,repositoryId in processes.values()]):
                 t.terminate()
             raise
 
-    def _createProcess(self, args):
+    def _createProcess(self, processes, repositoryId):
         t = TimedProcess()
-        return t, t.executeScript(args, self.processTimeout, SIGINT)
-
-    def _createArgs(self, extraArgs):
-        return argv[:1] + ["--child"] + extraArgs + argv[1:]
+        process = t.executeScript(self._createArgs(repositoryId), self.processTimeout, SIGINT)
+        processes[process.stdout.fileno()] = t, process, repositoryId
+        processes[process.stderr.fileno()] = t, process, repositoryId
+
+    def _createArgs(self, repositoryId):
+        args = argv + ["--child"]
+        extraArg = '--repository=%s' % repositoryId
+        if not extraArg in argv:
+            args += [extraArg]
+        return args
+    
+    def _updateWaiting(self, waiting, running):
+        repositoryIds = self.saharaget.getRepositoryIds(self.domainId)
+        for repoId in waiting[:]:
+            if not repoId in repositoryIds:
+                waiting.remove(repoId)
+        if self.runOnce or self.repository:
+            return
+        for repoId in repositoryIds:
+            if not repoId in waiting and not repoId in running:
+                waiting.append(repoId)
 
     def _startRepository(self):
         if self.forceTarget:
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/test/integration/harvestertest.py /home/hendrik/development/meresco/meresco-harvester/workingsets/7.4.1-Edurep/version_1/test/integration/harvestertest.py
--- version_0/test/integration/harvestertest.py	2012-04-12 09:09:17.000000000 +0200
+++ version_1/test/integration/harvestertest.py	2012-04-12 15:21:43.000000000 +0200
@@ -33,6 +33,7 @@
 from os.path import join, dirname, abspath
 from urllib import urlopen
 from time import time, sleep
+from threading import Thread
 from subprocess import Popen
 from shutil import copytree
 from lxml.etree import parse, tostring
@@ -40,7 +41,7 @@
 from cq2utils import CQ2TestCase
 from utils import getRequest
 
-from integrationtestcase import IntegrationTestCase
+from integrationtestcase import IntegrationTestCase, sleepWheel
 
 from meresco.harvester.state import getResumptionToken
 from meresco.harvester.harvesterlog import HarvesterLog
@@ -49,7 +50,7 @@
 
 BATCHSIZE=10
 DOMAIN='adomain'
-REPOSITORY='harvestertest'
+REPOSITORY='harvestertestrepository'
 REPOSITORYGROUP='harvesterTestGroup'
 
 class HarvesterTest(IntegrationTestCase):
@@ -60,16 +61,24 @@
         self.filesystemDir = join(self.integrationTempdir, 'filesystem')
         system("rm -rf %s" % self.filesystemDir)
         system("mkdir -p %s" % join(self.harvesterStateDir, DOMAIN))
-        self.repofilepath = join(self.integrationTempdir, 'data', "%s.%s.repository" % (DOMAIN, REPOSITORY))
-        repo = RepositoryData(REPOSITORY)
+        self.repofilepath = self.saveRepository(DOMAIN, REPOSITORY, REPOSITORYGROUP)
+
+    def saveRepository(self, domain, repositoryId, repositoryGroupId):
+        repofilepath = join(self.integrationTempdir, 'data', "%s.%s.repository" % (domain, repositoryId))
+        repo = RepositoryData(repositoryId)
         repo.use = 'true'
         repo.baseurl = 'http://localhost:%s/oai' % self.helperServerPortNumber
         repo.targetId = 'SRUUPDATE'
-        repo.repositoryGroupId = REPOSITORYGROUP
+        repo.repositoryGroupId = repositoryGroupId
         repo.mappingId = 'MAPPING'
         repo.metadataPrefix = 'oai_dc'
         repo.maximumIgnore = '5'
-        repo.save(self.repofilepath)
+        repo.save(repofilepath)
+        return repofilepath
+
+    def removeRepository(self, domain, repositoryId, repositoryGroupId):
+        repofilepath = join(self.integrationTempdir, 'data', "%s.%s.repository" % (domain, repositoryId))
+        remove(repofilepath)
 
     def tearDown(self):
         remove(self.repofilepath)
@@ -244,10 +253,10 @@
         self.startHarvester(repository=REPOSITORY)
         self.assertEquals(0, len(listdir(join(self.filesystemDir, REPOSITORYGROUP, REPOSITORY))))
         self.assertEquals(set([
-                'harvestertest:oai:record:10', 'harvestertest:oai:record:09', 'harvestertest:oai:record:08', 
-                'harvestertest:oai:record:07', 'harvestertest:oai:record:06', 'harvestertest:oai:record:05', 
-                'harvestertest:oai:record:04', 'harvestertest:oai:record:03', 'harvestertest:%0A oai:record:02%2F&gkn', 
-                'harvestertest:oai:record:01'
+                'harvestertestrepository:oai:record:10', 'harvestertestrepository:oai:record:09', 'harvestertestrepository:oai:record:08', 
+                'harvestertestrepository:oai:record:07', 'harvestertestrepository:oai:record:06', 'harvestertestrepository:oai:record:05', 
+                'harvestertestrepository:oai:record:04', 'harvestertestrepository:oai:record:03', 'harvestertestrepository:%0A oai:record:02%2F&gkn', 
+                'harvestertestrepository:oai:record:01'
             ]), 
             set([id.strip() for id in open(join(self.filesystemDir, 'deleted_records'))])
         )
@@ -365,7 +374,7 @@
             repositoryIds.append(xpath(lxml, '//ucp:recordIdentifier/text()')[0].split(':', 1)[0])
 
         repositoryIdsSet = set(repositoryIds)
-        self.assertEquals(set(['repository2', 'integrationtest', 'harvestertest']), repositoryIdsSet)
+        self.assertEquals(set(['repository2', 'integrationtest', 'harvestertestrepository']), repositoryIdsSet)
 
         lastSeenRepoId = None
         try:
@@ -394,6 +403,43 @@
         self.assertEquals(10, repositoryIds.count('repository2'))
         self.assertEquals(10, repositoryIds.count('integrationtest'))
 
+    def testStartHarvestingAddedRepository(self):
+        t = Thread(target=lambda: self.startHarvester(concurrency=1, runOnce=False))
+        t.start()
+
+        while not listdir(self.dumpDir):
+            sleep(0.1)
+
+        self.saveRepository(DOMAIN, 'xyz', 'xyz')
+        stdoutfile = join(self.integrationTempdir, "stdouterr-harvester.log")
+        sleepWheel(9)
+        log = open(stdoutfile).read()
+        try:
+            self.assertTrue('xyz' in log, log)
+        finally:
+            self.removeRepository(DOMAIN, 'xyz', 'xyz')
+            kill(self.harvesterPID, 2)
+            t.join()
+
+    def testDontHarvestDeletedRepository(self):
+        self.saveRepository(DOMAIN, 'xyz', 'xyz')
+        t = Thread(target=lambda: self.startHarvester(concurrency=1, runOnce=False))
+        t.start()
+
+        while not listdir(self.dumpDir):
+            sleep(0.1)
+
+        self.removeRepository(DOMAIN, 'xyz', 'xyz')
+        stdoutfile = join(self.integrationTempdir, "stdouterr-harvester.log")
+        sleepWheel(8)
+        log = open(stdoutfile).read()
+        try:
+            self.assertFalse('Traceback' in log, log)
+            self.assertFalse('[xyz]' in log, log)
+        finally:
+            kill(self.harvesterPID, 2)
+            t.join()
+
     def testConcurrencyAtLeastOne(self):
         stdouterrlog = self.startHarvester(concurrency=0)
         self.assertTrue("Concurrency must be at least 1" in stdouterrlog, stdouterrlog)
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/test/integration/integrationtestcase.py /home/hendrik/development/meresco/meresco-harvester/workingsets/7.4.1-Edurep/version_1/test/integration/integrationtestcase.py
--- version_0/test/integration/integrationtestcase.py	2012-04-12 09:09:17.000000000 +0200
+++ version_1/test/integration/integrationtestcase.py	2012-04-12 15:21:43.000000000 +0200
@@ -105,8 +105,10 @@
             env={'PYTHONPATH': harvesterDir, 'LANG': 'en_US.UTF-8'},
             stdout=stdouterrlog,
             stderr=stdouterrlog)
+        sleep(0.1)
+        self.harvesterPID = harvesterProcessInfo.pid
         if not waitForNothingToDo:
-            waitpid(harvesterProcessInfo.pid, 0)
+            sleepWheel(60, lambda: not harvesterProcessInfo.poll() is None)
         while waitForNothingToDo:
             stdouterrlog.seek(0)
             if 'Nothing to do!' in stdouterrlog.read():
@@ -239,3 +241,16 @@
     for k, v in kwargs.items():
         contents = contents.replace("${%s}" % k, str(v))
     open(filepath, "w").write(contents)
+
+def sleepWheel(seconds, callback=None, interval=0.2):
+    parts = ['\\', '|', '/', '-']
+    for i in range(int(seconds/0.2)):
+        stdout.write(parts[i%len(parts)])
+        stdout.flush()
+        sleep(interval)
+        stdout.write("\b")
+        stdout.flush()
+        if not callback is None:
+            if callback():
+                break
+
